{#
/**
 * @file
 * Theme override for the basic structure of a single Drupal page.
 *
 * Variables:
 * - deployment_identifier: Current deployment_identifier from Drupal settings.
 * - logged_in: A flag indicating if user is logged in.
 * - root_path: The root path of the current page (e.g., node, admin, user).
 * - node_type: The content type for the current node, if the page is a node.
 * - head_title: List of text elements that make up the head_title variable.
 *   May contain or more of the following:
 *   - title: The title of the page.
 *   - name: The name of the site.
 *   - slogan: The slogan of the site.
 * - page_top: Initial rendered markup. This should be printed before 'page'.
 * - page: The rendered page markup.
 * - page_bottom: Closing rendered markup. This variable should be printed after
 *   'page'.
 * - db_offline: A flag indicating if the database is offline.
 * - placeholder_token: The token for generating head, css, js and js-bottom
 *   placeholders.
 *
 * @see template_preprocess_html()
 */
#}
{# This body class must be in place for Behat. #}
{% set body_classes = [logged_in ? 'user-logged-in'] %}
<!DOCTYPE html>
<html{{ html_attributes }} >
  <head>

    <script>
      document.prefetchAlertsData = {};

      // See: https://gist.github.com/nekman/297ebda63d6b00380058cbb0114296aa#file-polyfill-js-L586
      // IE11 compatibility: Element.prototype.after
      function _mutation(nodes) { // eslint-disable-line no-unused-vars
        if (!nodes.length) {
          throw new Error('DOM Exception 8');
        } else if (nodes.length === 1) {
          return typeof nodes[0] === 'string' ? document.createTextNode(nodes[0]) : nodes[0];
        } else {
          var
          fragment = document.createDocumentFragment(),
          length = nodes.length,
          index = -1,
          node;

          while (++index < length) {
            node = nodes[index];

            fragment.appendChild(typeof node === 'string' ? document.createTextNode(node) : node);
          }

          return fragment;
        }
      }

      // See: https://gist.github.com/nekman/297ebda63d6b00380058cbb0114296aa#file-polyfill-js-L610
      // IE11 compatibility: Element.prototype.after
      if (typeof Document.prototype.after != 'function') {
        Document.prototype.after = Element.prototype.after = function after() {
          if (this.parentNode) {
            this.parentNode.insertBefore(_mutation(arguments), this.nextSibling);
          }
        };
      }

      // See: https://github.com/damienbod/angular-auth-oidc-client/issues/276#issue-352138019
      // IE11 compatibility: CustomEvent
      if (typeof CustomEvent != 'function') {
        (function () {
          function CustomEvent ( event, params ) {
            params = params || { bubbles: false, cancelable: false, detail: undefined };
            var evt = document.createEvent( 'CustomEvent' );
            evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
            return evt;
          }

          CustomEvent.prototype = window.Event.prototype;

          window.CustomEvent = CustomEvent;
        })();
      }

      // See: https://github.com/miguelcobain/ember-paper/issues/1058#issuecomment-461764542
      // IE11 compatibility: NodeList.prototype.forEach
      if (window.NodeList && !NodeList.prototype.forEach) {
        NodeList.prototype.forEach = Array.prototype.forEach;
      }

      // See: https://stackoverflow.com/a/43139506/1038565
      // IE11 compatibility: String.prototype.includes
      if (typeof String.prototype.includes != 'function') {
        String.prototype.includes = function(match) {
          return this.indexOf(match) !== -1;
        }
      }

      // See: https://dev.to/adrianbdesigns/how-to-polyfill-javascript-fetch-function-for-internet-explorer-g46
      if (typeof fetch != 'function') {
       // Create Promise polyfill script tag
        var promiseScript = document.createElement("script");
        promiseScript.type = "text/javascript";
        promiseScript.src =
            "https://cdn.jsdelivr.net/npm/promise-polyfill@8.1.3/dist/polyfill.min.js";

        // Create Fetch polyfill script tag
        var fetchScript = document.createElement("script");
        fetchScript.type = "text/javascript";
        fetchScript.src =
            "https://cdn.jsdelivr.net/npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js";

        // Add polyfills to head element
        document.head.appendChild(promiseScript);
        document.head.appendChild(fetchScript);
      }

      function getPageLevelAndSiteWideAlerts() {
        if (typeof fetch == 'function') {
          prefetch_alerts("{{ page_alerts_path }}");
          prefetch_alerts("{{ sitewide_alerts_path }}");
          return true;
        }
        return false;
      }

      var fetchChecker = getPageLevelAndSiteWideAlerts() ? 1: setInterval(function () {
        if (getPageLevelAndSiteWideAlerts()) {
          clearInterval(fetchChecker);
        };
      }, 100);

      function prefetch_alerts(data) {
        if (!data) {
          return;
        }

        // Previously using fetch, but XMLHttpRequest is more compatible
        // with older browsers (IE11).
        var xhr = new XMLHttpRequest();
        xhr.open("GET", data);
        xhr.responseType = "text";
        xhr.send();

        xhr.onload = function() {
          document.prefetchAlertsData[data] = this.responseText;
          document.dispatchEvent(new Event('mass_alerts_data_ready'));
        };

        xhr.onprogress = function() {};
        xhr.onerror = function() {};
      }
    </script>

    <!-- DEPLOYMENT IDENTIFIER: {{ deployment_identifier}} -->
    <head-placeholder token="{{ placeholder_token|raw }}">
    <title>{{ head_title|safe_join(' | ') }}</title>
    <css-placeholder token="{{ placeholder_token|raw }}">
    <js-placeholder token="{{ placeholder_token|raw }}">
    {% include directory ~ "/templates/includes/page-meta.html.twig" %}
    {# Update the version '?version=1' when changes occurs to the font files for caching. #}
    <link rel="preload" href="{{ file_url('libraries/mayflower-artifacts/assets/fonts/noto/Latin/NotoSans-VF-subset.woff2?version=1') }}" as="font" crossorigin/>

    <link rel="preload" href="{{ file_url('libraries/mayflower-artifacts/assets/fonts/noto/Latin/NotoSansItalic-VF-subset.woff2?version=1') }}" as="font" crossorigin/>
    {# Browser support banner #}
    <script>
      var $buoop = {
        required:{e:11,c:41,f:33,o:15,s:5},
        api:2021.07,
        text: "<b>Your browser ({brow_name}) is too old.</b> Things may not look or work right.  <a{up_but}>Update browser</a>  <a{ignore_but}>Ignore</a>"
      };
      function $buo_f(){
      var e = document.createElement("script");
      e.src = "//browser-update.org/update.min.js";
      document.body.appendChild(e);
      };
      try {document.addEventListener("DOMContentLoaded", $buo_f,false)}
      catch(e){window.attachEvent("onload", $buo_f)}
    </script>
  </head>
  <body{{ attributes.addClass(body_classes) }}>
    <svg-sprite-placeholder>

    {{ page_top }}
    {{ page }}
    {{ page_bottom }}


    {# Google Translate JS #}
    <script>
      function googleTranslateElementInit() {
        new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: '{{ languages }}', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
        document.querySelector('#google_translate_element') !== null ? document.querySelector('#google_translate_element').classList.add('has-rendered') : '';
      }
      (function() {
        var script = document.createElement('script');
        script.src = "//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit";
        script.async = true;
        element = document.getElementsByTagName('head')[0];
        element.appendChild(script);
      })();
    </script>
    <js-bottom-placeholder token="{{ placeholder_token|raw }}">
  </body>
</html>
