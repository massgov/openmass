{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * If we are using the default paragraph, we only want it to print the content.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set show_image_cards = content.field_use_image_cards['#items'].value %}
{% if numOfSections %}
  {% for i in range(1, numOfSections) %}
    {% if sectionContent[i]['sectionThreeUp'] %}
      {% set sectionThreeUp = sectionContent[i]['sectionThreeUp'] %}
      {% set linkHeading = 3 %}
      <section class="ma__sections-3up">
        <div class="ma__sections-3up__container">
        {% if show_image_cards %}
            {% for card_paragraph in paragraph.field_card %}
              {% if card_paragraph.entity %}
                {% set card_title = card_paragraph.entity.field_card_header.value %}
                {% set card_link = card_paragraph.entity.field_card_link.0.url %}
                {% set card_content = card_paragraph.entity.field_card_content.value %}
                {% set card_eyebrow = card_paragraph.entity.field_card_eyebrow.value %}
                {% if card_paragraph.entity.field_image is not empty and card_paragraph.entity.field_image.entity is not empty %}
                  {% set card_image = card_paragraph.entity.field_image.entity.uri.value|image_style('image_card') %}
                {% endif %}
                {%
                  set card = {
                    'card': {
                      'id': 'image-card--'|clean_unique_id,
                      'link': card_link,
                      'thumbnail': card_image,
                      'title': card_title,
                      'text': card_content,
                      'eyebrow': card_eyebrow,
                      'usage': 'vertical'
                    }
                  }
                %}
                {% include "@molecules/card.twig" with card %}
              {% endif %}
          {% endfor %}
        {% else %}
          {% block sectionLinks %}
            {% for sectionLinks in sectionThreeUp.sections %}
              {% set sectionLinks = sectionLinks|merge({'level': linkHeading, 'id': 'section-link--'|clean_unique_id}) %}
              {% include "@molecules/section-links.twig" with sectionLinks %}
            {% endfor %}
          {% endblock %}
        {% endif %}
        </div>
      </section>
    {% endif %}
  {% endfor %}
{% endif %}
