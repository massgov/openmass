{#
/**
 * @file
 * Theme implementation to display an iframe paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set caption = null %}
{% if paragraph.field_iframe_caption.value is not empty %}
  {% set caption = {
    '#type':   'processed_text',
    '#text':    paragraph.field_iframe_caption.value ?: '',
    '#format':  paragraph.field_iframe_caption.format ?: 'basic_html',
  } %}
{% endif %}
{% include "@atoms/09-media/figure--iframe.twig" with {
  "figure": {
    "align": paragraph.field_iframe_alignment.value,
    "wrap": paragraph.field_iframe_wrapping.value ? TRUE : FALSE,
    "size": paragraph.field_iframe_display_size.value,
    "iframe": {
      "src": paragraph.field_url.uri,
      "title": paragraph.field_iframe_accessibility_title.value,
      "height": paragraph.field_iframe_height_config.value is same as('ratio') ? null : iframe_height,
      "ratio": paragraph.field_iframe_height_config.value is not same as('ratio') ? null : paragraph.field_aspect_ratio.value,
      "position": paragraph.field_iframe_display_size.value,
      "caption": caption
    }
  }
} %}

