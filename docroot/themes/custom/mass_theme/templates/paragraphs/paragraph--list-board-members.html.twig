{#
/**
 * @file
 * Theme implementation to display a board member list paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Set top heading level for the component. #}
{% set level = 2 %}
{% if elements['#level'] is not empty %}
  {% set level = elements['#level'] %}
{% endif %}

{# The total number of board members to initially show. #}
{% set totalShown = 8 %}

{% embed "@organisms/by-author/stacked-row-section.twig" %}

  {% block stackedRowContentOverride %}
    {# Heading #}
    {{ content.field_heading|merge({'#level': level}) }}

    {# Board members (sections) #}
    {% embed '@organisms/by-author/teaser-listing-group.twig' with {
      teaserListingGroup: {
        totalShown: totalShown,
        moreItemsLabel: "Show all members"|t,
        lessItemsLabel: "Show fewer members"|t,
      },
    } %}

      {% block teaserListingGroupItems %}
        {# Increase heading number by 1 from the parent heading. #}
        {% set level = level + 1 %}

        {# Featured Board Members. #}
        <section class="ma__teaser-listing">
          <div class="ma__teaser-listing__container js-accordion">
            <div class="ma__teaser-listing ma__teaser-listing__featured-items">
              {{ content.field_featured_board_members|merge({'#level': level}) }}
            </div>
            {{ content.field_board_members|merge({'#level': level}) }}
          </div>
        </section>
      {% endblock %}

    {% endembed %}

  {% endblock %}
{% endembed %}
