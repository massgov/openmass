{#
/**
 * @file
 * Theme implementation to display an about paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Set top heading level for the component. #}
{% set level = 2 %}

{% set readMore = false %}
{% if paragraph.field_read_more_page is not empty %}
  {% set readMore = {
    "href": content.field_read_more_page[0]['#url'],
    "text": content.field_read_more_page[0]['#title']
  } %}
{% endif %}

{% embed "@organisms/by-author/about-section.twig" with {
  "about": {
    "content": {
      "rteElements": [{
        "path": "@atoms/11-text/paragraph.twig",
        "data": {
          "paragraph": {
            "text": paragraph.field_summary.value
          }
        }
      }]
    },
    "link": readMore,
    "social": {
      "compHeading": {
        "title": "Social:",
        "sub": "",
        "color": "green",
        "id": "",
        "centered": ""
      },
    },
    "secondary_person": paragraph.computed_secondary_bio_page is not empty
  }
} %}
  {% block primaryPersonCard %}
    {{ content.computed_bio_page }}
  {% endblock %}

  {% block secondaryPersonCard %}
    {{ content.computed_secondary_bio_page }}
  {% endblock %}

  {% block socialLinks %}
    {{ content.computed_social_links }}
  {% endblock %}
{% endembed %}
{{ content|without ('computed_bio_page', 'computed_secondary_bio_page', 'computed_social_links', 'field_read_more_page', 'field_component_add_separator') }}

{% if content.field_component_add_separator|field_value|render == "True" %}
  {% include "@atoms/divider.twig" with {
    "divider": {
      "thin": true
    }
  } %}
{% endif %}
