{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Set top heading level for the component. #}
{% set level = 3 %}

{# Accessibility context info for headings #}
{% set titleContext = 'for ' ~ content.field_guide_section_name[0]['#context']['value'] %}
{# {% if content.field_guide_ref_contacts_3|length > 2 %} #}
{# {% set sidebarContact =  %} #}
{# {% endif %} #}
{% embed "@organisms/by-author/stacked-row-section.twig" with {
  "stackedRowSection": {
    "title": content.field_guide_section_name,
    "id": "",
    "pageContent": {
      "path": "@organisms/by-author/rich-text.twig",
      "data": {
        "rteElements": {
          "path": "@atoms/11-text/paragraph.twig",
          "data": content.field_guide_section_body
        }
      }
    },
    "sideBar": content.field_guide_ref_contacts_3|length > 2 ? content.field_guide_ref_contacts_3 : ''
  }
} %}

  {% block stackedRowContentOverride %}
    {# Callout Time #}
    {% if content.field_guide_section_time|render is not empty %}
      {% include "@organisms/by-author/callout-time.twig" with {
        "calloutTime": {
          "text": content.field_guide_section_time
        }
      } %}
    {% endif %}

    {# Place the stat and the paragaphs in @organisms/by-author/rich-text.twig. #}
    {% embed "@organisms/by-author/rich-text.twig" with {
      "richText": {
        "compHeading": null,
        "sidebarHeading": null,
        "decorativeLink": null
      }
    } %}
      {% block rteElements %}
        {# Stat #}
        {% if content.field_guide_section_stat|render is not empty %}
          {% include "@molecules/callout-stats.twig" with {
            "statsCallout": {
              "pull": "right",
              "stat": content.field_guide_section_stat,
              "content": content.field_guide_section_label
            }
          } %}
        {% endif %}

        {# Body #}
        {% if content.field_guide_section_body is not empty %}
          {{ content.field_guide_section_body }}
        {% endif %}
      {% endblock %}
    {% endembed %}

    {# Alert #}
    {% if content.field_guide_section_alert_text|render is not empty %}
        {% include "@organisms/by-author/callout-alert.twig" with {
            "calloutAlert": {
              "text": content.field_guide_section_alert_text,
              "href": ""
            }
          } %}
    {% endif %}

    {# Key Actions #}
    {% if content.field_guide_section_links_4|render is not empty %}
      {% set maxLinks = 4 %}
      {% set actionLinks = [] %}
      {% for i in 0..maxLinks %}
        {# Process only when the data is available. #}
        {% if content.field_guide_section_links_4[i] %}
            {# Define the link text for entity title or author entered link text. #}
            {# Use dynamic_link_separate format to display the entity title value for link text. #}
            {% set linkText = content.field_guide_section_links_4[i]['#title']['#markup']
              ? content.field_guide_section_links_4[i]['#title']['#markup']
              : content.field_guide_section_links_4[i]['#title'] %}
            {# Array element set for key action links. #}
            {% set actionLinks = actionLinks|merge({(i): {
              "text": linkText,
              "type": content.field_guide_section_links_4[i]['#type'],
              "href": content.field_guide_section_links_4[i]['#url']
            }
            }) %}
        {% endif %}
      {% endfor %}
      {% include "@organisms/by-author/key-actions.twig" with {
        "keyActions": {
          "compHeading": {
            "title": "Key Actions",
            "titleContext": titleContext,
            "sub": true,
            "level": level,
            "id": ""
          },
          "links": actionLinks
        }
      } %}
    {% endif %}

    {# Downloads/Section Links #}
    {% if (content.field_guide_section_downloads|render is not empty)
        or (content.field_guide_section_link|render is not empty) %}
      {% embed "@organisms/by-author/form-downloads.twig" with {
          "formDownloads": {
            "compHeading": {
              "title": "Additional Resources",
              "level": level,
              "titleContext": titleContext,
              "sub": true,
            }
          }
        } %}
          {% block formDownloadLinks %}
              {% if content.field_guide_section_link|render is not empty %}
                  {{ content.field_guide_section_link }}
              {% endif %}
              {% if content.field_guide_section_downloads|render is not empty %}
                  {{ content.field_guide_section_downloads }}
              {% endif %}
          {% endblock %}
      {% endembed %}
    {% endif %}
  {% endblock %}

  {# Contacts #}
  {% block sidebar %}
    {% if content.field_guide_ref_contacts_3|render is not empty %}
      {% embed "@organisms/contact/contact-list.twig" with {
        "contactList": {
          "viewSpecific": false,
          "sidebarHeading": {
            "title": "Key Organizations",
            "titleContext": titleContext,
            "level": level
          }
        }
      } %}
        {% block contactListContacts %}
          {{ content.field_guide_ref_contacts_3 }}
        {% endblock %}
      {% endembed %}
    {% endif %}
  {% endblock %}

{% endembed %}
