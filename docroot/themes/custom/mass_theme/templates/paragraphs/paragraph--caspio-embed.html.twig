{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * If we are using the default paragraph, we only want it to print the content.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

<h3 style="color: orange;">OUTPUT TEST</h3>
{% set dataId = content.field_caspio_data_identifier[0]['#context'].value %}
{% set dataTitle = content.field_caspio_admin_title[0]['#context'].value %}

<figure class="ma__figure ma__figure--full ma__app-caspio" aria-label="{{ dataTitle }}">
  <script type="text/javascript" src="https://c0hbc136.caspio.com/dp/{{ dataId }}/emb"></script>
  <noscript>This feature requires Javascript to be enabled on your browser. Please enable Javascript and refresh the page.</noscript>
</figure>
{#
{% include "@atoms/09-media/figure--app-caspio.twig" with {
  "figure": {
    "content": content.field_caspio_data_identifier[0]['#context'].value
    "title": dataTitle = content.field_caspio_admin_title[0]['#context'].value
  }
} %}
#}

{# -------------- #}

{# {% if figure.caspio %} #}
	{# Render figure.content, which will be the main content of the figure #}
	{# {% set content %}
	{% set id = 'caspio-' ~ random(9999) %}
	<div id="{{ id }}"></div>
  <script type="text/javascript" src="https://c0hbc136.caspio.com/dp/{{ dataId }}/emb"></script>
  <noscript>This feature requires Javascript to be enabled on your browser. Please enable Javascript and refresh the page.</noscript>
	{% endset %}
	{% set figure = figure|merge({
    'content': content,
  }) %}
{% endif %}
{% include "@atoms/09-media/figure.twig" with {
  figure: figure|merge({
    'class': 'ma__app-caspio ',
  })
} %} #}

{#
****** TABLEAU SAMPLE ******
{% include "@atoms/09-media/figure--dataviz.twig" with {
  "figure": {
    "align": content.field_tabl_alignment["#items"][0].value,
    "wrap": content.field_tabl_wrapping["#items"][0].value ? TRUE : FALSE,
    "size": content.field_tabl_display_size["#items"][0].value,
    "content": content.field_url,
    "caption": content.field_tabl_caption["#items"][0] ? content.field_tabl_caption : ''
  }
} %}

{% if figure.dataviz %}
	{% set content %}
	{% set id = 'dataviz-' ~ random(9999) %}
	<div id="{{ id }}"></div>
	<script type="text/javascript">
		window.addEventListener("DOMContentLoaded", function () {
new tableau.Viz(document.getElementById("{{ id }}"), "{{ figure.dataviz.url }}");
});
	</script>
	{% endset %}
	{% set figure = figure|merge({
    'content': content,
  }) %}
{% endif %}
{% include "@atoms/09-media/figure.twig" with {
  figure: figure|merge({
    'align': figure.align|default('left'),
    'size': figure.size|default('large'),
    'class': 'ma__dataviz',
  })
} %}
 #}
