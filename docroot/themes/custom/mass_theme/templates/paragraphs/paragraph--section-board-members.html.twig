{#
/**
 * @file
 * Theme implementation to display a board member section paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Set top heading level for the component. #}
{% set level = 3 %}
{% if elements['#level'] is not empty %}
  {% set level = elements['#level'] %}
{% endif %}

{% set description = {} %}
{% if content.field_description is not empty %}
  {% set description = {
    text: content.field_description,
    level: level,
  } %}
{% endif %}

{% set compHeading = {} %}
{% if paragraph.field_heading.value %}
  {% set compHeading = {
    title: paragraph.field_heading.value,
    level: level,
  } %}
{% endif %}

{% if paragraph.field_heading.value and paragraph.field_description.value %}
  {% embed '@organisms/by-author/teaser-listing.twig' with {
    teaserListing: {
      stacked: false,
      contained: true,
      gridTwoColumns: true,
      expandable: true,
      itemsLabel: "board members"|t,
      moreItemsLabel: "Show all members"|t,
      lessItemsLabel: "Show fewer members"|t,
      description: description,
      compHeading: compHeading,
      showNumber: 6,
    },
  } %}
    {% block teaserListingItems %}
       {# Board members #}
      {% if content.field_board_members is not empty and teaserListing.expandable %}
        <ul class="ma__teaser-listing__items ma__teaser-listing__2-col-grid">
          {{ content.field_board_members|merge({'#level': level}) }}
        </ul>
      {% endif %}
    {% endblock %}
  {% endembed %}

{% else %}
  {% if content.field_board_members is not empty %}
    <ul class="ma__teaser-listing ma__teaser-listing__items ma__teaser-listing__2-col-grid">
      {{ content.field_board_members|merge({'#level': level}) }}
    </ul>
  {% endif %}
{% endif %}
