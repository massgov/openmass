<?php

/**
 * @file
 * Functions to support theming in the mass.gov theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\mass_content\EventsRendererOrgPages;
use Drupal\mayflower\Helper;
use Drupal\mayflower\Prepare\Atoms;
use Drupal\mayflower\Prepare\Molecules;
use Drupal\mayflower\Prepare\Organisms;
use Drupal\mayflower\Prepare\Schemas;
use Drupal\mass_utility\RelatedToHelper;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\DomCrawler\Crawler;
use Drupal\schema_metatag\SchemaMetatagManager;

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  // Build a map of paragraph types and the twig files they map to.
  $map = [
    'action_step_numbered_list' => 'steps_ordered',
    'activities' => 'image_promos',
    'image_promo' => 'image_promos',
    'callout_link' => 'callout_links',
  ];

  // Add the appropriate theme suggestions.
  if (array_key_exists($variables['elements']['#paragraph']->getType(), $map)) {
    $suggestions[] = $map[$variables['elements']['#paragraph']->getType()];
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Force the template for specific view modes.
  if (in_array($variables['elements']['#view_mode'], ['link_only', 'link_and_description'])) {
    $suggestions = [];
    $suggestions[] = 'node__' . $variables['elements']['#view_mode'];
  }
  // Build a map of paragraph types and the twig files they map to.
  $map = [
    'contact_information' => 'contact_us',
  ];

  // Allow the contact_list view mode to use template mapping.
  if (!in_array($variables['elements']['#view_mode'], [
    'contact_groups_only',
    'contact_list',
    'contact_us_guide_page',
    'contact_summary',
    'contact_us',
    'sidebar',
    'application_login_link',
    'organization_navigation',
    'map',
  ])) {
    // Add the appropriate theme suggestions.
    if (array_key_exists($variables['elements']['#node']->getType(), $map)) {
      $suggestions[] = $map[$variables['elements']['#node']->getType()];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mass_theme_theme_suggestions_image_style_alter(array &$suggestions, array $variables) {
  if (isset($variables['style_name'])) {
    $suggestions[] = 'image_style__' . str_replace('-', '_', $variables['style_name']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mass_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Allow all data listing views pages to use the same template file.
  if (strpos($view->id(), 'data_listing') !== FALSE && $view->getDisplay()->getPluginId() == 'page') {
    $suggestions[] = 'views_view__data_listing';
  }

  // Allow all collection views pages to use the same template file.
  if (strpos($view->id(), 'collection') !== FALSE && $view->getDisplay()->getPluginId() == 'page') {
    $suggestions[] = 'views_view__data_listing';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout button paragraphs.
 */
function mass_theme_preprocess_callout_links(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'calloutLinks' => Molecules::prepareCalloutLinks($paragraph),
  ];

  if (Helper::getParentNode($paragraph)->bundle() == "org_page") {
    $variables["useWrapper"] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see patterns/molecules/action-seq-list.twig
 */
function mass_theme_preprocess_action_seq_list(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  // Sets the variable structure required for action-seq-list.twig.
  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'actionSeqLists' => Molecules::prepareActionSeqList($paragraph),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see @organisms/by-author/steps-ordered.twig
 */
function mass_theme_preprocess_steps_ordered(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  // Sets the variable structure required for action-seq-list.twig.
  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'stepsOrdered' => Organisms::prepareStepsOrdered($paragraph),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * The action activities pattern has been deprecated in favor of image promos.
 *
 * @see @organisms/by-author/image-promos.twig
 */
function mass_theme_preprocess_image_promos(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'imagePromos' => Organisms::prepareImagePromos($paragraph->field_activities),
  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  $original_theme_hook = $variables['theme_hook_original'];

  // For the pilot static homepage, we need to be able to theme a specific node
  // as the front page.
  if ($node = \Drupal::routeMatch()->getParameter('node') && in_array('html__front', $suggestions)) {
    $node = \Drupal::routeMatch()->getParameter('node');
    $suggestions[] = 'html__node__' . $node->id();
  }

  if (isset($variables['element']) && isset($variables['element']['#id'])) {
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    if (isset($variables['element']['#type']) && isset($variables['element']['#name']) && $variables['element']['#type'] == 'textfield') {
      $original_theme_hook = $variables['theme_hook_original'];

      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#name']);
    }

    if (isset($variables['element']['#attributes']) && array_key_exists('data-theming-id', $variables['element']['#attributes'])) {
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#attributes']['data-theming-id']);
    }
  }

  if ($hook == 'views_view') {
    $style_plugin = $variables['view']->style_plugin->definition['id'];
    $suggestions[] = 'views_view__' . $style_plugin;
  }

  if ($hook == 'views_view_fields') {
    $style_plugin = $variables['view']->style_plugin->definition['id'];
    $suggestions[] = 'views_view_fields__' . $style_plugin;
  }

  if ($hook == 'views_view_field') {
    if (array_key_exists('type', $variables['field']->options)) {
      $field_type = $variables['field']->options['type'];
      $suggestions[] = 'views_view_field__' . $field_type;
      $suggestions[] = 'views_view_field__' . $variables['view']->style_plugin->definition['id'] . '__' . $field_type;
    }

    if ($variables['field']->field == 'title') {
      $suggestions[] = 'views_view_field__' . $variables['view']->style_plugin->definition['id'] . '__' . $field_type . '__title';
    }
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the How-to page.
 */
function mass_theme_preprocess_node_how_to_page(&$variables) {
  $node = $variables['node'];
  $cache_tags = [];
  $action_type = NULL;

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Get the value of field_customize_header_text or set to FALSE by default.
  $field_customize_header_text = intval($node->field_customize_header_text->value) == 1 ? TRUE : FALSE;

  // Set static details properties.
  $titleContext = t(' of @title', ['@title' => $page_title]);
  $variables['details'] = [
    'contentTitle' => t('The Details'),
    'titleContext' => $titleContext,
  ];

  // Get the action type taxonomy term.
  if (Helper::isFieldPopulated($node, 'field_how_to_taxo_action_type')) {
    $taxonomy_term = $node->get('field_how_to_taxo_action_type')->referencedEntities()[0];
    $cache_tags = array_merge($cache_tags, $taxonomy_term->getCacheTags());
    $action_type = $taxonomy_term->get('name')->value;
  }

  // Set up optional contents for pageHeader prepare invocation.
  $optionalContents = [];

  // If callout time field is populated, add to optional content.
  if (Helper::isFieldPopulated($node, 'field_how_to_time')) {
    $optionalContents[] = [
      'path' => '@organisms/by-author/callout-time.twig',
      'data' => [
        'calloutTime' => Molecules::prepareCalloutTime($node, 'field_how_to_time'),
      ],
    ];
  }

  // If recommended quick actions field is populated, add to optional content.
  if (Helper::isFieldPopulated($node, 'field_how_to_link_1')) {
    $optionalContents[] = [
      'path' => '@organisms/by-author/key-actions.twig',
      'data' => [
        'keyActions' => Molecules::prepareKeyActions($node, 'field_how_to_link_1'),
      ],
    ];

    if ($variables['view_mode'] === 'listing') {
      $variables['quick_action_links'] = Helper::separatedLinks($node, 'field_how_to_link_1');
    }
  }

  // Set up widgets for prepare pageHeader invocation.
  $widgets = NULL;

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    // @todo Consider making divider site-builder configurable vs hard-coded
    "divider" => FALSE,
    "optionalContents" => $optionalContents,
    "widgets" => $widgets,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  // Set up pageContent for details section.
  $pageContent = [];

  // Set up Sticky Nav with entries corresponding used to details sections.
  $stickyNav = [];

  // Set up the sidebar.
  $sidebar = [];

  // Build what you need section, if that field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_what_you_need')) {

    // Set up section title for heading, sticky nav.
    $what_you_need_title = ($field_customize_header_text && !$node->field_what_you_need_header->isEmpty()) ? $node->field_what_you_need_header->value : t('What you need');

    // Set up corresponding sticky nav entry for what you need.
    $stickyNav[] = $what_you_need_title;

  }

  // Build methods tabular data if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_ref_fees') || Helper::isFieldPopulated($node, 'field_how_to_fee_description')) {
    // Set up section title for heading, sticky nav.
    $fees_title = ($field_customize_header_text && !$node->field_fees_header->isEmpty()) ? $node->field_fees_header->value : t('Fees');
    $titleContext = t(' for @title', ['@title' => $page_title]);

    // Set up options for how to ___.
    $tabularData_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $fees_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ],
    ];

    $pageContent['tabularData'] = Organisms::prepareTabularData($node, $tabularData_options, $cache_tags);

    // Set up corresponding sticky nav entry for fees.
    $stickyNav[] = $fees_title;

  }

  // Build methods unordered list if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_methods_5')) {
    // Set up title for section heading and sticky nav.
    $how_to_title = t('How to @action', ['@action' => $action_type]);

    $titleContext = t(' @title', ['@title' => $page_title]);
    // Set up options for how to ___.
    $unorderedSteps_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $how_to_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ],
    ];

    $stepsUnordered = Organisms::prepareStepsUnordered($node, $unorderedSteps_options);

    $pageContent['stepsUnordered'] = $stepsUnordered;

    // Set up corresponding sticky nav entry for how to ___.
    $stickyNav[] = $how_to_title;

  }

  // Build for the next steps is being done in the node--how-to-page.html.twig instead.
  // To check if the field for the next steps is populated for the sticky nav to display.
  if (Helper::isFieldPopulated($node, 'field_how_to_next_steps')) {
    // Set up title for section and sticky nav.
    $next_steps_title = ($field_customize_header_text && !$node->field_next_steps_header->isEmpty()) ? $node->field_next_steps_header->value : t('Next steps');

    // Set up corresponding sticky nav entry for next steps.
    $stickyNav[] = $next_steps_title;

  }

  // Build more info section, if that field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_more_info')) {

    // Set up title for more info section and sticky nav.
    $more_info_title = ($field_customize_header_text && !$node->field_more_info_header->isEmpty()) ? $node->field_more_info_header->value : t('More info');

    // Set up corresponding sticky nav entry for More Info.
    $stickyNav[] = $more_info_title;

  }

  // Build manage your account section, if that field is populated.
  if (Helper::isFieldPopulated($node, 'field_manage_your_account')) {

    // Set up title for manage your account section and sticky nav.
    $manage_account_title = ($field_customize_header_text && !$node->field_manage_your_account_header->isEmpty()) ? $node->field_manage_your_account_header->value : t('Manage your account');

    // Set up corresponding sticky nav entry for Manage your account.
    $stickyNav[] = $manage_account_title;

  }

  // Build for the downloads section is being done in the node--how-to-page.html.twig instead.
  // To check if the field for the downloads is populated for the sticky nav to display.
  if (Helper::isFieldPopulated($node, 'field_how_to_files')) {
    // Set up title for downloads section and sticky nav.
    $downloads_title = ($field_customize_header_text && !$node->field_downloads_header->isEmpty()) ? $node->field_downloads_header->value : t('Downloads');

    // Set up corresponding sticky nav entry for Downloads.
    $stickyNav[] = $downloads_title;
  }

  // Build contact section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_contacts_3')) {
    // Set up title for contacts section and sticky nav.
    $contacts_title = t("Contact");
    $titleContext = t(' for @title', ['@title' => $page_title]);

    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $contacts_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];

    $pageContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);

    if ($pageContent['contactList']) {
      // Build sidebar.contactList, which is a subset of pageContent.ContactList.
      $sidebar['contactList'] = Helper::getPrimaryContactPhoneOnlineContactList($pageContent['contactList']);
      // Hide the top contact on mobile.
      $sidebar['contactList']['compHeading']['id'] = 'sidebar-contact';
      $sidebar['contactList']['viewSpecific'] = TRUE;
    }

    // Set up corresponding sticky nav entry for contacts.
    $stickyNav[] = $contacts_title;
  }

  // Build the sticky nav based on the array of titles.
  if (!empty($stickyNav)) {
    $titleContext = $page_title;
    $variables['stickyNav'] = Molecules::prepareStickyNav($stickyNav, $titleContext);
  }

  // Make pageContent data structure available in template.
  $variables['pageContent'] = $pageContent;

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_links_5')) {
    $titleContext = t(' to @title', ['@title' => $page_title]);
    // Set up options for link list.
    $linkList_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
    ];

    $sidebar['linkList'] = Organisms::preparelinkList($node, 'field_how_to_links_5', $linkList_options);
  }

  // Make sidebar data structure available in template.
  $variables['sidebar'] = $sidebar;

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Form page.
 */
function mass_theme_preprocess_node_form_page(&$variables) {
  if ($variables['elements']['#view_mode'] == 'full') {
    $node = $variables['node'];
    $cache_tags = [];
    $sidebar = [];

    // Create the map of all possible field names to use.
    $map = [
      'contact' => ['field_form_ref_contacts_3'],
      'lede' => ['field_form_lede'],
      'needs' => ['field_form_you_will'],
    ];

    // Determines which field names to use from the map.
    $fields = Helper::getMappedFields($node, $map);

    // Set static pageHeader properties to pass to prepare function.
    $pageHeader_options = [
      'category' => '',
      'divider' => FALSE,
      'headerTags' => '',
      'optionalContents' => '',
      'widgets' => '',
      'subTitle' => !empty($fields['lede']) ? Helper::fieldValue($node, $fields['lede']) : '',
    ];

    // Make pageBanner data object available in twig template.
    $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

    $formRequirements = [];
    $mainContent = [];
    $sideContent = [];

    if (Helper::isFieldPopulated($node, 'field_form_you_will')) {
      $formRequirements = [];
      // Set up rich text elements for what you need.
      $youWillNeed['rteElements'] = [
        Atoms::prepareTextField($node, 'field_form_you_will'),
      ];
      $formRequirements['richText'] = $youWillNeed;

      if (!empty($fields['icons']) && Helper::isFieldPopulated($node, $fields['icons'])) {
        $payment = [
          'title' => [
            'text' => t('Payment accepted:'),
          ],
          'locationIcons' => [
            'icons' => Molecules::prepareLocationIcons($node),
          ],
        ];
        $formRequirements['payment'] = $payment;
      }
    }

    if ((!empty($fields['downloads']) && Helper::isFieldPopulated($node, $fields['downloads'])) || (!empty($fields['links']) && Helper::isFieldPopulated($node, $fields['links']))) {
      // Set up options for formDownloads prepare.
      $downloadLinks_options = [
        'heading' => [
          'type' => 'compHeading',
          'title' => t('Additional Resources'),
          'sub' => TRUE,
        ],
      ];
      $mainContent['formDownloads'] = Organisms::prepareFormDownloads($node, $downloadLinks_options);
    }

    // Build contact section, if field is populated.
    if (!empty($fields['contact']) && Helper::isFieldPopulated($node, $fields['contact'])) {
      // Set up options for contact list.
      $contactList_options = [
        'heading' => [
          'title' => t("Contact"),
          'sub' => TRUE,
        ],
        'groups' => [
          'accordion' => TRUE,
          'isExpanded' => FALSE,
        ],
      ];

      $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);
      // Build sidebar.contactList, which is a subset of pageContent.ContactList.
      $sidebarContacts_options = [
        'groups' => [
          'accordion' => FALSE,
          'isExpanded' => FALSE,
        ],
      ];
      // Prepare the sidebarContact data object cache tags do not need to be sent.
      $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
      unset($sideContent['contactList']['compHeading']);
      $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
      $sideContent['contactList']['viewSpecific'] = FALSE;
    }

    $variables['formRequirements'] = $formRequirements;
    $variables['mainContent'] = $mainContent;
    $variables['sideContent'] = $sideContent;

    if (!empty($node->field_form_embed->value)) {
      try {
        $crawler = new Crawler($node->field_form_embed->value);
        $script_url = $crawler->filterXPath('//script[@src]')->attr('src');
        $noscript_url = $crawler->filterXPath('//noscript/a[@href]')->attr('href');
        $validate_script_url = parse_url($script_url, PHP_URL_HOST);
        $validate_noscript_url = parse_url($noscript_url, PHP_URL_HOST);

        $query = ['no_style_strict' => 1];
        if ($node->field_form_embed->type === 'formstack') {
          $query['jsonp'] = 1;
        }
        if (str_ends_with($validate_script_url, "formstack.com")) {
          $variables['form_url'] = Url::fromUri($script_url, ['query' => $query])->toString();
        }
        if (str_ends_with($validate_noscript_url, "formstack.com")) {
          $variables['form_url_noscript'] = $noscript_url;
        }
      }
      catch (\Exception $e) {
        \Drupal::logger('mass_fields')->warning('Parsing of formstack URL failed: %message', [
          '%message' => $e->getMessage(),
        ]);
      }
    }

    if (!empty($cache_tags)) {
      // Merge arrays of existing and new cache tags and removes duplicates.
      $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
      // Add the cache tags to the render array.
      $variables['#cache']['tags'] = $merged_tags;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Org page.
 */
function mass_theme_preprocess_node_org_page(&$variables) {
  if ($variables['elements']['#view_mode'] == 'full') {
    $node = $variables['node'];
    $cache_tags = [];

    // Get the page title for title context.
    $page_title = $node->getTitle();

    // Slugified title.
    $variables['slugified_title'] = _mass_metatag_slugify(trim($page_title));

    $subtype = $node->field_subtype->value;
    if ($subtype === 'General Organization' ||
      $subtype === 'Boards' ||
      $node->field_banner_image->count() === 0) {
      // Set static pageBanner properties to pass to prepare function.
      $pageBanner_options = [
        "layout" => "taper",
        "icon" => NULL,
      ];

      // Make pageBanner data object available in twig template.
      $variables['pageBanner'] = Organisms::preparePageBanner($node, $pageBanner_options);

    }

    if (!empty($cache_tags)) {
      // Merge arrays of existing and new cache tags and removes duplicates.
      $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
      // Add the cache tags to the render array.
      $variables['#cache']['tags'] = $merged_tags;
    }
    if (isset($max_age)) {
      $variables['#cache']['max-age'] = $max_age;
    }
  }

  // Prepare the schema.governmentOrganization data object.
  $variables['schema'] = Schemas::prepareGovernmentOrganization($variables);
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Location page.
 */
function mass_theme_preprocess_node_location(&$variables) {
  $node = $variables['node'];

  if ($variables['elements']['#view_mode'] == 'full') {
    $cache_tags = [];

    // Get the page title for title context.
    $page_title = $node->getTitle();

    if (Helper::isFieldPopulated($node, 'field_location_type')) {
      $locationType = $node->field_location_type->value;
    }
    else {
      $locationType = 'general';
    }

    // We need a different Google map config for PL tpls.
    // $variables['#attached']['library'][] = 'mass_theme/mass-google-map-apis-location';.
    // Set static actionHeader properties to pass to prepare function.
    $pageHeader_options = [
      'divider' => FALSE,
    ];

    // Prepare optional content to pass to pageHeader.
    $optionalContents = [];

    // Build contact us optional contents.
    if (Helper::isFieldPopulated($node, 'field_ref_contact_info_1')) {
      $optionalContents = array_merge($optionalContents, Helper::buildPageHeaderOptionalContentsContactUs($node, 'field_ref_contact_info_1', [], $cache_tags));
    }

    // If recommended quick actions field is populated, add to optional content.
    if (Helper::isFieldPopulated($node, 'field_links')) {
      $optionalContents[] = [
        'path' => '@organisms/by-author/key-actions.twig',
        'data' => [
          'keyActions' => Molecules::prepareKeyActions($node, 'field_links'),
        ],
      ];
    }

    // Send optional contents as a pageHeader option.
    $pageHeader_options['optionalContents'] = $optionalContents;

    // Prepare widgets that can be passed to the pageHeader.
    $widgets = [];
    if (!$node->field_location_icons->isEmpty() || !$node->field_location_icons_park->isEmpty()) {
      $widgets[] = [
        'path' => '@molecules/location-icons.twig',
        'data' => [
          'locationIcons' => [
            'icons' => Molecules::prepareLocationIcons($node),
          ],
        ],
      ];
    }
    // iFrames.
    if ($node->field_iframe->entity) {
      $widgets[] = [
        'path' => '@atoms/11-text/raw-html.twig',
        'data' => [
          'rawHtml' => [
            'content' => '<iframe src="' . $node->field_iframe->entity->field_url->uri . '" height="' . $node->field_iframe->entity->field_height->value . '" style="width:100%;"></iframe>',
          ],
        ],
      ];
    }

    // Send widgets as pageHeader option.
    $pageHeader_options['widgets'] = $widgets;

    // Prepare the actionHeader data object.
    $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

    // Prepare the locationBanner data object.
    $variables['locationBanner'] = Organisms::prepareLocationBanner($node, [], $cache_tags);

    // Set up pageContent for details section.
    $pageContent = [];

    // Set static details properties.
    $titleContext = t(' of @title', ['@title' => $page_title]);
    $variables['details'] = [
      'titleContext' => $titleContext,
    ];

    // Set up Sticky Nav with entries corresponding used to details sections.
    $stickyNav = [];

    // Build what you need section, if that field is populated.
    if (Helper::isFieldPopulated($node, 'field_overview')) {
      $titleContext = t(' of @title', ['@title' => $page_title]);
      // Set up rich text elements for what you need.
      $richTextElements = [
        'richText' => [
          'rteElements' => [Atoms::prepareTextField($node, 'field_overview')],
        ],
      ];

      // Set up section title for heading, sticky nav.
      $overview_title = t('Overview');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $overview_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageOverview'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $overview_title;

    }

    if (Helper::isFieldPopulated($node, 'field_ref_contact_info_1')) {
      // Cache tags are already gathered earlier.
      $contact_entities[] = Helper::getReferencedEntitiesFromField($node, 'field_ref_contact_info_1');

      foreach ($contact_entities as $contact) {
        $titleContext = t(' for @title', ['@title' => $page_title]);
        $contact_entity = $contact[0];
        // Don't know why this map isn't working.
        // $contact_fields = Helper::getMappedFields($contact_entity, $contact_map)
        $hours_content[] = Helper::buildHours($contact_entity->field_ref_hours, 'Hours', $titleContext);
      }

      $richTextElements = [
        'rteElements' => $hours_content,
      ];

      // Set up section title for heading, sticky nav.
      $hours_title = t('Hours');
      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $hours_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageHours'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $hours_title;
    }

    if (Helper::isFieldPopulated($node, 'field_parking')) {
      $titleContext = t(' at @title', ['@title' => $page_title]);
      // Set up rich text elements for what you need.
      $richTextElements = [
        'rteElements' => [
          Atoms::prepareTextField($node, 'field_parking'),
        ],
      ];

      // Set up section title for heading, sticky nav.
      $parking_title = t('Parking');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $parking_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageParking'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $parking_title;
    }

    if (Helper::isFieldPopulated($node, 'field_location_activity_detail') && $locationType == 'park') {
      $titleContext = t(' at @title', ['@title' => $page_title]);
      $imagePromos = Organisms::prepareImagePromos($node->field_location_activity_detail);

      // Set up section title for heading, sticky nav.
      $activities_title = t('Activities');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $activities_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageActivities'] = array_merge($compHeading, $imagePromos);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $activities_title;
    }

    if (Helper::isFieldPopulated($node, 'field_location_all_activities') && $locationType == 'park') {
      $titleContext = t(' at @title', ['@title' => $page_title]);
      // Roll up taxo terms into unordered list.
      $activities = [];
      foreach ($node->field_location_all_activities as $activity) {
        $activities[] = Helper::fieldValue($activity->entity, 'name');
      }

      // Set up rich text elements for what you need.
      $richTextElements = [
        'rteElements' => [
          [
            'path' => '@atoms/11-text/raw-html.twig',
            'data' => [
              'rawHtml' => [
                'content' => [
                  '#theme' => 'item_list',
                  '#items' => $activities,
                ],
              ],
            ],
          ],
        ],
      ];

      // Set up section title for heading, sticky nav.
      $allActivities_title = t('All Activities');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $allActivities_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageAllActivities'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $allActivities_title;
    }

    if (Helper::isFieldPopulated($node, 'field_location_facilities')) {
      $titleContext = t(' at @title', ['@title' => $page_title]);
      // Set up rich text elements for what you need.
      $richTextElements = [
        'rteElements' => [
          Atoms::prepareTextField($node, 'field_location_facilities'),
        ],
      ];

      // Set up section title for heading, sticky nav.
      $facilities_title = t('Facilities');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $facilities_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageFacilities'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $facilities_title;

    }

    if (Helper::isFieldPopulated($node, 'field_services')) {
      $titleContext = t(' at @title', ['@title' => $page_title]);
      // Set up rich text elements for what you need.
      $richTextElements = [
        'rteElements' => [
          Atoms::prepareTextField($node, 'field_services'),
        ],
      ];

      // Set up section title for heading, sticky nav.
      $services_title = t('Services');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $services_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageServices'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $services_title;
    }

    if (Helper::isFieldPopulated($node, 'field_accessibility')) {
      $titleContext = t(' at @title', ['@title' => $page_title]);
      // Set up rich text elements for what you need.
      $richTextElements = [
        'rteElements' => [
          Atoms::prepareTextField($node, 'field_accessibility'),
        ],
      ];

      // Set up section title for heading, sticky nav.
      $accessibility_title = t('Accessibility');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $accessibility_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageAccessibility'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $accessibility_title;
    }

    if (Helper::isFieldPopulated($node, 'field_restrictions')) {
      $titleContext = t(' at @title', ['@title' => $page_title]);
      // Set up rich text elements for what you need.
      $richTextElements = [
        'rteElements' => [
          Atoms::prepareTextField($node, 'field_restrictions'),
        ],
      ];

      // Set up section title for heading, sticky nav.
      $restrictions_title = t('Restrictions');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $restrictions_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageRestrictions'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $restrictions_title;
    }

    if (Helper::isFieldPopulated($node, 'field_location_more_information')) {
      $titleContext = t(' for @title', ['@title' => $page_title]);
      // Set up rich text elements for what you need.
      $richTextElements = [
        'rteElements' => [
          Atoms::prepareTextField($node, 'field_location_more_information'),
        ],
      ];

      // Set up section title for heading, sticky nav.
      $moreInfo_title = t('More info');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $moreInfo_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $pageContent['pageMoreInfo'] = array_merge($compHeading, $richTextElements);

      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $moreInfo_title;
    }

    $more_list = [];
    $links = [];
    $nearby = FALSE;

    if (Helper::isFieldPopulated($node, 'computed_related_locations')) {
      $more_locations = $node->computed_related_locations->getValue();

      foreach ($more_locations as $location) {
        $more_node = Node::load($location['target_id']);
        if (!$more_node->isPublished()) {
          continue;
        }
        if ($more_node->hasField('field_related_organization_type')) {
          $nearby = $nearby || $more_node->field_related_organization_type->value;
        }
        $links[] = [
          'href' => Url::fromRoute('view.locations.page', ['node' => $more_node->id()]),
          'text' => $more_node->label() . ' Locations',
        ];
        $cache_tags = Cache::mergeTags($cache_tags, $more_node->getCacheTags());
      }
    }

    $titleContext = t(' for @title', ['@title' => $page_title]);
    $related_prefix = $nearby ? t('Nearby') : t('Related');
    $related_title = $locationType == 'park' ? t('@prefix parks', ['@prefix' => $related_prefix]) : t('@prefix locations', ['@prefix' => $related_prefix]);

    $suggested_options = [
      'title' => $related_title,
      'titleContext' => $titleContext,
      'style' => 'suggested_pages_230x130',
      'maxItems' => 3,
    ];

    $suggestedPages = Organisms::prepareSuggestedPages($node, $suggested_options, $cache_tags);

    $compHeading_options = [
      'title' => $related_title,
      'titleContext' => $titleContext,
      'sub' => TRUE,
    ];

    $compHeading = Atoms::prepareCompHeading($compHeading_options);

    if (!empty($suggestedPages)) {
      $suggestedPages = array_merge($compHeading, $suggestedPages);
      // Set up corresponding sticky nav entry for what you need.
      $stickyNav[] = $related_title;
    }

    $link_list = [];

    if (!empty($links)) {
      $titleContext = t(' for @title', ['@title' => $page_title]);
      $more_title = $locationType == 'park' ? t('More parks') : t('More locations');

      // Set up heading for what you need.
      $compHeading_options = [
        'title' => $more_title,
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ];

      $compHeading = Atoms::prepareCompHeading($compHeading_options);

      $link_list = [
        'links' => $links,
      ];

      if (empty($suggestedPages)) {
        $more_list = array_merge($compHeading_options, ['moreLinks' => $link_list]);
      }
      else {
        $link_list = array_merge($compHeading, $link_list);
        $more_list = ['moreLinks' => $link_list];
      }
    }

    $variables['suggestedPages'] = array_merge($suggestedPages, $more_list);

    // Build the sticky nav based on the array of titles.
    if (!empty($stickyNav)) {
      $titleContext = $page_title;
      $variables['stickyNav'] = Molecules::prepareStickyNav($stickyNav, $titleContext);
    }

    // Prepare the sidebarContacts object.
    $titleContext = t(' for @title', ['@title' => $page_title]);
    $sidebarContacts_options = [
      'heading' => [
        'type' => 'coloredHeading',
        'title' => t('Contacts'),
        'titleContext' => $titleContext,
      ],
      'display_title' => TRUE,
      'link_title' => FALSE,
      'level' => 2,
    ];

    $variables['pageContent'] = $pageContent;

    // Prepare the sidebarContact data object.
    $variables['sidebarContact'] = Organisms::prepareSidebarContact($node, $sidebarContacts_options, $cache_tags);

    $variables['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], [], $cache_tags);

    if (!empty($cache_tags)) {
      // Merge arrays of existing and new cache tags and removes duplicates.
      $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
      // Add the cache tags to the render array.
      $variables['#cache']['tags'] = $merged_tags;
    }
  }

  if ($variables['elements']['#view_mode'] == 'teaser') {
    $cache_tags = [];
    $contacts = [];

    if (!empty($node->field_ref_contact_info_1)) {
      foreach ($node->field_ref_contact_info_1 as $entity) {
        $n = Node::load($entity->target_id);
        $address = '';
        if (!empty($n->field_ref_address->entity->field_address_address)) {
          $addressEntity = $n->field_ref_address->entity->field_address_address;
          $address = !empty($addressEntity[0]->address_line1) ? $addressEntity[0]->address_line1 . ', ' : '';
          $address .= !empty($addressEntity[0]->address_line2) ? $addressEntity[0]->address_line2 . ', ' : '';
          $address .= !empty($addressEntity[0]->locality) ? $addressEntity[0]->locality : '';
          $address .= !empty($addressEntity[0]->administrative_area) ? ', ' . $addressEntity[0]->administrative_area : '';
          $address .= !empty($addressEntity[0]->postal_code) ? ' ' . $addressEntity[0]->postal_code : '';
        }
        $phone = $n->field_ref_phone_number->entity;
        $fax = $n->field_ref_fax_number->entity;
        $links = $n->field_ref_links->entity;
        $contacts = [
          'field_phone' => $phone && $phone->field_phone ? $phone->field_phone->value : NULL,
          'field_fax' => $fax && $fax->field_fax ? $fax->field_fax->value : NULL,
          'field_email' => $links && $links->field_email ? $links->field_email->value : NULL,
          'field_address' => $address,
        ];
      }
    }

    $address_link = isset($contacts['field_address']) ? 'https://maps.google.com/?q=' . urlencode($contacts['field_address']) : '';

    $variables['imagePromo'] = [
      'location' => [
        'map' => TRUE,
        'text' => isset($contacts['field_address']) ? $contacts['field_address'] : '',
      ],
      'infoWindow' => [
        'name'     => '',
        'phone'    => isset($contacts['field_phone']) ? $contacts['field_phone'] : '',
        'fax'      => isset($contacts['field_fax']) ? $contacts['field_fax'] : '',
        'email'    => isset($contacts['field_email']) ? $contacts['field_email'] : '',
        'address'  => isset($contacts['field_address']) ? $contacts['field_address'] : '',
        'directions' => $address_link,
      ],
      'link' => [
        'text' => t("Directions"),
        'href' => $address_link,
        'info' => ''
      ]
    ];

    // Location subtitle.
    $variables['imagePromo']['title'] = [
      'text' => $node->getTitle(),
      'href' => $node->toUrl()->toString(),
      'type' => '',
    ];

    $overview = '';

    if (!empty($node->field_overview->value)) {
      $overview = Helper::fieldFullView($node, 'field_overview');
    }

    // Get the description for the node.
    $variables['imagePromo']['description']['richText'] = [
      'rteElements' => [
        [
          'path' => '@atoms/11-text/raw-html.twig',
          'data' => [
            'rawHtml' => [
              'content' => $overview,
            ],
          ],
        ],
      ],
    ];

    $thumbnail = '';
    if (Helper::isFieldPopulated($node, 'field_bg_narrow') && $node->get('field_bg_narrow')->referencedEntities()) {
      $thumbnail = Helper::getFieldImageUrl($node, 'thumbnail_190_107', 'field_bg_narrow');
    }

    if ($thumbnail) {
      $variables['imagePromo']['image'] = [
        'src' => $thumbnail,
        'alt' => $node->getTitle(),
        'href' => '#',
      ];
    }

    // Get the available location icon taxonomy term names and sprites.
    $tags = [];
    if (Helper::isFieldPopulated($node, 'field_location_icons')) {
      $icons = Helper::getReferencedEntitiesFromField($node, 'field_location_icons');

      // Get the icon name (value) for each term.
      foreach ($icons as $term) {
        $field_sprite_name = $term->get('field_sprite_name');
        if ($field_sprite_name->count() > 0) {
          $sprite_name = $field_sprite_name->first()->getValue();
          $sprite = $sprite_name['value'];
        }

        // For filterable icon/term types, create a tag.
        // @TODO consider making the accepted values configurable.
        if (in_array($sprite, ['wheelchair', 'open-now'])) {
          $title = $term->getName();
          $tags[] = [
            "label" => $title,
            "icon" => $sprite,
            "id" => $sprite,
          ];
        }
      }
    }

    // Add all filterable icon/terms as this listing's imagePromo tags.
    $variables['imagePromo']['tags'] = $tags;

    if (!$node->field_ref_contact_info_1->isEmpty()) {
      $contact_information_entity = $node->field_ref_contact_info_1->entity;
      // Convert to array_merge to avoid rewriting results
      // if you are adding cache tags above.
      $cache_tags = $contact_information_entity->getCacheTags();
      // Get phone number from the referenced contact info node.
      if (!empty($contact_information_entity->field_ref_phone_number->entity->field_phone->value)) {
        $phone = $contact_information_entity->field_ref_phone_number->entity->field_phone->value;

        // Add the phone number to the listing item imagePromo.
        $variables['imagePromo']['phone'] = [
          'label' => t('Phone'),
          'text' => $phone,
        ];
      }

      // Get hours from the referenced contact info node.
      if (!$contact_information_entity->field_ref_hours->isEmpty()) {
        $hours_paragraph = $contact_information_entity->field_ref_hours->entity;
        if (!is_null($hours_paragraph) && !isset($hours_paragraph->field_hours_structured->entity)) {
          $hours = $hours_paragraph->field_hours_structured->view('default');
          if ($hours) {
            $hours = \Drupal::service('renderer')->render($hours);
            $hours = str_replace('<p>', '', $hours);
            $hours = str_replace('</p>', '|', $hours);
            $hours = array_map('trim', explode('|', $hours));
            foreach ($hours as $hour) {
              $hour = trim(strip_tags($hour, '<br>'));
              if (!$hour) {
                continue;
              }

              $hour = array_map('trim', explode('<br>', $hour));
              $variables['imagePromo']['hours'][] = [
                'label' => trim($hour[0] ?? ''),
                'text' => trim($hour[1] ?? ''),
              ];
            }
          }
        }
      }
    }
    if (!empty($cache_tags)) {
      // Merge arrays of existing and new cache tags and removes duplicates.
      $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
      // Add the cache tags to the render array.
      $variables['#cache']['tags'] = $merged_tags;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Topic pages.
 */
function mass_theme_preprocess_node_topic_page(&$variables) {
  if ($variables['elements']['#view_mode'] == 'full') {
    $node = $variables['node'];
    $cache_tags = [];
    $taxonomy_terms = [];

    $relatedTopics = RelatedToHelper::getRelatedTopicsByCardLinks($node->id());
    foreach ($relatedTopics as $topic) {
      $cache_tags = array_merge($cache_tags, $topic->getCacheTags());
      $taxonomy_terms[] = [
        'href' => $topic->toUrl(),
        'text' => $topic->label(),
      ];
    }

    // Set static pageHeader properties to pass to prepare function.
    $headerTags_options = [];
    $taxonomy_terms_unique = array_unique($taxonomy_terms, SORT_REGULAR);
    if (!empty($taxonomy_terms_unique)) {
      $headerTags_options = [
        'label' => t('More about:'),
        'taxonomyTerms' => $taxonomy_terms_unique,
      ];
    }

    // contentEyebrow output is replaced with primay relationship indicator.
    // Set the relationshipIndicator options.
    $relationshipIndicator_options = [
      "tags" => $taxonomy_terms_unique,
    ];

    // Make relationshipIndicatorPrimary data structure available in twig template.
    $variables['relationshipIndicatorPrimary'] = Organisms::prepareRelationshipIndicatorPrimary($relationshipIndicator_options);

    // Create the map of all possible field names to use.
    $map = [
      'icon' => ['field_topic_ref_icon'],
    ];

    // Determines which field names to use from the map.
    $fields = Helper::getMappedFields($node, $map);

    $icon = Helper::getReferenceField($node->{$fields['icon']}, 'field_sprite_name');

    if ($icon) {
      $icon = Helper::getIconPath($icon);
    }

    // Set static pageBanner properties to pass to prepare function.
    $pageBanner_options = [
      'icon' => $icon,
      'color' => 'white',
      'underline' => TRUE,
    ];

    $pageBanner_options = array_merge($pageBanner_options, ['type' => 'topic']);
    // Make pageBanner data structure available in twig template.
    $variables['pageBanner'] = Organisms::preparePageBanner($node, $pageBanner_options);

    // Make sure images aren't visible in the page banner.
    unset($variables['pageBanner']['bgWide']);
    unset($variables['pageBanner']['bgNarrow']);

    // Make expandableContent data structure available in twig template.
    $renderer = \Drupal::service('renderer');
    foreach ($node->field_topic_content_cards as $index => $section) {
      $variables['numOfSections'] = ++$index;
      $expandableContent_options = [];
      $title_field = Helper::fieldFullView($section->entity, 'field_content_card_category');
      if (!empty($title_field)) {
        $expandableContent_options += [
          'categoryTitle' => htmlspecialchars_decode($renderer->renderRoot($title_field)),
        ];
      }

      $variables['pageContent'][$index]['expandableContent'] = Organisms::prepareExpandableContent($section->entity, $expandableContent_options, ['topic_cards' => ['field_content_card_link_cards']], $cache_tags);
    }

    $linkList_options = [
      'heading' => [
        'title' => t('Related Topics'),
        'type' => 'compHeading',
      ],
    ];

    $variables['linkList'] = Organisms::prepareLinkList($node, 'field_topic_ref_related_topics', $linkList_options);

    if (!empty($cache_tags)) {
      // Merge arrays of existing and new cache tags and removes duplicates.
      $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
      // Add the cache tags to the render array.
      $variables['#cache']['tags'] = $merged_tags;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Binder page.
 */
function mass_theme_preprocess_node_binder(&$variables) {
  if ($variables['elements']['#view_mode'] == 'full') {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $variables['node'];
    $organizations = $node->get('field_binder_ref_organization')->referencedEntities();
    $items = [];
    $cache_tags = [];

    foreach ($organizations as $organization_node) {
      $items[] = ['text' => $organization_node->toLink()->toString()->getGeneratedLink()];
      $cache_tags = array_merge($cache_tags, $organization_node->getCacheTags());
    }

    $variables['binder_organization_items'] = $items;

    // Prepare any referenced events for sidebar.
    $sideContent['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], [], $cache_tags);

    // Set up options for link list.
    $linkList_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => t('Related'),
      ],
      'stacked' => TRUE,
    ];
    $sideContent['linkList'] = Organisms::prepareLinkList($node, 'field_binder_related', $linkList_options);
    $variables['sideContent'] = $sideContent;

    if (!empty($cache_tags)) {
      // Merge arrays of existing and new cache tags and removes duplicates.
      $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
      // Add the cache tags to the render array.
      $variables['#cache']['tags'] = $merged_tags;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Info Details page.
 */
function mass_theme_preprocess_node_info_details(&$variables) {
  if ($variables['elements']['#view_mode'] == 'full') {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $variables['node'];

    $variables['tableauEmbeded'] = FALSE;
    $variables['cardGroup'] = FALSE;

    // Prepare field_banner_image, if it's populated.
    if (Helper::isFieldPopulated($node, 'field_banner_image')) {
      $variables['bgImage'] = Helper::getFieldImageUrl($node, 'action_banner_large_focal_point', 'field_banner_image');
      $variables['bgPosition'] = Helper::getFieldImageFocalPoint($node, 'field_banner_image');
    }

    foreach ($node->get('field_info_details_sections')->referencedEntities() as $section) {
      $ref_entities = $section->get('field_section_long_form_content')->referencedEntities();
      foreach ($ref_entities as $index => $entity) {
        if ($entity->bundle() == 'tableau_embed') {
          $variables['tableauEmbeded'] = TRUE;
        }
        if ($entity->bundle() == 'info_details_card_group') {
          $variables['cardGroup'] = TRUE;
        }
      }
    }

    // Get the page title for title context.
    $page_title = $node->getTitle();
    // Set up options for formDownloads prepare.
    $titleContext = t(' to @title', ['@title' => $page_title]);

    if ($node->field_info_details_related->count() > 0) {
      // Set up options for link list.
      $linkList_options = [
        'heading' => [
          'type' => 'sidebarHeading',
          'title' => t('Related'),
          'titleContext' => $titleContext,
        ],
        'stacked' => TRUE,
      ];
      $sideContent['linkList'] = Organisms::prepareLinkList($node, 'field_info_details_related', $linkList_options);
      $variables['sideContent'] = $sideContent;
    }

    // Hide sidebar when 'visual_story' is select from the field_page_template field.
    if ($node->field_page_template && $node->field_page_template->value == 'visual_story') {
      $variables['no_sidebar'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node_error_page(&$variables) {
  $variables['sealImage'] = \Drupal::service('file_url_generator')->generateAbsoluteString(mayflower_get_path() . '/assets/images/logo/stateseal.png');
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Executive Order page.
 */
function mass_theme_preprocess_node_executive_order(&$variables) {
  $node = $variables['node'];
  $sideContent = [];
  $cache_tags = [];
  $mainContent = NULL;

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Create the map of all possible field names to use.
  $map = [
    'type' => ['field_executive_order_adjustment'],
    'body' => ['body'],
    'contact' => ['field_executive_order_contact'],
    'date' => ['field_date_published'],
    'issuer' => ['field_executive_order_issuer'],
    'number' => ['field_executive_order_mass_regis'],
    'meta_tags' => ['field_executive_order_metatags'],
    'overview' => ['field_executive_order_overview'],
    'links' => ['field_executive_order_related'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => 'Executive Order',
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  if (!empty($fields['overview']) && Helper::isFieldPopulated($node, $fields['overview'])) {
    $mainContent['personalMessage']['imagePromos'][] = Molecules::prepareImagePromo($node, ['lede' => $fields['overview']], []);
  }

  $richText = '';
  if (Helper::isFieldPopulated($node, 'body')) {
    // Set up rich text elements for what you need.
    $richText = [
      'rteElements' => [
        Atoms::prepareTextField($node, 'body'),
      ],
    ];
  }

  $mainContent['richText'] = $richText;

  if (!empty($fields['date']) && Helper::isFieldPopulated($node, $fields['date'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Date@colon", ['@colon' => ':']),
      'text' => \Drupal::service('date.formatter')->format(strtotime($node->{$fields['date']}->value), 'custom', 'm/d/Y'),
    ];
  }

  if (Helper::isFieldPopulated($node, 'field_executive_order_issuer')) {
    $map_issuer = [
      'display_name' => ['field_issuer_display_name'],
      'title' => ['field_issuer_title'],
    ];

    $issuers = Helper::issuerListingTable($node, ['issuer' => $fields['issuer']], $map_issuer);

    $listingTable['rows'][] = [
      'label' => t("Issuer@colon", ['@colon' => ':']),
      'text' => nl2br(implode("\n", $issuers)),
    ];
  }

  if (!empty($fields['number']) && Helper::isFieldPopulated($node, $fields['number'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Mass Register@colon", ['@colon' => ':']),
      'text' => t("No. @number", ['@number' => Helper::fieldValue($node, $fields['number'])]),
    ];
  }

  if (Helper::isFieldPopulated($node, 'field_executive_order_adjustment')) {
    foreach ($node->{$fields['type']} as $adjustment) {
      $adjustmentEntity = $adjustment->entity;
      if ($adjustmentEntity instanceof ContentEntityInterface) {
        $adjustmentLink = Helper::dataFromLinkField($adjustmentEntity, ['link' => 'field_adjustment_type_link']);
        if (!empty($adjustmentLink) && Helper::isFieldPopulated($adjustmentEntity, 'field_adjustment_type_term')) {
          $listingTable['rows'][] = [
            'label' => $adjustmentEntity->field_adjustment_type_term->entity->name->value . ':',
            'text' => Link::fromTextAndUrl($adjustmentLink[0]['title'], $adjustmentLink[0]['url'])->toString(),
          ];
        }
        // @todo DP-6012: After field_adjustment_type has been migrated to
        // field_adjustment_type_term and field_adjustment_type has been
        // removed, this if statement can be removed.
        elseif (!empty($adjustmentLink) && Helper::isFieldPopulated($adjustmentEntity, 'field_adjustment_type')) {
          if (!isset($adjustment_types)) {
            $adjustment_types = $adjustmentEntity->getFieldDefinition('field_adjustment_type')->getFieldStorageDefinition()->getSetting('allowed_values');
          }
          $listingTable['rows'][] = [
            'label' => $adjustment_types[Helper::fieldValue($adjustmentEntity, 'field_adjustment_type')] . ':',
            'text' => Link::fromTextAndUrl($adjustmentLink[0]['title'], $adjustmentLink[0]['url'])->toString(),
          ];
        }
      }
    }
  }

  $mainContent['listingTable'] = $listingTable;

  // Build contact section, if field is populated.
  if (!empty($fields['contact']) && Helper::isFieldPopulated($node, $fields['contact'])) {
    // Set up options for contact list.
    $titleContext = t(' for  @title', ['@title' => $page_title]);
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];
    // Prepare the sidebarContact data object do not need to send cache tags a second time.
    $titleContext = t(' for  @title', ['@title' => $page_title]);
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $sideContent['contactList']['sidebarHeading']['titleContext'] = $titleContext;
    $sideContent['contactList']['viewSpecific'] = TRUE;
  }

  // Build related links section, if field is populated.
  if (!empty($fields['links']) && Helper::isFieldPopulated($node, $fields['links'])) {
    // Set up options for link list.
    $titleContext = t(' to  @title', ['@title' => $page_title]);
    $pressListing_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
    ];

    $sideContent['pressListing'] = Organisms::preparePressListing($node, $fields['links'], $pressListing_options, [], $cache_tags);
  }

  // Prepare any referenced events for sidebar.
  $sideContent['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], [], $cache_tags);

  $variables['mainContent'] = $mainContent;
  $variables['sideContent'] = $sideContent;

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Decision page.
 */
function mass_theme_preprocess_node_decision(&$variables) {
  $node = $variables['node'];
  $category = '';
  $sideContent = [];
  $cache_tags = [];
  $result = [];
  $listingTable = [];
  $persons = [];
  $labelledList = [];

  // Get the page title and docket number for title context.
  $page_title = $node->getTitle();
  $docket_number = $node->get('field_decision_docket_number')->value;

  // Create the map of all possible field names to use.
  $map = [
    'contact' => ['field_decision_ref_contact'],
    'date' => ['field_date_published'],
    'number' => ['field_decision_docket_number'],
    'location' => ['field_decision_location'],
    'meta_tags' => ['field_decision_metatags'],
    'organization' => ['field_decision_ref_organization'],
    'overview' => ['field_decision_overview'],
    'participants' => ['field_decision_participants'],
    'sources' => ['field_decision_sources'],
    'links' => ['field_decision_related'],
    'sections' => ['field_decision_section'],
    'category' => ['field_decision_ref_type'],
    'footnotes' => ['field_decision_footnotes'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  if (!empty($fields['date']) && Helper::isFieldPopulated($node, $fields['date'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Date@colon", ['@colon' => ':']),
      'text' => \Drupal::service('date.formatter')->format(strtotime($node->{$fields['date']}->value), 'custom', 'm/d/Y'),
    ];
  }

  if (!empty($fields['organization']) && Helper::isFieldPopulated($node, $fields['organization'])) {
    foreach ($node->{$fields['organization']} as $index => $org) {
      $orgEntity = $org->entity;
      if (!empty($orgEntity)) {
        // Get the view results entities' cache tags.
        $cache_tags = array_merge($cache_tags, $orgEntity->getCacheTags());
        $listingTable['rows'][] = [
          'label' => t("Organization@colon", ['@colon' => ':']),
          'text' => Html::escape($orgEntity->getTitle()),
        ];
      }
    }
  }

  if (!empty($fields['number']) && Helper::isFieldPopulated($node, $fields['number'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Docket Number@colon", ['@colon' => ':']),
      'text' => Helper::fieldFullView($node, $fields['number']),
    ];
  }

  if (Helper::isFieldPopulated($node, 'field_decision_location')) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Location@colon", ['@colon' => ':']),
      'text' => Helper::fieldFullView($node, 'field_decision_location'),
    ];
  }

  if (!empty($fields['sources']) && Helper::isFieldPopulated($node, $fields['sources'])) {
    $listingTable['rows'][] = Helper::rowListingTable($node, ['sources' => $fields['sources']], ['label' => t('Referenced Sources')]);
  }

  $optionalContents[] = [
    'path' => '@molecules/listing-table.twig',
    'data' => [
      'listingTable' => $listingTable,
    ],
  ];

  if (Helper::isFieldPopulated($node, 'field_decision_participants')) {
    $rows = [];
    // Create rows.
    foreach ($node->{$fields['participants']} as $participant) {
      $participantEntity = $participant->entity;
      $participantType = $participantEntity->field_ref_participant_type->entity;
      $participantName = Helper::fieldValue($participantEntity, 'field_decision_participant_name');

      if (!empty($participantType) && !empty($participantName)) {
        $rows[] = [
          'label' => $participantType->name->value . ':',
          'text' => $participantName,
        ];
      }
    }

    // Group results.
    foreach ($rows as $data) {
      $id = $data['label'];
      if (isset($result[$id])) {
        $result[$id][] = $data['text'];
      }
      else {
        $result[$id] = [$data['text']];
      }
    }

    // Structure for template.
    foreach ($result as $category => $people) {
      foreach ($people as $person) {
        $persons[$category][] = $person;
      }
      $labelledList['items'][] = [
        'label' => $category,
        'text' => implode(', ', $persons[$category]),
      ];
    }

    if (!empty($result)) {
      $optionalContents[] = [
        'path' => '@molecules/labelled-list.twig',
        'data' => [
          'labelledList' => $labelledList,
        ],
      ];
    }
  }

  if (!empty($fields['overview']) && Helper::isFieldPopulated($node, $fields['overview'])) {
    $headerRichText = [
      'rteElements' => [
        Atoms::prepareTextField($node, $fields['overview']),
      ],
    ];

    $optionalContents[] = [
      'path' => '@organisms/by-author/rich-text.twig',
      'data' => [
        'richText' => $headerRichText,
      ],
    ];
  }

  $taxonomyTerms = [];

  if (!empty($node->{$fields['organization']})) {
    foreach ($node->{$fields['organization']} as $tag) {
      // Get the view results entities' cache tags.
      $cache_tags = array_merge($cache_tags, $tag->entity->getCacheTags());
      $taxonomyTerms[] = [
        'href' => $tag->entity->toURL()->toString(),
        'text' => Helper::fieldValue($tag->entity, 'title'),
      ];
    }
  }

  if (!empty($fields['category']) && Helper::isFieldPopulated($node, $fields['category'])) {
    $category = Term::load($node->field_decision_ref_type->target_id)->getName();
  }

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => $category,
    'optionalContents' => $optionalContents,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  foreach ($node->{$fields['sections']} as $index => $section) {
    $variables['numOfSections'] = ++$index;
    $sectionEntity = $section->entity;

    // Create the map of the field names to use.
    $map_ref = [
      'title' => ['field_decision_section_title'],
      'body' => ['field_decision_section_body'],
    ];

    // Determines which field names to use from the map.
    $field = Helper::getMappedFields($sectionEntity, $map_ref);

    if (!empty($field['title']) && Helper::isFieldPopulated($sectionEntity, $field['title'])) {
      $compHeading_options = [
        'title' => Helper::fieldValue($sectionEntity, $field['title']),
      ];
      $sections[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
      $sections[$index]['id'] = Helper::createIdTitle(Helper::fieldValue($sectionEntity, $field['title']));
    }

    if (!empty($field['body']) && Helper::isFieldPopulated($sectionEntity, $field['body'])) {
      // Set up rich text elements for what you need.
      $sections[$index]['richText'] = [
        'rteElements' => [
          Atoms::prepareTextField($sectionEntity, $field['body']),
        ],
      ];
    }
  }

  // Build contact section, if field is populated.
  if (!empty($fields['contact']) && Helper::isFieldPopulated($node, $fields['contact'])) {
    $titleContext = t(' for @docket @title', ['@docket' => $docket_number, '@title' => $page_title]);
    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'titleContext' => $titleContext,
        'sub' => TRUE,
        'id' => 'contact',
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];
    // Prepare the sidebarContact data object do not need to send cache tags a second time.
    $titleContext = t(' for @docket @title', ['@docket' => $docket_number, '@title' => $page_title]);
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $sideContent['contactList']['sidebarHeading']['titleContext'] = $titleContext;
    $sideContent['contactList']['viewSpecific'] = TRUE;

    $sections[] = [
      'title' => $contactList_options['heading']['title'],
      'id' => $contactList_options['heading']['id'],
    ];
  }

  if (!empty($fields['footnotes']) && Helper::isFieldPopulated($node, $fields['footnotes'])) {
    $footnoteList['items'][]['richText'] = [
      'rteElements' => [
        Atoms::prepareTextField($node, $fields['footnotes']),
      ],
    ];

    $mainContent['footnoteList'] = $footnoteList;
  }

  if (!empty($fields['sources']) && Helper::isFieldPopulated($node, $fields['sources'])) {
    $taxonomyTerms = [];
    $source_links = Helper::dataFromLinkField($node, ['link' => $fields['sources']]);
    foreach ($source_links as $source_link) {
      $taxonomyTerms[] = [
        'href' => $source_link['url'],
        'text' => $source_link['title'],
      ];
    }
    $references = [
      'label' => t("Referenced Sources@colon", ['@colon' => ':']),
      'taxonomyTerms' => $taxonomyTerms,
    ];

    $mainContent['references'] = $references;
  }

  // Build related links section, if field is populated.
  if (!empty($fields['links']) && Helper::isFieldPopulated($node, $fields['links'])) {
    $titleContext = t(' to @docket @title', ['@docket' => $docket_number, '@title' => $page_title]);
    // Set up options for link list.
    $pressListing_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
    ];

    $sideContent['pressListing'] = Organisms::preparePressListing($node, $fields['links'], $pressListing_options, [], $cache_tags);
  }

  // Prepare any referenced events for sidebar.
  $titleContext = t(' for @docket @title', ['@docket' => $docket_number, '@title' => $page_title]);
  // Set up options for link list.
  $eventListing_options = [
    'type' => 'sidebarHeading',
    'title' => t('Upcoming Events'),
    'titleContext' => $titleContext,
    'stacked' => TRUE,
  ];
  $sideContent['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], $eventListing_options, $cache_tags);

  if (!empty($sections)) {
    $variables['sections'] = $sections;
  }
  if (!empty($mainContent)) {
    $variables['mainContent'] = $mainContent;
  }
  if (!empty($sideContent)) {
    $variables['sideContent'] = $sideContent;
  }

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Regulation page.
 */
function mass_theme_preprocess_node_regulation(&$variables) {
  $node = $variables['node'];
  $category = 'Regulation';
  $publish_state = NULL;
  $cache_tags = [];
  $listingTable = [];
  $sideContent = [];

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Create the map of all possible field names to use.
  $map = [
    'contact' => ['field_regulation_contact'],
    'date' => ['field_date_published'],
    'meta_tags' => ['field_regulation_metatags'],
    'overview' => ['field_regulation_short_descr'],
    'publish_state' => ['field_regulation_ref_state_tax'],
    'official' => ['field_regluation_official_ver'],
    'organization' => ['field_regulation_link_org'],
    'authority' => ['field_regulation_reg_authority'],
    'links' => ['field_regulation_related'],
    'sections' => ['field_regulation_section'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  if (!empty($fields['date']) && Helper::isFieldPopulated($node, $fields['date'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Date@colon", ['@colon' => ':']),
      'text' => \Drupal::service('date.formatter')->format(strtotime($node->{$fields['date']}->value), 'custom', 'm/d/Y'),
    ];
  }

  if (!empty($fields['organization']) && Helper::isFieldPopulated($node, $fields['organization'])) {
    $org_options = [
      'label' => t('Organization'),
    ];
    $row = Helper::rowListingTable($node, ['sources' => $fields['organization']], $org_options);
    if (!empty($row)) {
      $listingTable['rows'][] = $row;
    }
  }

  if (!empty($fields['authority']) && Helper::isFieldPopulated($node, $fields['authority'])) {
    $authority_options = [
      'label' => t('Regulatory Authority'),
    ];
    $listingTable['rows'][] = Helper::rowListingTable($node, ['sources' => $fields['authority']], $authority_options);
  }

  if (!empty($fields['official']) && Helper::isFieldPopulated($node, $fields['official'])) {
    $official_options = [
      'label' => t('Official Version'),
    ];
    $listingTable['rows'][] = Helper::rowListingTable($node, ['sources' => $fields['official']], $official_options);
  }

  $optionalContents[] = [
    'path' => '@molecules/listing-table.twig',
    'data' => [
      'listingTable' => $listingTable,
    ],
  ];

  if (!empty($fields['overview']) && Helper::isFieldPopulated($node, $fields['overview'])) {
    $headerRichText = [
      'rteElements' => [
        Atoms::prepareTextField($node, $fields['overview']),
      ],
    ];

    $optionalContents[] = [
      'path' => '@organisms/by-author/rich-text.twig',
      'data' => [
        'richText' => $headerRichText,
      ],
    ];
  }

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => $category,
    'optionalContents' => $optionalContents,
  ];

  if (!empty($fields['publish_state']) && Helper::isFieldPopulated($node, $fields['publish_state'])) {
    $publish_state = [
      'publishState' => [
        'text' => Term::load($node->field_regulation_ref_state_tax->target_id)->getName(),
      ],
    ];

    $pageHeader_options = array_merge($pageHeader_options, $publish_state);
  }

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  foreach ($node->{$fields['sections']} as $index => $section) {
    $variables['numOfSections'] = ++$index;
    $sectionEntity = $section->entity;

    // Create the map of the field names to use.
    $map_ref = [
      'title' => ['field_regulation_section_title'],
      'body' => ['field_regulation_section_body'],
    ];

    // Determines which field names to use from the map.
    $field = Helper::getMappedFields($sectionEntity, $map_ref);

    if (!empty($field['title']) && Helper::isFieldPopulated($sectionEntity, $field['title'])) {
      $compHeading_options = [
        'title' => Helper::fieldValue($sectionEntity, $field['title']),
      ];
      $sections[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
      $sections[$index]['id'] = Helper::createIdTitle(Helper::fieldValue($sectionEntity, $field['title']));
    }

    if (!empty($field['body']) && Helper::isFieldPopulated($sectionEntity, $field['body'])) {
      // Set up rich text elements for what you need.
      $sections[$index]['richTextContent'] = [
        'rteElements' => [
          Atoms::prepareTextField($sectionEntity, $field['body']),
        ],
      ];
    }
  }

  // Build contact section, if field is populated.
  if (!empty($fields['contact']) && Helper::isFieldPopulated($node, $fields['contact'])) {
    // Set up options for contact list.
    $titleContext = t(' for @title', ['@title' => $page_title]);
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'titleContext' => $titleContext,
        'sub' => TRUE,
        'id' => 'contact',
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];
    // Prepare the sidebarContact data object, no need to pass cache_tags a second time.
    $titleContext = t(' for @title', ['@title' => $page_title]);
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $sideContent['contactList']['sidebarHeading']['titleContext'] = $titleContext;
    $sideContent['contactList']['viewSpecific'] = TRUE;

    $sections[] = [
      'title' => $contactList_options['heading']['title'],
      'id' => $contactList_options['heading']['id'],
    ];
  }

  // Build related links section, if field is populated.
  if (!empty($fields['links']) && Helper::isFieldPopulated($node, $fields['links'])) {
    $titleContext = t(' to @title', ['@title' => $page_title]);

    // Set up options for link list.
    $pressListing_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
    ];

    $sideContent['pressListing'] = Organisms::preparePressListing($node, $fields['links'], $pressListing_options, [], $cache_tags);
  }

  // Prepare any referenced events for sidebar.
  $sideContent['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], [], $cache_tags);

  if (!empty($sections)) {
    $variables['sections'] = $sections;
  }
  if (!empty($mainContent)) {
    $variables['mainContent'] = $mainContent;
  }
  if (!empty($sideContent)) {
    $variables['sideContent'] = $sideContent;
  }

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Advisory page.
 */
function mass_theme_preprocess_node_advisory(&$variables) {
  $node = $variables['node'];
  $category = '';
  $publish_state = NULL;
  $listingTable = [];
  $mainContent = [];
  $sideContent = [];
  $cache_tags = [];

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Create the map of all possible field names to use.
  $map = [
    'contact' => ['field_advisory_ref_contact'],
    'date' => ['field_date_published'],
    'issuer' => ['field_advisory_issuer'],
    'meta_tags' => ['field_advisory_metatags'],
    'overview' => ['field_advisory_overview'],
    'publish_state' => ['field_advisory_publish_state_tax'],
    'sources' => ['field_advisory_ref_sources'],
    'links' => ['field_advisory_links'],
    'sections' => ['field_advisory_section'],
    'category' => ['field_advisory_type_tax'],
    'footnotes' => ['field_advisory_footnotes'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  if (!empty($fields['date']) && Helper::isFieldPopulated($node, $fields['date'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Date@colon", ['@colon' => ':']),
      'text' => \Drupal::service('date.formatter')->format(strtotime($node->{$fields['date']}->value), 'custom', 'm/d/Y'),
    ];
  }

  if (!empty($fields['issuer']) && Helper::isFieldPopulated($node, $fields['issuer'])) {
    $map_issuer = [
      'display_name' => ['field_issuer_display_name'],
      'title' => ['field_issuer_title'],
    ];

    $issuers = Helper::issuerListingTable($node, ['issuer' => $fields['issuer']], $map_issuer);

    $listingTable['rows'][] = [
      'label' => t("Organization@colon", ['@colon' => ':']),
      'text' => nl2br(implode("\n", $issuers)),
    ];
  }

  if (!empty($fields['sources']) && Helper::isFieldPopulated($node, $fields['sources'])) {
    $listingTable['rows'][] = Helper::rowListingTable($node, ['sources' => $fields['sources']], ['label' => t('Referenced Sources')]);
  }

  $optionalContents[] = [
    'path' => '@molecules/listing-table.twig',
    'data' => [
      'listingTable' => $listingTable,
    ],
  ];

  if (!empty($fields['overview']) && Helper::isFieldPopulated($node, $fields['overview'])) {
    $headerRichText = [
      'rteElements' => [
        Atoms::prepareTextField($node, $fields['overview']),
      ],
    ];

    $optionalContents[] = [
      'path' => '@organisms/by-author/rich-text.twig',
      'data' => [
        'richText' => $headerRichText,
      ],
    ];
  }

  if (!empty($fields['category']) && Helper::isFieldPopulated($node, $fields['category'])) {
    $category = Term::load($node->field_advisory_type_tax->target_id)->getName();
  }

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => $category,
    'optionalContents' => $optionalContents,
  ];

  if (!empty($fields['publish_state']) && Helper::isFieldPopulated($node, $fields['publish_state'])) {
    $publish_state = [
      'publishState' => [
        'text' => Term::load($node->field_advisory_publish_state_tax->target_id)->getName(),
      ],
    ];

    $pageHeader_options = array_merge($pageHeader_options, $publish_state);
  }

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $sections = [];
  foreach ($node->{$fields['sections']} as $index => $section) {
    $variables['numOfSections'] = ++$index;
    $sectionEntity = $section->entity;

    // Create the map of the field names to use.
    $map_ref = [
      'title' => ['field_advisory_section_title'],
      'body' => ['field_advisory_section_body'],
    ];

    // Determines which field names to use from the map.
    $field = Helper::getMappedFields($sectionEntity, $map_ref);

    if (!empty($field['title']) && Helper::isFieldPopulated($sectionEntity, $field['title'])) {
      $compHeading_options = [
        'title' => Helper::fieldValue($sectionEntity, $field['title']),
      ];
      $sections[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
      $sections[$index]['id'] = Helper::createIdTitle(Helper::fieldValue($sectionEntity, $field['title']));
    }

    if (!empty($field['body']) && Helper::isFieldPopulated($sectionEntity, $field['body'])) {
      // Set up rich text elements for what you need.
      $sections[$index]['richTextContent'] = [
        'rteElements' => [
          Atoms::prepareTextField($sectionEntity, $field['body']),
        ],
      ];
    }
  }

  // Build contact section, if field is populated.
  if (!empty($fields['contact']) && Helper::isFieldPopulated($node, $fields['contact'])) {
    $titleContext = t(' for @title', ['@title' => $page_title]);

    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'titleContext' => $titleContext,
        'sub' => TRUE,
        'id' => 'contact',
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];
    // Prepare the sidebarContact data object no need to pass $cache_tags twice.
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $titleContext = t(' for @title', ['@title' => $page_title]);
    $sideContent['contactList']['sidebarHeading']['titleContext'] = $titleContext;
    $sideContent['contactList']['viewSpecific'] = TRUE;

    $sections[] = [
      'title' => $contactList_options['heading']['title'],
      'id' => $contactList_options['heading']['id'],
    ];
  }

  if (!empty($fields['footnotes']) && Helper::isFieldPopulated($node, $fields['footnotes'])) {
    $footnoteList['items'][]['richText'] = [
      'rteElements' => [
        Atoms::prepareTextField($node, $fields['footnotes']),
      ],
    ];

    $mainContent['footnoteList'] = $footnoteList;
  }

  if (!empty($fields['sources']) && Helper::isFieldPopulated($node, $fields['sources'])) {
    $taxonomyTerms = [];
    $source_links = Helper::dataFromLinkField($node, ['link' => $fields['sources']]);
    foreach ($source_links as $source_link) {
      $taxonomyTerms[] = [
        'href' => $source_link['url'],
        'text' => $source_link['title'],
      ];
    }
    $references = [
      'label' => t("Referenced Sources@colon", ['@colon' => ':']),
      'taxonomyTerms' => $taxonomyTerms,
    ];

    $mainContent['references'] = $references;
  }

  // Build related links section, if field is populated.
  if (!empty($fields['links']) && Helper::isFieldPopulated($node, $fields['links'])) {
    $titleContext = t(' to @title', ['@title' => $page_title]);
    // Set up options for link list.
    $pressListing_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
    ];

    $sideContent['pressListing'] = Organisms::preparePressListing($node, $fields['links'], $pressListing_options, [], $cache_tags);
  }

  // Prepare any referenced events for sidebar.
  $sideContent['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], [], $cache_tags);

  $variables['sections'] = $sections;
  $variables['mainContent'] = $mainContent;
  $variables['sideContent'] = $sideContent;

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the rules of court page.
 */
function mass_theme_preprocess_node_rules(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  $category = '';
  $subCategory = '';
  $publish_state = NULL;
  $listingTable = [];
  $headerTagsTerms = [];
  $mainContent = [];
  $sideContent = [];
  $sections = [];
  $cache_tags = [];

  // Create the map of all possible field names to use.
  $map = [
    'contact' => ['field_rules_ref_contact'],
    'adopted_date' => ['field_rules_adopted_date'],
    'effective_date' => ['field_date_published'],
    'publish_state' => ['field_rules_status'],
    'courts' => ['field_rules_courts'],
    'collections' => ['field_rules_related_collections'],
    'meta_tags' => ['field_rules_metatags'],
    'overview' => ['field_rules_overview'],
    'sources' => ['field_rules_referenced_sources'],
    'sections' => ['field_rules_section'],
    'category' => ['field_rules_type'],
    'footnotes' => ['field_rules_footnotes'],
    'links' => ['field_rules_related'],
    'updates' => ['field_rules_updates'],
    'subheading' => ['field_rules_subheading'],
    'related_to' => ['computed_related_to'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  // Add any related content as determined by relationship indicators into the
  // list of "Related to" links on the Rules of Court content type. Manually
  // set links will be listed first followed by any links added through the
  // Related To computed field.
  if (!empty($fields['related_to']) && Helper::isFieldPopulated($node, $fields['related_to'])) {
    if (!empty($fields['collections']) && Helper::isFieldPopulated($node, $fields['collections'])) {
      if (isset($variables['content'][$fields['related_to']])) {
        $related_to_links = array_filter($variables['content'][$fields['related_to']], "is_numeric", ARRAY_FILTER_USE_KEY);
        $variables['content'][$fields['collections']] = array_merge($variables['content'][$fields['collections']], $related_to_links);
      }
    }
    else {
      $variables['content'][$fields['collections']] = $variables['content'][$fields['related_to']];
    }
  }

  if (!empty($fields['adopted_date']) && Helper::isFieldPopulated($node, $fields['adopted_date'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Adopted Date@colon", ['@colon' => ':']),
      'text' => \Drupal::service('date.formatter')->format(strtotime(Helper::fieldValue($node, $fields['adopted_date'])), 'custom', 'm/d/Y'),
    ];
  }

  if (!empty($fields['effective_date']) && Helper::isFieldPopulated($node, $fields['effective_date'])) {
    // Set up rich text elements for what you need.
    $listingTable['rows'][] = [
      'label' => t("Effective Date@colon", ['@colon' => ':']),
      'text' => \Drupal::service('date.formatter')->format(strtotime(Helper::fieldValue($node, $fields['effective_date'])), 'custom', 'm/d/Y'),
    ];
  }

  if (!empty($fields['sources']) && Helper::isFieldPopulated($node, $fields['sources'])) {
    $listingTable['rows'][] = Helper::rowListingTable($node, ['sources' => $fields['sources']], ['label' => t('Referenced Sources')]);

    $taxonomyTerms = [];
    $source_links = Helper::dataFromLinkField($node, ['link' => $fields['sources']]);
    foreach ($source_links as $source_link) {
      $taxonomyTerms[] = [
        'href' => $source_link['url'],
        'text' => $source_link['title'],
      ];
    }
    $references = [
      'label' => t("Referenced Sources@colon", ['@colon' => ':']),
      'taxonomyTerms' => $taxonomyTerms,
    ];

    $mainContent['references'] = $references;
  }

  if (!empty($fields['updates']) && Helper::isFieldPopulated($node, $fields['updates'])) {
    $rows = [];
    $update_items = [];

    $update_paragraphs = $node->{$fields['updates']}->referencedEntities();

    // Create rows.
    foreach ($update_paragraphs as $update) {
      if (Helper::isFieldPopulated($update, 'field_rules_update_note')) {
        $text = Helper::fieldFullView($update, 'field_rules_update_note');

        if (Helper::isFieldPopulated($update, 'field_rules_update_url')) {
          $links = Helper::dataFromLinkField($update, ['link' => 'field_rules_update_url']);
          if (!empty($links)) {
            $text = Link::fromTextAndUrl($text, $links[0]['url'])->toString();
          }
        }

        $update_items[] = [
          'text' => $text,
        ];
      }
    }

    $updateRow = [
      'label' => t("Updates@colon", ['@colon' => ':']),
      'visibleItems' => 2,
      'moreLabel' => t('Show more updates'),
      'lessLabel' => t('Show fewer updates'),
      'items' => $update_items,
    ];

    $listingTable['rows'][] = $updateRow;
    $mainContent['updates']['rows'][] = $updateRow;
  }

  $optionalContents[] = [
    'path' => '@molecules/listing-table.twig',
    'data' => [
      'listingTable' => $listingTable,
    ],
  ];

  if (!empty($fields['overview']) && Helper::isFieldPopulated($node, $fields['overview'])) {
    $headerRichText = [
      'rteElements' => [
        Atoms::prepareTextField($node, $fields['overview']),
      ],
    ];

    $optionalContents[] = [
      'path' => '@organisms/by-author/rich-text.twig',
      'data' => [
        'richText' => $headerRichText,
      ],
    ];
  }

  if (!empty($fields['subheading']) && Helper::isFieldPopulated($node, $fields['subheading'])) {
    $subCategory = [
      'title' => Helper::fieldFullView($node, $fields['subheading']),
      'level' => 3,
      'tag' => 'div'
    ];
  }

  if (!empty($fields['category']) && Helper::isFieldPopulated($node, $fields['category'])) {
    $category = Term::load($node->{$fields['category']}->target_id)->getName();
  }

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => $category,
    'subCategory' => $subCategory,
    'optionalContents' => $optionalContents,
  ];

  if (Helper::isFieldPopulated($node, $fields['publish_state'])) {
    $publish_state = [
      'publishState' => [
        'text' => Term::load($node->field_rules_status->target_id)->getName(),
      ],
    ];

    $pageHeader_options = array_merge($pageHeader_options, $publish_state);
  }

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  if (!empty($fields['sections']) && Helper::isFieldPopulated($node, $fields['sections'])) {
    foreach ($node->{$fields['sections']} as $index => $section) {
      $variables['numOfSections'] = ++$index;
      $sectionEntity = $section->entity;

      // Create the map of the field names to use.
      $map_ref = [
        'title' => ['field_rules_section_title'],
        'body' => ['field_rules_section_body'],
      ];

      // Determines which field names to use from the map.
      $field = Helper::getMappedFields($sectionEntity, $map_ref);

      if (Helper::isFieldPopulated($sectionEntity, $field['title'])) {
        $title = Helper::fieldValue($sectionEntity, $field['title']);
        $id = Helper::createIdTitle(Helper::fieldValue($sectionEntity, $field['title']));

        $sections[$index]['compHeading'] = [
          'title' => $title,
          'sub' => FALSE,
          'id' => $id,
        ];
      }

      if (Helper::isFieldPopulated($sectionEntity, $field['body'])) {
        // Set up rich text elements for what you need.
        $sections[$index]['headerIndent'] = TRUE;
        $sections[$index]['anchorLinks'] = TRUE;
        $sections[$index]['rteElements'] = [
          Atoms::prepareTextField($sectionEntity, $field['body']),
        ];
      }
    }
  }

  // Build contact section, if field is populated.
  if (Helper::isFieldPopulated($node, $fields['contact'])) {
    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'id' => 'contact',
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
        'onlyPhoneAndOnline' => TRUE,
      ],
    ];
    // Prepare the sidebarContact data object.
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $sideContent['contactList']['viewSpecific'] = TRUE;
  }

  $mainContent['contents'] = $sections;

  if (!empty($fields['footnotes']) && Helper::isFieldPopulated($node, $fields['footnotes'])) {
    $footnoteList['items'][]['richText'] = [
      'rteElements' => [
        Atoms::prepareTextField($node, $fields['footnotes']),
      ],
    ];

    $mainContent['footnoteList'] = $footnoteList;
  }

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, $fields['links'])) {
    // Set up options for link list.
    $titleContext = t(' to @title', ['@title' => $node->getTitle()]);
    $pressListing_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
    ];

    $sideContent['pressListing'] = Organisms::preparePressListing($node, $fields['links'], $pressListing_options, [], $cache_tags);
  }

  // Prepare any referenced events for sidebar.
  $sideContent['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], [], $cache_tags);

  $variables['mainContent'] = $mainContent;
  $variables['sideContent'] = $sideContent;

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Event page.
 */
function mass_theme_preprocess_node_event(&$variables) {
  /** @var \Drupal\mass_content\Entity\Bundle\node\EventBundle $node */
  $node = $variables['node'];
  $cache_tags = [];

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Create the map of all possible field names to use.
  $map = [
    'date' => ['field_event_date'],
    'time' => ['field_event_time'],
    'participating_orgs' => ['field_event_participating_orgs'],
    'logo' => ['field_event_logo'],
    'minutes_download' => ['field_event_minutes_download'],
    'contact' => ['field_event_contact_general'],
    'type' => ['field_event_type_list'],
    'posted_date' => ['field_event_posted_date'],
    'updated_date' => ['field_updated_date'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  $optionalContents = [];

  // Build date and time optional contents.
  if (Helper::isFieldPopulated($node, 'field_event_date')
    || Helper::isFieldPopulated($node, 'field_event_time')) {
    // Create the map of all possible field names to use.
    $headerDate_options = [
      'headerDate' => TRUE,
    ];

    $optionalContents[] = [
      'path' => '@molecules/event-teaser.twig',
      'data' => [
        'eventTeaser' => Molecules::prepareEventTeaser($node, $fields, $headerDate_options),
      ],
    ];
  }

  if (Helper::isFieldPopulated($node, $fields['posted_date']) && $node->isPublicMeeting()) {
    $postedDate = Helper::getMayflowerDate($node->{$fields['posted_date']}->value, ['date_format' => 'F j, Y']);
    // Use the value of field_updated_date as the changedDate value.
    if (Helper::isFieldPopulated($node, $fields['updated_date'])) {
      $changedDate = Helper::getMayflowerDate($node->{$fields['updated_date']}->value, ['date_format' => 'F j, Y']);
    }
    else {
      // Otherwise, display nothing.
      $changedDate = [];
    }

    array_shift($postedDate);
    array_shift($changedDate);

    $items[] = [
      'label' => 'Posted:',
      'text' => implode(' ', $postedDate),
    ];
    if ($changedDate) {
      $items[] = [
        'label' => 'Last Updated:',
        'text' => implode(' ', $changedDate),
      ];
    }

    $optionalContents[] = [
      'path' => '@molecules/labelled-list.twig',
      'data' => [
        'labelledList' => [
          'items' => $items,
        ],
      ],
    ];
  }

  // Get the address type.
  $address_type = '';
  if (!$node->getAddressType()->isEmpty()) {
    $address_type = $node->getAddressType()->getValue();
    $address_type = reset($address_type);
    $address_type = $address_type['value'];
  }
  // Build contact us optional contents from appropriate field.
  if (Helper::isFieldPopulated($node, 'field_event_ref_contact') && (empty($address_type) || ($address_type == 'contact info'))) {
    // Prepare the option array header contact.
    $headerContact_options = [
      'onlyAddress' => TRUE,
    ];
    $optionalContents = array_merge($optionalContents, Helper::buildPageHeaderOptionalContentsContactUs($node, 'field_event_ref_contact', $headerContact_options, $cache_tags));
  }
  if (Helper::isFieldPopulated($node, 'field_event_ref_unique_address') && ($address_type == 'unique')) {
    $optionalContents = array_merge($optionalContents, Helper::buildPageHeaderOptionalContentsContactUsAddress($node, 'field_event_ref_unique_address'));
  }

  // Build call out time.
  if (Helper::isFieldPopulated($node, 'field_event_public_testimony')
    && $node->isPublicMeeting()) {
    $optionalContents[] = [
      'path' => '@organisms/by-author/callout-time.twig',
      'data' => [
        'calloutTime' => Molecules::prepareCalloutTime($node, 'field_event_public_testimony', ['icon' => 'alert']),
      ],
    ];
  }

  // Build key action optional contents.
  if (Helper::isFieldPopulated($node, 'field_event_link_sign_up')) {
    $optionalContents[] = [
      'path' => '@organisms/by-author/key-actions.twig',
      'data' => [
        'keyActions' => Molecules::prepareKeyActions($node, 'field_event_link_sign_up'),
      ],
    ];
  }

  // Prepare widgets that can be passed to the pageHeader.
  $widgets = [];

  // Prepare the option array for image widget.
  $logo_options = [
    'style' => 'organization_logo',
    'height' => '',
    'width' => 230,
  ];

  // Prepares logo to use the mayflower image component.
  if ($image = Atoms::prepareImage($node, $logo_options, $fields['logo'])) {
    $widgets[] = [
      'path' => '@atoms/09-media/image.twig',
      'data' => [
        'image' => $image,
      ],
    ];
  }

  // Build title for pageHeader.
  $category_title = '';
  if ($node->isPublicMeeting()) {
    $category_title = t('Public Meeting Notice');
  }
  elseif ($node->isPublicHearing()) {
    $category_title = t('Public Hearing Notice');
  }

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => $category_title,
    'divider' => TRUE,
    'optionalContents' => $optionalContents,
    'widgets' => $widgets,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $items = [];

  if (Helper::isFieldPopulated($node, 'field_event_rain_date')) {
    $items[] = [
      'label' => t('Rain date:'),
      'text' => Helper::fieldValue($node, 'field_event_rain_date'),
    ];
  }

  if (Helper::isFieldPopulated($node, 'field_event_fees')) {
    $items[] = [
      'label' => t('Fees:'),
      'text' => str_replace('.00', '', Helper::fieldValue($node, 'field_event_fees')),
    ];
  }

  if (Helper::isFieldPopulated($node, 'field_event_capacity')) {
    $items[] = [
      'label' => t('Capacity:'),
      'text' => Helper::fieldValue($node, 'field_event_capacity'),
    ];
  }

  // Set $titleContext for Overview.
  $titleContext = t(' of @title', ['@title' => $page_title]);
  $pageOverview_options = [
    'heading' => [
      'title' => t('Overview'),
      'titleContext' => $titleContext,
    ],
  ];

  $pageOverview = Atoms::prepareCompHeading($pageOverview_options['heading']);
  $pageOverview['labelledList'] = ['items' => $items];

  if (Helper::isFieldPopulated($node, 'field_event_description')) {
    // Set up rich text elements for what you need.
    $pageOverview['richText'] = [
      'rteElements' => [
        Atoms::prepareTextField($node, 'field_event_description'),
      ],
    ];
  }

  $mainContent['pageOverview'] = $pageOverview;

  // Set $titleContext for you will need.
  $titleContext = t(' for @title', ['@title' => $page_title]);
  if (Helper::isFieldPopulated($node, 'field_event_you_will_need')) {
    $youWillNeed_options = [
      'heading' => [
        'title' => t('You will need'),
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ],
    ];
    $youWillNeed = Atoms::prepareCompHeading($youWillNeed_options['heading']);
    // Set up rich text elements for what you need.
    $youWillNeed['rteElements'] = [
      Atoms::prepareTextField($node, 'field_event_you_will_need'),
    ];

    $mainContent['youWillNeed'] = $youWillNeed;
  }

  // Build Offered By links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_event_participating_orgs')) {
    // Set up options for link list.
    $linkList_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Participating Organizations'),
      ],
      'stacked' => TRUE,
    ];

    $sideContent['participatingOrgs'] = Organisms::preparelinkList($node, 'field_event_participating_orgs', $linkList_options);
  }

  // Build contact section, if field is populated.
  if (!empty($fields['contact']) && Helper::isFieldPopulated($node, $fields['contact'])) {
    // Set up options for contact list.
    $titleContext = t(' for @title', ['@title' => $page_title]);
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'titleContext' => $titleContext,
        'sub' => TRUE,
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
      ],
    ];
    // Prepare the sidebarContact data object, no need to get cache tags twice.
    $titleContext = t(' for @title', ['@title' => $page_title]);
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $sideContent['contactList']['sidebarHeading']['titleContext'] = $titleContext;
    $sideContent['contactList']['viewSpecific'] = TRUE;
  }

  // Gather events associated with this node.
  $eventManager = \Drupal::service('mass_content.event_manager');

  // Determine if there are any past events associated with this node.
  $is_past_events = $eventManager->hasPast($node);

  $eventsData = [];
  if ($eventManager->hasUpcoming($node)) {
    $events = Helper::prepareEvents($eventManager->getUpcoming($node, 3));
    $moreButton = '';

    // Display the see all events link if there are either 2+ upcoming or <=2
    // upcoming with 1+ past events.
    if (count($events) > 2 || $is_past_events) {
      $moreButton = Helper::prepareMoreLink($node, ['text' => t('See all related events')]);
    }

    $eventsData = [
      'grid' => TRUE,
      'compHeading' => [
        'title' => t('Upcoming Events'),
        'titleContext' => $titleContext,
      ],
      'events' => array_splice($events, 0, 2),
      'more' => $moreButton,
    ];
    $max_age = $eventManager->getMaxAge($node);
  }
  // If there are not upcoming events, check for past events to render past events link.
  else {
    if ($is_past_events) {

      $eventsData = [
        'grid' => FALSE,
        'compHeading' => [
          'title' => t('Upcoming Events'),
          'titleContext' => $titleContext,
        ],
        'emptyText' => t('No upcoming events scheduled'),
        'pastMore' => [
          'text' => t('See past related events'),
          'href' => \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id()) . '/events/past',
          'chevron' => TRUE,
          'labelContext' => t('for the @label', ['@label' => $node->label()]),
        ],
      ];
    }
  }

  $variables['events'] = $eventsData;

  // Build minutes total count to determine if "full minutes" link is displayed.
  if (Helper::isFieldPopulated($node, 'field_event_meeting_minutes') || Helper::isFieldPopulated($node, 'field_event_minutes_download')) {
    $variables['minutes_display_items_count'] = $node->get('field_event_meeting_minutes')->count() + $node->get('field_event_minutes_download')->count();
  }
  // Build agenda total count to determine if "full agenda" link is displayed.
  if (Helper::isFieldPopulated($node, 'field_event_meeting_agenda_sect') || Helper::isFieldPopulated($node, 'field_event_agenda_download')) {
    $variables['agenda_display_items_count'] = $node->get('field_event_meeting_agenda_sect')->count() + $node->get('field_event_agenda_download')->count();
  }

  // Display 1 section or download for agenda and minutes.
  $variables['event_sections_max_display_count'] = 1;

  $variables['mainContent'] = $mainContent;
  // Set optional components.
  $variables['sideContent'] = (!empty($sideContent)) ? $sideContent : '';
  $variables['bottomContent'] = (!empty($bottomContent)) ? $bottomContent : '';

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
  if (isset($max_age)) {
    $variables['#cache']['max-age'] = $max_age;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Services page.
 */
function mass_theme_preprocess_node_service_page(&$variables) {
  $node = $variables['node'];
  $cache_tags = [];

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Prepare components that can be passed to  introPageContent.
  $intro_page_content = [];

  // Prepare the video atom, if the field is populated.
  $video_entity = $node->field_service_video->entity;
  if (!empty($video_entity)
    && $video_entity->getEntityTypeId() == 'media'
    && $video_entity->bundle() == 'media_video') {
    // Set static options for video.
    $video_options = [
      "width" => "853",
      "height" => "480",
    ];

    $cache_tags = array_merge($cache_tags, $node->field_service_video->entity->getCacheTags());

    // Append video data structure to the introPageContent data structure.
    $intro_page_content['video'] = Atoms::prepareVideo($node->field_service_video->entity, $video_options);
  }

  // Prepare field_service_bg_wide, if it's populated.
  if (Helper::isFieldPopulated($node, 'field_service_bg_wide')) {
    $variables['bannerImageWide'] = Helper::getFieldImageUrl($node, 'hero1600x400_fp', 'field_service_bg_wide');
  }

  // Prepare the First Time? key actions component, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_service_ref_guide_page_1') || Helper::isFieldPopulated($node, 'field_service_eligibility_info')) {

    // Set up static options for key actions component.
    // @TODO see if we can use this field label instead of hard coding text.
    $keyActions_options = [
      'heading' => [
        'title' => t('First time? Start here.'),
        'sub' => 3,
      ],
    ];

    // Append the keyActions data structure to introPageContent.
    $intro_page_content['keyActions'] = Organisms::prepareKeyActions($node, 'field_service_ref_guide_page_1', $keyActions_options, $cache_tags);
    $eligibilityInfo = Organisms::prepareKeyActions($node, 'field_service_eligibility_info', $keyActions_options, $cache_tags);

    foreach ($eligibilityInfo['links'] as $index => $eligibilityLink) {
      $eligibilityLink['text'] = t('Check eligibility');
      $intro_page_content['keyActions']['links'][] = $eligibilityLink;
    }
  }

  // Make the introPageContent data structure available in twig template.
  $variables['introPageContent'] = $intro_page_content;

  // Prepare the split columns data structure (send only if there is content).
  $split_columns = [];

  // Prepare Related Services link list data structure.
  if (Helper::isFieldPopulated($node, 'field_service_ref_services_6')) {
    $titleContext = t(' to @title', ['@title' => $page_title]);
    // Set up link list static options.
    $linkList_options = [
      'heading' => [
        'title' => t('Related Services'),
        'titleContext' => $titleContext,
        'type' => 'sidebarHeading',
        'level' => 2,
      ],
      'stacked' => TRUE,
    ];

    // Populate the first column.
    $split_columns['columns'][]['items'][] = [
      'path' => '@organisms/by-author/link-list.twig',
      'data' => [
        'linkList' => Organisms::prepareLinkList($node, 'field_service_ref_services_6', $linkList_options),
      ],
    ];
  }

  // Make the mappedLocations data structure available in twig template.
  $variables['splitColumns'] = $split_columns;

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
  if (isset($max_age)) {
    $variables['#cache']['max-age'] = $max_age;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the News page.
 */
function mass_theme_preprocess_node_news_full(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  $sidebar = [];
  $cache_tags = [];
  $titleContext = NULL;

  if (!$node->field_author->isEmpty()) {
    /** @var \Drupal\node\Entity\Node */
    $author = $node->field_author->entity;
    $first_name = $author->field_person_first_name->value ?? NULL;
    $last_name = $author->field_person_last_name->value ?? NULL;
    $separator = $first_name && $last_name ? ' ' : '';
    $full_name = $first_name . $separator . $last_name;
    $author_title = $author->field_person_role_title->value ?? NULL;

    $orgs = [];
    foreach ($author->field_organizations as $org) {
      $orgs[] = $org->entity->label();
      $cache_tags = array_merge($cache_tags, $org->entity->getCacheTags());
    }
    $author_all_orgs = implode(', ', $orgs);

    $variables['author'] = $full_name;
    $variables['author_url'] = $author->toUrl();
    $variables['author_info'] =
      $author_title .
      ($author_title ? ', ' : '') .
      $author_all_orgs;

    $cache_tags = array_merge($cache_tags, $author->getCacheTags());
  }

  $is_blog_post = FALSE;
  $is_news = FALSE;
  switch ($node->field_news_type->value) {
    case 'blog_post':
    case 'guest_post':
      $is_blog_post = TRUE;
      break;

    case 'news':
      $is_news = TRUE;
      break;
  }
  $variables['is_blog_post'] = $is_blog_post;
  $variables['is_news'] = $is_news;

  $variables['blogpostCollectionHeader'] = [];

  if ($is_blog_post && isset($node->field_collections) && !$node->field_collections->isEmpty()) {
    /** @var \Drupal\taxonomy\Entity\Term $collection */
    $collection = $node->field_collections[0]->get('entity')->getTarget()->getEntity();
    $variables['blogpostCollectionHeader']['decorativeLink']['text'] = $collection->label();
    $variables['blogpostCollectionHeader']['decorativeLink']['href'] = '/collections/' . $collection->field_url_name->value;
    $cache_tags = array_merge($cache_tags, $collection->getCacheTags(), $node->getCacheTags());
    $variables['blogpostCollectionHeader']['bg_color'] = $collection->field_header_color->value ?? '#FFF';
    $variables['blogpostCollectionHeader']['dark_font'] = $variables['blogpostCollectionHeader']['bg_color'] === '#FFF';
    _mass_theme_populate_collection_image_from_collection($collection, $variables['blogpostCollectionHeader']);
  }

  $ap_conformity = FALSE;

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Create the map of all possible field names to use.
  $map = [
    'body' => ['field_news_body'],
    'location' => ['field_news_location'],
    'video' => ['field_news_video'],
    'signees' => ['field_news_signees'],
    'contact' => ['field_news_media_contac'],
    'links' => ['field_news_links'],
    'sections' => ['field_news_sections'],
    'news_type' => ['field_news_type'],
    'featured_image' => ['field_news_image'],
  ];

  // Determines which field names to use from the map.
  $field = Helper::getMappedFields($node, $map);

  if (!empty($node->{$field['signees']}->entity)) {
    $org_fields = [
      'link' => ['field_state_org_ref_org'],
      'title' => ['field_external_org_name'],
      'lede' => ['field_state_org_description', 'field_external_org_description'],
      'image' => ['field_state_org_photo_url', 'field_external_org_photo'],
    ];

    $signee_ref = Helper::getReferencedEntitiesFromField($node, $field['signees']);

    foreach ($signee_ref as $signee_entity) {
      $promo_options = [];
      /** @var \Drupal\paragraphs\Entity\Paragraph $signee_entity */
      $org_data = Helper::getMappedFields($signee_entity, $org_fields);
      if ($signee_entity != NULL) {
        if ($signee_entity->getParagraphType()->id() == 'state_organization') {
          /** @var \Drupal\node\Entity\Node $org_page */
          $org_refs = Helper::getReferencedEntitiesFromField($signee_entity, $org_data['link']);
          if ($org_page = reset($org_refs)) {
            $promo_options = [
              'ariaHidden' => TRUE,
              'title' => Helper::fieldValue($org_page, 'title'),
              'alt' => Helper::fieldValue($org_page, 'title'),
            ];
          }
        }
        else {
          $promo_options = [
            'title' => Helper::fieldValue($signee_entity, $org_data['title']),
            'alt' => Helper::fieldValue($signee_entity, $org_data['title']),
          ];
        }
      }
      $pageContent['personalMessage']['imagePromos'][] = Molecules::prepareImagePromo($signee_entity, $org_data, $promo_options);
    }
  }

  // Get select News Type Label.
  $allowed_news_types = $node->getFieldDefinition('field_news_type')->getFieldStorageDefinition()->getSetting('allowed_values');
  $type_value = $node->field_news_type->value;

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => array_key_exists($type_value, $allowed_news_types) ? $allowed_news_types[$type_value] : NULL,
    'divider' => FALSE,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $pageContent['pressStatus'] = Molecules::preparePressStatus($node);

  if (!empty($field['featured_image']) && Helper::isFieldPopulated($node, $field['featured_image'])) {
    if (!empty($node->{$field['featured_image']}->entity)) {
      // Set up image element.
      $pageContent['figure']['image'] = [
        'alt' => $node->{$field['featured_image']}->alt,
        'src' => Helper::getFieldImageUrl($node, '', $field['featured_image']),
      ];
    }
  }

  if (isset($field['video']) && Helper::isFieldPopulated($node, $field['video']) && !empty($node->{$field['video']}->entity)) {
    // Set up video element.
    $pageContent['video'] = Helper::getVideoAtomData($node->{$field['video']}->entity, [], $cache_tags);
  }

  if (Helper::isFieldPopulated($node, $field['body'])) {
    $body = Helper::fieldFullView($node, $field['body']);
    $body_string = \Drupal::service('renderer')->renderRoot($body);
    // Remove attributes on <p> markup.
    $body_string = preg_replace("/<\s*p.*?>/", '<p>', $body_string);
    if (Helper::isFieldPopulated($node, $field['location'])) {
      $location = Helper::fieldFullView($node, $field['location']);
      $location_string = \Drupal::service('renderer')->renderRoot($location);
      $location = '<span class="ma__rich-text__flame">' . $location_string . '</span> &mdash; ';
      $body_array = explode('<p>', $body_string);
      if (count($body_array) > 1) {
        $body_array[1] = $location . $body_array[1];
      }
      $body_string = implode('<p>', $body_array);
    }
    if (Helper::fieldValue($node, $field['news_type']) == 'press_release') {
      $ap_conformity = TRUE;
    }

    // Set up rich text element.
    $pageContent['richText'] = [
      'rteElements' => [
        [
          'path' => '@atoms/11-text/raw-html.twig',
          'data' => [
            'rawHtml' => [
              'content' => $body_string,
            ],
          ],
        ],
      ],
    ];

    if ($ap_conformity) {
      // AP style conformity.
      $pageContent['richText']['rteElements'][] = [
        'path' => '@atoms/11-text/paragraph.twig',
        'data' => [
          'paragraph' => [
            'text' => '###',
          ],
        ],
      ];
    }
  }

  // Only display Sections for News and Press Statement.
  $newsType = Helper::fieldValue($node, $field['news_type']);
  if ($newsType == 'news' || $newsType == 'press_statement') {
    foreach ($node->{$field['sections']} as $index => $section) {
      $variables['numOfSections'] = ++$index;
      $sectionEntity = $section->entity;

      // Create the map of the field names to use.
      $section_with_heading_fields_ref = [
        'title' => ['field_section_title'],
        'body' => ['field_section_body'],
        'links' => ['field_section_links'],
        'actions' => ['field_section_key_actions'],
        'downloads' => ['field_section_downloads'],
      ];

      // Determines which field names to use from the map.
      $section_fields = Helper::getMappedFields($sectionEntity, $section_with_heading_fields_ref);

      if (!empty($section_fields['title']) && Helper::isFieldPopulated($sectionEntity, $section_fields['title'])) {
        $compHeading_options = [
          'title' => Helper::fieldValue($sectionEntity, $section_fields['title']),
        ];
        $pageContent[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
      }

      if (!empty($section_fields['body']) && Helper::isFieldPopulated($sectionEntity, $section_fields['body'])) {
        // Set up rich text elements for what you need.
        $pageContent[$index]['richText'] = [
          'rteElements' => [
            Atoms::prepareTextField($sectionEntity, $section_fields['body']),
          ],
        ];
      }

      if (!empty($section_fields['actions']) && Helper::isFieldPopulated($sectionEntity, $section_fields['actions'])) {
        $titleContext = t(' for  @title', ['@title' => $page_title]);
        $keyActions_options = [
          'heading' => [
            'title' => t('Key Actions'),
            'titleContext' => $titleContext,
          ],
        ];

        // Append the keyActions data structure to introPageContent.
        $pageContent[$index]['keyActions'] = Organisms::prepareKeyActions($sectionEntity, $section_fields['actions'], $keyActions_options);
      }

      if ((!empty($section_fields['downloads']) && Helper::isFieldPopulated($sectionEntity, $section_fields['downloads'])) || (!empty($section_fields['links']) && Helper::isFieldPopulated($sectionEntity, $section_fields['links']))) {
        $titleContext = t(' for @title', ['@title' => $page_title]);
        // Set up options for formDownloads prepare.
        $downloadLinks_options = [
          'heading' => [
            'type' => 'compHeading',
            'title' => t('Additional Resources'),
            'titleContext' => $titleContext,
            'sub' => TRUE,
          ],
        ];
        $pageContent[$index]['formDownloads'] = Organisms::prepareFormDownloads($sectionEntity, $downloadLinks_options, $cache_tags);
      }
    }
  }

  // Build contact section, if field is populated.
  if (!empty($field['contact']) && Helper::isFieldPopulated($node, $field['contact'])) {
    $titleContext = t(' for @title', ['@title' => $page_title]);

    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'title' => t("Media Contact"),
        'titleContext' => $titleContext,
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];

    $pageContent['contactList'] = Organisms::prepareContactList($node, $contactList_options, $cache_tags);

    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebar['contactList'] = Helper::getPrimaryContactPhoneOnlineContactList($pageContent['contactList']);
    unset($sidebar['contactList']['compHeading']);
    $sidebar['contactList']['sidebarHeading']['title'] = t('Media Contact');
    $sidebar['contactList']['sidebarHeading']['titleContext'] = $titleContext;
    $sidebar['contactList']['viewSpecific'] = TRUE;
  }

  // Build related links section, if field is populated.
  if (!empty($field['links']) && Helper::isFieldPopulated($node, $field['links'])) {
    $titleContext = t(' to @title', ['@title' => $page_title]);

    // Set up options for link list.
    $pressListing_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
      'category' => array_key_exists($type_value, $allowed_news_types) ? $allowed_news_types[$type_value] : NULL,
    ];

    $sidebar['pressListing'] = Organisms::preparePressListing($node, $field['links'], $pressListing_options, [], $cache_tags);
  }

  // Prepare any referenced events for sidebar.
  $sidebar['eventListing'] = Organisms::prepareSidebarEvents($node, ['more_link_text' => t('See all events')], [], $cache_tags);

  $variables['pageContent'] = $pageContent;
  $variables['sidebar'] = $sidebar;

  // Merge arrays of existing and new cache tags and removes duplicates.
  $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags ?? []);
  // Add the cache tags to the render array.
  $variables['#cache']['tags'] = $merged_tags;
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for teaser view mode of the news content type.
 */
function mass_theme_preprocess_node_news_teaser(&$variables) {
  $node = $variables['node'];
  $variables['pressTeaser'] = Molecules::preparePressTeaser($node, ['displayImages' => FALSE]);
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Guide page.
 */
function mass_theme_preprocess_node_guide_page(&$variables) {
  $node = $variables['node'];
  $cache_tags = [];

  // Prepare the suggestedPages data object.
  $suggested_options = [
    'title' => t('Related Guides'),
    'style' => 'thumbnail_130x160',
    'view' => 'guide',
  ];
  $variables['suggestedPages'] = Organisms::prepareSuggestedPages($node, $suggested_options, $cache_tags);
  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Location Details page.
 */
function mass_theme_preprocess_node_location_details(&$variables) {
  $node = $variables['node'];
  $cache_tags = [];
  $taxonomy_terms = [];

  // Get the page title for title context.
  $page_title = $node->getTitle();

  // Create the map of all possible field names to use.
  $map = [
    'sections' => ['field_location_details_sections'],
    'links' => ['field_location_details_links_5'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  $pageHeader_options = [
    "divider" => FALSE,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $pageContent = [];

  foreach ($node->{$fields['sections']} as $index => $section) {
    $variables['numOfSections'] = ++$index;
    $sectionEntity = $section->entity;

    // Create the map of the field names to use.
    $map_ref = [
      'title' => ['field_section_title'],
      'body' => ['field_section_body'],
      'downloads' => ['field_section_downloads'],
      'links' => ['field_section_links'],
      'video' => ['field_video'],
      'video_id' => ['field_video_id'],
      'video_source' => ['field_video_source'],
      'iframe_url' => ['field_url'],
      'iframe_title' => ['field_iframe_accessibility_title'],
      'iframe_height' => ['field_height'],
      'address' => ['field_address_text'],
      'map' => ['field_lat_long'],
    ];

    // Determines which field names to use from the map.
    $field = Helper::getMappedFields($sectionEntity, $map_ref);

    if (isset($field['video'])
      && Helper::isFieldPopulated($sectionEntity, $field['video'])
      && $sectionEntity->getEntityTypeId() == 'paragraph'
      && $sectionEntity->getType() == 'video') {
      $pageContent[$index]['video'] = Helper::getVideoAtomData($sectionEntity, [], $cache_tags);
    }

    if (isset($field['iframe_url']) && Helper::isFieldPopulated($sectionEntity, $field['iframe_url'])) {
      $pageContent[$index]['iframe'] = [
        'src' => $sectionEntity->{$field['iframe_url']}->uri,
        'height' => Helper::fieldValue($sectionEntity, $field['iframe_height']),
        'title' => Helper::fieldValue($sectionEntity, $field['iframe_title']),
      ];
    }

    if (isset($field['title']) && Helper::isFieldPopulated($sectionEntity, $field['title'])) {
      $compHeading_options = [
        'title' => Helper::fieldValue($sectionEntity, $field['title']),
      ];
      $pageContent[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
    }

    if (isset($field['body']) && Helper::isFieldPopulated($sectionEntity, $field['body'])) {
      // Set up rich text elements for what you need.
      $pageContent[$index]['richText'] = [
        'rteElements' => [
          Atoms::prepareTextField($sectionEntity, $field['body']),
        ],
      ];
    }

    if ((isset($field['downloads']) && Helper::isFieldPopulated($sectionEntity, $field['downloads'])) || (isset($field['links']) && Helper::isFieldPopulated($sectionEntity, $field['links']))) {
      $section_title = Helper::fieldValue($sectionEntity, $field['title']);
      $titleContext = t(' for @title', ['@title' => $section_title]);
      // Set up options for formDownloads prepare.
      $downloadLinks_options = [
        'heading' => [
          'type' => 'compHeading',
          'title' => t('Additional Resources'),
          'titleContext' => $titleContext,
          'sub' => TRUE,
        ],
      ];
      $pageContent[$index]['formDownloads'] = Organisms::prepareFormDownloads($sectionEntity, $downloadLinks_options, $cache_tags);
    }

    if (isset($field['map']) && Helper::isFieldPopulated($sectionEntity, $field['map']) && isset($field['address']) && Helper::isFieldPopulated($sectionEntity, $field['address'])) {
      $pageContent[$index]['actionMap'] = Molecules::prepareGoogleMap([0 => $sectionEntity->{$field['map']}], $sectionEntity->{$field['address']}->value);
    }
  }

  // Make pageContent data structure available in template.
  $variables['pageContent'] = $pageContent;

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_location_details_links_5')) {
    $titleContext = t(' to @title', ['@title' => $page_title]);
    // Set up options for link list.
    $linkList_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => t('Related'),
        'titleContext' => $titleContext,
      ],
      'stacked' => TRUE,
    ];

    $variables['sidebar']['linkList'] = Organisms::preparelinkList($node, 'field_location_details_links_5', $linkList_options);
  }

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_library_info_alter().
 */
function mass_theme_library_info_alter(&$libraries) {
  if (isset($libraries['google-map-field-renderer'])) {
    // Remove google map field style.
    unset($libraries['google-map-field-renderer']['css']['theme']['css/google-map-field-renderer.css']);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function mass_theme_preprocess_block(&$variables) {
  // Get base_path into our block.twig templates
  // http://data.agaric.com/how-get-base-path-your-drupal-8-site-twig-template
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_menu().
 */
function mass_theme_preprocess_menu(&$variables) {
  // Use this formatting for Utility nav.
  if (array_key_exists('menu_name', $variables) && $variables['menu_name'] == 'utility') {
    // Get Theme settings languages if available.
    if (theme_get_setting('languages', 'mass_theme')) {
      $variables['languages'] = implode(',', array_filter(theme_get_setting('languages', 'mass_theme')));
    }
    foreach ($variables['items'] as &$item) {
      if ($item['url']->isRouted()) {
        $ref_node = $item['url']->getRouteParameters();
        // Load it up and get the field.
        if ($node = Node::load($ref_node['node'])) {
          // Add the Utility Drawer node id into the cache tags for this page so
          // when the Utility nav nodes are updated, it triggers updates on all
          // affected pages.
          $variables['#cache']['tags'][] = 'node:' . $ref_node['node'];

          // Get aria label field value.
          $aria_label = '';
          if ($node->hasField('field_aria_label') && $node->get('field_aria_label')->value) {
            $aria_label = $node->get('field_aria_label')->value;
          }
          $icon = '';
          // Get icon.
          if ($node->hasField('field_icon_term') && array_key_exists('0', $node->get('field_icon_term')->referencedEntities())) {
            $icon = $node->get('field_icon_term')
              ->referencedEntities()[0]->get('field_sprite_name')->value;
          }

          // Get links.
          $panels = [];
          $panel = [];
          if ($node->hasField('field_links')) {
            $links = [];
            foreach ($node->get('field_links') as $link) {
              $uri = $link->uri;
              $is_external = UrlHelper::isExternal($uri);
              $links[] = [
                'type' => $is_external ? 'external' : 'internal',
                'text' => $link->computed_title,
                'href' => $is_external ? $uri : Url::fromUri($uri),
              ];
              if (!$is_external && strpos($uri, 'entity:node') !== FALSE) {
                $variables['#cache']['tags'][] = 'node:' . preg_replace('/\D/', '', $uri);
              }
            }
            $panel['links'] = $links;
          }
          if ($node->hasField('body') && !$node->body->isEmpty()) {
            $panel['description'] = [
              'richText' => [
                'rteElements' => [
                  [
                    'path' => '@atoms/11-text/paragraph.twig',
                    'data' => [
                      'paragraph' => [
                        'text' => $node->hasField('body') ? strip_tags($node->body->value, '<br><a><b>') : '',
                      ],
                    ],
                  ],
                ],
              ],
            ];
          }
          $panels[] = $panel;

          $items[] = [
            'text' => $item['title'],
            'ariaLabelText' => $aria_label,
            'icon' => $icon,
            'closeText' => t('Close'),
            'panels' => $panels,
          ];
        }
      }
    }
    $variables['items'] = $items;
  }
  // Use this formatting for Main Nav aka Topic Nav.
  if (array_key_exists('menu_name', $variables) && $variables['menu_name'] == 'main') {
    $mainNav = [];
    foreach ($variables['items'] as &$item) {
      $subNav = [];
      foreach ($item['below'] as $link) {
        $subNav[] = [
          'href' => $link['url'],
          'text' => $link['title'],
        ];
      }
      $mainNav[] = [
        'href'   => $item['url'],
        'text'   => $item['title'],
        'active' => $item['in_active_trail'],
        'subNav' => $subNav,
      ];
    }
    $variables['mainNav'] = $mainNav;
  }
}

/**
 * Implements hook_mass_theme_add_regions_to_node().
 *
 * Add regions to node templates.
 */
function mass_theme_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme.
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  // Retrieve theme regions.
  $available_regions = system_region_list($theme, 'REGIONS_ALL');

  // Validate allowed regions with available regions.
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);

  // For each region.
  foreach ($regions as $key => $region) {

    // Load region blocks.
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(['theme' => $theme, 'region' => $region]);

    // Capture viewable blocks and their settings to $build.
    $build = [];
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $block = Block::load($key);
        $block_content = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        $build[$key] = $block_content;
      }
    }

    // Add build to region.
    $variables[$region] = $build;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Retrieve view mode.
  $view_mode = $variables['view_mode'];

  // Array of allowed view modes (for performance so as to not execute on
  // unneeded nodes).
  $allowed_view_modes = ['full'];

  // If current view mode is in allowed view modes list, pass to
  // mass_theme_add_regions_to_node().
  // This has the effect of making blocks in the specified theme regions
  // available to be rendered by the node template as, e.g. "pre_content".
  // @see templates/content/node.html.twig
  if (in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded
    // region).
    $allowed_regions = ['pre_content', 'post_content', 'section_topics'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);

    // Now that precontent is available, add in the contextual nav element
    // for this page (if present).
    \Drupal::service('mass_content.log_in_links_builder')->buildContextualLogInLinks($variables, $node);
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '_' . $node->getType();
  if (function_exists($function)) {
    $function($variables);
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $view_mode_function = __FUNCTION__ . '_' . $node->getType() . '_' . $view_mode;
  if (function_exists($view_mode_function)) {
    $view_mode_function($variables);
  }

  // Set data_listing_icon for Data Listing nodes.
  $icon_map = [
    'Dataset' => 'data',
    'Data catalog' => 'catalog',
    'Data Resource' => 'resource',
    'Report' => 'report',
  ];

  // The field_data_flag field determines if it's a data listing. All External
  // Data Resource nodes are data listings.
  if ($node->getType() === 'external_data_resource' ||
    ($node->hasField('field_data_flag') && $node->field_data_flag->value === 'data')) {
    // The value of the flag is 'data'.
    $tid = '';
    // The data type is stored in several different fields. Find the one used
    // by the current node and store the target_id.
    if ($node->hasField('field_details_data_type') && !$node->get('field_details_data_type')->isEmpty()) {
      $tid = $node->field_details_data_type->target_id;
    }
    elseif ($node->hasField('field_binder_data_type') && !$node->get('field_binder_data_type')->isEmpty()) {
      $tid = $node->field_binder_data_type->target_id;
    }
    elseif ($node->hasField('field_list_data_type') && !$node->get('field_list_data_type')->isEmpty()) {
      $tid = $node->field_list_data_type->target_id;
    }
    if ($tid) {
      // Load the data type term and store the correct id for the component.
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
      if ($term->label() == 'Data resource') {
        if ($node->hasField('field_data_resource_type')
          && !$node->get('field_data_resource_type')->isEmpty()) {
          $resource_type_tid = $node->field_data_resource_type->target_id;
          $resource_type_term = \Drupal::entityTypeManager()
            ->getStorage('taxonomy_term')
            ->load($resource_type_tid);
          $variables['data_listing_icon'] = $icon_map[$resource_type_term->label()];
          $variables['data_listing_icon_label'] = $resource_type_term->label();
        }
      }
      else {
        $variables['data_listing_icon'] = $icon_map[$term->label()] ?? NULL;
        $variables['data_listing_icon_label'] = $term->label();
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Section Landing node content.
 */
function mass_theme_preprocess_node_section_landing(&$variables) {
  $node = $variables['node'];

  // This is a required icon field, but lets check.
  if (array_key_exists('0', $node->get('field_icon_term')->referencedEntities())) {
    $icon = $node->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
    $variables['icon_path'] = $icon;
  }

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

  // TODO: determine if we need another ImageStyle.
  if ($node->field_featured_mobile_image->entity) {
    $variables['mobile800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_mobile_image->entity->getFileUri());
  }

  // Get our subtopics (sections) view.
  $view_results = views_get_view_result('ordered_topics', 'ordered_topic_list_block', $node->id());
  $sections = [];
  // Roll this up and give the twig tpl what it expects.
  foreach ($view_results as $key => $row) {
    $icon_path = '';
    $links = [];
    // Wrap up our links for each subtopic.
    if ($row->_entity->hasField('field_common_content')) {
      foreach ($row->_entity->get('field_common_content')->referencedEntities() as $link) {
        $is_external = FALSE;
        if ($link->getType() == 'action') {
          if (isset($link->get('field_external_url')[0])) {
            $is_external = TRUE;
          }
        }
        // If we have an external URL, lets use that instead of internal paths.
        if ($is_external) {
          $external_link = $link->get('field_external_url')->first()->getValue();
          $link_path = $external_link['uri'];
        }
        else {
          $link_path = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $link->get('nid')->value);
        }
        $links[] = ['text' => $link->getTitle(), 'href' => $link_path];
      }
    }

    // Wrap up each section with links.
    if (isset($row->_entity->get('field_icon_term')->referencedEntities()[0])) {
      $icon = $row->_entity->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
      $icon_path = $icon;
    }
    $sections[] = [
      'id' => $row->_entity->get('nid')->value,
      'catIcon' => [
        'icon' => $icon_path,
        'small' => 'true',
      ],
      'title' => [
        'href' => \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $row->_entity->get('nid')->value),
        'text' => $row->_entity->getTitle(),
      ],
      'description' => $row->_entity->get('field_lede')->value,
      'links' => $links,
    ];
  }
  // Send to twig.
  $variables['sections'] = $sections;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node action alterations.
 */
function mass_theme_preprocess_node_action(&$variables) {
  $node = $variables['node'];

  if ($variables['view_mode'] == 'full') {
    $field_action_sidebar = $node->get('field_action_sidebar');

    // Get the subheads for the sidebar and filter out the quick action.
    if ($field_action_sidebar->count() > 0) {
      $delta = 0;
      $quick_actions_section = FALSE;
      $quick_actions = [];

      foreach ($field_action_sidebar->referencedEntities() as $paragraph) {
        $paragraph->getType();
        if ($paragraph->getType() == 'subhead') {
          $title = $paragraph->field_title->value;
          if ($title == 'Quick Actions') {
            $quick_actions_section = TRUE;
          }
          else {
            $quick_actions_section = FALSE;
          }
        }
        if ($quick_actions_section == TRUE) {
          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
          $build = $view_builder->view($paragraph, 'sidebar');
          $quick_actions[] = $build;
        }
        $delta++;
      }
      $variables['quick_actions'] = $quick_actions;
    }
  }

  if ($variables['view_mode'] == 'teaser_simple' || $variables['view_mode'] == 'teaser') {
    $field_external_link = $node->get('field_external_url');

    // If we have an external URL, lets use that instead of internal paths.
    if ($field_external_link->count() > 0) {
      $link = $field_external_link->first()->getValue();
      $variables['link_url'] = $variables['link_url'] = Url::fromUri($link['uri']);
      $variables['link_title'] = $variables['label'];
      $variables['link_type'] = 'external';
    }
    else {
      $variables['link_type'] = 'internal';
      $variables['link_title'] = $variables['label'];
      $variables['link_url'] = $variables['url'];
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_stacked_layout(&$variables) {
  $node = $variables['node'];
  $cache_tags = [];
  $image_field = $node->get('field_photo');
  $field_related_content = $node->get('field_related_content');

  foreach ($node->get('field_bands')->referencedEntities() as $paragraph) {
    if ($paragraph->getType() == 'search_band') {
      // If we have a search band, lets our node object and node template know.
      $variables['search_band'] = TRUE;
      $packaged_images_for_dom = [];
      // Nested paragraph containing image url, caption, and location text.
      foreach ($paragraph->get('field_home_bckgrnd_img_paragraph')->referencedEntities() as $image) {
        // Add image properties to array for dom processing.
        $renderer = \Drupal::service('renderer');
        $caption = $credit = '';
        // We have to manually render these fields before they are output in
        // JSON.
        if ($image->field_caption->count()) {
          $build = $image->field_caption->first()->view();
          $caption = $renderer->renderRoot($build);
        }
        if ($image->field_name->count()) {
          $build = $image->field_name->first()->view();
          $credit = $renderer->renderRoot($build);
        }
        $packaged_images_for_dom[] = [
          'image_url' => Helper::getFieldImageUrl($image, 'hero1600x800', 'field_image'),
          'image_url_mobile' => Helper::getFieldImageUrl($image, 'hero800x400_no_blur', 'field_image'),
          'image_location' => $caption,
          'image_credit' => $credit,
        ];
      }
      $variables['#attached']['drupalSettings']['homepage_background_images'] = $packaged_images_for_dom;
      $variables['#attached']['library'][] = 'mass_utility/mass_utility.homepage_background_image';
    }
  }

  if ($image_field->count() > 0) {
    $values = $image_field->getValue();
    $variables['image_url'] = Helper::getFieldImageUrl($node, 'illustrated_header', 'field_photo');
    $variables['image_alt'] = $values[0]['alt'];
    $variables['image_url_teaser_simple'] = Helper::getFieldImageUrl($node, 'thumbnail_130x160', 'field_photo');
  }

  if ($field_related_content->count() > 0) {
    $items = $field_related_content->referencedEntities();
  }

  if (!empty($items)) {
    $page_title = $node->getTitle();
    $titleContext = t(' to @title', ['@title' => $page_title]);
    $variables['titleContext'] = $titleContext;

    $related_content = [];
    foreach ($items as $item) {
      // Get entity cache tags.
      $cache_tags = array_merge($cache_tags, $item->getCacheTags());

      $related_content[] = [
        'link' => [
          'type' => 'internal',
          'quickaction' => 'FALSE',
          'href' => $item->toUrl(),
          'text' => $item->getTitle(),
          'image' => Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo'),
          'label' => trim($item->get('field_label')->value) == 'Guide' ? 'Guide:' : '',
        ],
      ];
    }
    $variables['related_content'] = $related_content;
  }

  if (!empty($cache_tags)) {
    // Merge arrays of existing and new cache tags and removes duplicates.
    $merged_tags = Cache::mergeTags($node->getCacheTags(), $cache_tags);
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $merged_tags;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_2up_stacked_band(&$variables) {
  $node = $variables['node'];

  $label_clean = strtolower($node->getTitle());
  $label_clean = Html::cleanCssIdentifier($label_clean);
  $variables['label_clean'] = $label_clean;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_1up_stacked_band(&$variables) {
  $node = $variables['node'];

  $label_clean = strtolower($node->getTitle());
  $label_clean = Html::cleanCssIdentifier($label_clean);
  $variables['label_clean'] = $label_clean;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_field__person_org_role(&$variables) {
  $items = $variables['items'];
  $person_roles = [];
  $person_node = $variables['element']['#object'];
  foreach ($items as $item) {
    if (!empty($item['content']['#node'])) {
      $org_page_node = $item['content']['#node'];
      // Get the organization sections for the given org_page node.
      $field_organization_sections = $org_page_node->field_organization_sections->referencedEntities();
      // Loop through the organization sections to find list_board_members
      // content references.
      foreach ($field_organization_sections as $org_section) {
        // Get the referenced paragraph in the content. This assumes there is
        // only one content item per section.
        $content_entity = $org_section->get('field_section_long_form_content')->entity;
        // If the referenced paragraph is a list_board_members, run logic to
        // find references to the current person node.
        if ($content_entity->bundle() == 'list_board_members') {
          // Get the field value, which will be a section_board_member
          // paragraph.
          $board_members_sections = $content_entity->field_board_members->referencedEntities();
          // Loop through the sections.
          foreach ($board_members_sections as $board_member_section) {
            // Get the field value, which will be a board_member paragraph.
            $field_board_members = $board_member_section->field_board_members->referencedEntities();
            // Loop through the board members.
            foreach ($field_board_members as $board_member) {
              // If there is a person referenced, let's check for a match.
              if (!$board_member->get('field_person')->isEmpty()) {
                // Get the person node referenced.
                $field_person_entity = current($board_member->field_person->referencedEntities());
                // If the referenced person node matches the currently viewed
                // person node, add it to the person_roles array.
                if ($field_person_entity->id() == $person_node->id()) {
                  $person_roles[$org_page_node->id()] = $board_member->get('field_eyebrow')->value;
                }
              }
            }
          }
          // Get the field value, which will be a board_member paragraph.
          $field_featured_board_members = $content_entity->field_featured_board_members->referencedEntities();
          // Loop through the featured board members.
          foreach ($field_featured_board_members as $feat_board_member) {
            // If there is a person referenced, let's check for a match.
            if (!$feat_board_member->get('field_person')->isEmpty()) {
              // Get the person node referenced.
              $field_person_entity = current($feat_board_member->field_person->referencedEntities());
              // If the referenced person node matches the currently viewed
              // person node, add it to the person_roles array.
              if ($field_person_entity->id() == $person_node->id()) {
                $person_roles[$org_page_node->id()] = $feat_board_member->get('field_eyebrow')->value;
              }
            }
          }
        }
      }
    }
  }
  $variables['person_org_roles'] = $person_roles;
}

/**
 * Build block early on the page and set a variable for html.html.twig.
 */
function mass_theme_block_alert_build(&$variables) {
  $block_configs = [
    'sitewide_alerts' => Block::load('sitewide_alerts'),
    'page_alerts' => Block::load('page_alerts'),
  ];

  /** @var Drupal\block\Entity\Block $block_config */
  foreach ($block_configs as $id => $block_config) {

    if (!$block_config->access('view')) {
      continue;
    }
    $block_manager = \Drupal::service('plugin.manager.block');
    /** @var Drupal\mass_alerts\Plugin\Block\AlertsBlock */
    $plugin_block = $block_manager->createInstance('mass_alerts_block', $block_config->get('settings'));
    $path = $plugin_block->build()['#path'];
    $variables[$id . '_path'] = $path;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_html(&$variables) {
  if (isset($variables['node_type'])) {
    $node_type = $variables['node_type'];
  }

  mass_theme_block_alert_build($variables);

  $variables['optimize_hiding_snippet'] = \Drupal::state()->get('optimize_hiding_snippet', FALSE);

  // Add Schema.org markup for body.
  $variables['deployment_identifier'] = Settings::get('deployment_identifier');
  if (isset($node_type)) {
    $variables['attributes']['vocab'] = ['http://schema.org/'];
    $variables['attributes']['typeof'] = ['WebPage'];
    // Add a body class for Action nodes.
    if ($node_type == 'action') {
      $variables['attributes']['class'][] = 'action-page';
    }
    elseif ($node_type === 'decision_tree') {
      $variables['attributes']['class'][] = 'decision-tree-page';
    }
  }

  // Add a variable for the emergency alerts banner view for front template.
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();

  if ($is_front_page) {
    $variables['alerts_banner_view'] = views_embed_view('emergency_alert', 'block_banner');
    // Add a body class if this is the front.
    $variables['attributes']['class'][] = 'is-front';
  }
  else {
    $variables['attributes']['class'][] = 'not-front';
  }

  // Add social media links for the organization info in page-meta.html.twig.
  $social_menu = \Drupal::menuTree()->load('social', new MenuTreeParameters());
  $socialMedia = [];
  /** @var \Drupal\Core\Menu\MenuLinkTreeElement $menu_item */
  foreach ($social_menu as $menu_item) {
    $socialMedia[] = $menu_item->link->getUrlObject()->getUri();
  }

  // The colored state seal to be used by search engines.
  // Normally we would use theme_get_setting('logo.url')
  $logo = \Drupal::service('file_url_generator')->generateAbsoluteString(mayflower_get_path() . '/assets/images/logo/stateseal-color.png');
  $hostname = \Drupal::request()->getSchemeAndHttpHost();
  // Pass Schema.org markup data to page-meta.html.twig.
  $metadata = [
    'id' => $hostname . "/#organization",
    'urlDomain' => $hostname,
    'socialMediaLinks' => json_encode($socialMedia, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT),
    'urlPath' => \Drupal::request()->getBaseUrl() . \Drupal::request()->getPathInfo(),
    'logo' => $logo,
    'siteName' => 'Mass.gov',
    'siteAltName' => 'The Official Website of the Commonwealth of Massachusetts',
    'siteDescription' => '',
    'siteKeywords' => '',
    'siteCopyright' => 'Commonwealth of Massachusetts',
    'orgName' => 'Commonwealth of Massachusetts',
    'schemaPageType' => $is_front_page ? 'Home' : '',
  ];
  Helper::addMetatagData($metadata);

  $variables['pageMetaData'] = $metadata;

  // Get Theme settings languages if available.
  if (theme_get_setting('languages', 'mass_theme')) {
    $variables['languages'] = implode(',', array_filter(theme_get_setting('languages', 'mass_theme')));
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove page search if we're using our search band in stacked layout.
 */
function mass_theme_preprocess_page(&$variables) {
  // Get Theme settings languages if available.
  if (theme_get_setting('languages', 'mass_theme')) {
    $variables['languages'] = implode(',', array_filter(theme_get_setting('languages', 'mass_theme')));
  }
  $variables['sealImage'] = \Drupal::service('file_url_generator')->generateAbsoluteString(mayflower_get_path() . '/assets/images/logo/stateseal.png');

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $node = $variables['node'];

    // When loading a revision only the nid is returned. We need the object.
    if (ctype_digit($node)) {
      $node = Node::load($node);
    }

    // Trap errors.
    if (!is_null($node)) {
      // Get the node bundle (content type).
      $bundle = $node->bundle();

      // Map out classes to be added to <main> based on bundle.
      $map = [
        'campaign_landing' => 'ma__campaign-landing',
        'guide_page' => 'ma__guide-page',
        'how_to_page' => 'ma__details',
        'location' => 'ma__details',
        'org_page' => 'ma__org-page',
        'rules' => 'ma__court-rules',
        'service_page' => 'ma__services',
        'topic_page' => 'ma__topic-page',
      ];

      // Send main_class variable to page.
      if (array_key_exists($bundle, $map)) {
        $variables['main_class'] = $map[$bundle];
      }

      // Add class for org-type to main wrapper.
      if ($bundle === 'org_page' && $node->hasField('field_subtype') && !$node->field_subtype->isEmpty()) {
        $org_type = strtolower(trim($node->field_subtype->value));
        $org_type = str_replace(' ', '-', $org_type);
        $variables['main_class'] .= ' ma__org-page--' . $org_type;
      }

      // If we're using search band, lets tell page twig about it.
      if ($node->hasField('field_bands') && $node->get('field_bands')->count() > 0) {
        foreach ($node->get('field_bands')->referencedEntities() as $paragraph) {
          if ($paragraph->getType() == 'search_band') {
            $variables['hideHeaderSearch'] = TRUE;
          }
        }
      }
    }
  }

  $social_menu = \Drupal::menuTree()->load('social', new MenuTreeParameters());
  $footerSocialLinks = [];
  foreach ($social_menu as $menu_item) {
    $footerSocialLinks[] = [
      'altText' => t('Follow Mass.gov on :service', [':service' => $menu_item->link->getTitle()]),
      'href' => $menu_item->link->getUrlObject(),
      'icon' => strtolower($menu_item->link->getTitle()),
      'linkType' => strtolower($menu_item->link->getTitle()),
    ];
  }
  $variables['footerSocialLinks'] = [
    'items' => $footerSocialLinks,
  ];

  if (!isset($variables['node'])) {
    $allowed_regions = ['post_content'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();
  $variables['footerFloatingAction'] = TRUE;
  if ($is_front_page || $route_name != 'entity.node.canonical') {
    $variables['footerFloatingAction'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function mass_theme_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  if ($element['#field_name'] == 'field_curatedlist_list_section') {
    if (count($element['#items']) == 1) {
      $paragraph = $variables['element'][0]['#paragraph'];
      if ($paragraph->getType() === 'list_static') {
        $variables['element'][0]['#paragraph']->set('field_liststatic_title', '');
      }
      if ($paragraph->getType() === 'list_dynamic') {
        $variables['element'][0]['#paragraph']->set('field_listdynamic_title', '');
      }
    }

  }

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_action_details') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        $key = strtolower($title);
        $key = Html::cleanCssIdentifier($key);
        $variables['subheads'][$key] = $title;
      }
      $delta++;
    }
  }

  // Get the subheads for the sidebar and filter out the quick action.
  if ($element['#field_name'] == 'field_action_sidebar') {
    $delta = 0;
    $quick_actions_section = FALSE;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      $paragraph->getType();
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        if ($title == 'Quick Actions') {
          $quick_actions_section = TRUE;
        }
        else {
          $quick_actions_section = FALSE;
        }
      }
      if ($quick_actions_section == TRUE) {
        unset($variables['items'][$delta]);
      }
      $delta++;
    }
  }

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_bands') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      // Check paragraph type.
      if ($paragraph->getType() == 'subhead') {
        // Get data from paragraph type field.
        $title_field = $paragraph->get('field_title');
        // Get the titles of a stack-layout for jump menu.
        if (!empty($title_field)) {
          $title = $title_field->getValue();
          $key = strtolower($title[0]['value']);
          $key = Html::cleanCssIdentifier($key);
          $variables['subheads'][$key] = $title[0]['value'];
        }
      }
      $delta++;
    }

    // Rebuild this array to include subheads into bands.
    $delta = 0;
    $bands = [];
    $subhead = [];
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      // Check paragraph type for subhead.
      if ($paragraph->getType() == 'subhead') {
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
        $build = $view_builder->view($paragraph, 'stacked');
        $subhead = $build;
      }
      // Check paragraph type for stacked band.
      if ($paragraph->getType() == '1up_stacked_band' || $paragraph->getType() == '2up_stacked_band' || $paragraph->getType() == 'action_set' || $paragraph->getType() == 'search_band') {
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
        $band = $view_builder->view($paragraph, 'stacked');
        $bands[$delta][] = $subhead;
        $bands[$delta][] = $band;
        // Since we've entered our subhead, clear it out.
        $subhead = [];
      }

      // If we have a search band, lets hide jump links.
      if ($paragraph->getType() == 'search_band') {
        $variables['search_band'] = TRUE;
      }

      $delta++;
    }
    $use_alt_header = FALSE;
    if (isset($element['#object']->get('field_use_alt_header')[0])) {
      $use_alt_header = $element['#object']->field_use_alt_header->get(0)->value;
    }
    $variables['use_alt_header'] = $use_alt_header;
    $variables['bands'] = $bands;
  }

  // If our Callout Link (Link field) references an internal node,
  // use the "External URL" field on that node, for the link,
  // if it exists.
  if ($element['#field_name'] == 'field_topic_callout_links') {
    $variables['external_link_url'] = '';
    $delta = 0;
    while (!empty($element[$delta])) {
      // Run only if this is an internal link.
      if ($element[$delta]['#url']->isExternal() == FALSE) {
        // Get the nid of the referenced internal node.
        $ref_node = $element[$delta]['#url']->getRouteParameters();
        // Load it up and get the field.
        if ($node = Node::load($ref_node['node'])) {
          // Run only on Action nodes.
          if ($node->getType() == "action" && $node->hasField('field_external_url')) {
            $external_url = $node->get('field_external_url')->uri;
            if (!empty($external_url)) {
              // Send this url to our template.
              $variables['external_link_url'] = Url::fromUri($external_url);
            }
          }
        }
      }
      $delta++;
    }
  }
  if (($element['#view_mode'] == 'sidebar' || $element['#view_mode'] == 'stacked_sidebar') && $element['#bundle'] == 'related_link') {
    $links = [];
    $delta = 0;
    // Wrap up our related links.
    while (!empty($element[$delta]) && !isset($element[$delta]['#type'])) {
      $url = $element[$delta]['#url_title'];
      // Check if referenced nodes are external urls.
      if ($element[$delta]['#url']->isRouted()) {
        $nid = $element[$delta]['#url']->getRouteParameters()['node'];
        $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
        if (!is_null($node) && $node->hasField('field_external_url') && !empty($node->get('field_external_url')->uri)) {
          $url = $node->get('field_external_url')->uri;
        }
      }

      $links[] = [
        'link' => [
          'text' => $element[$delta]['#title'],
          'href' => $url,
          'type' => (UrlHelper::isExternal($url)) ? 'external' : 'internal',
        ],
      ];
      $delta++;
    }
    // Send array to twig.
    $variables['relatedActions'] = $links;
  }

  if (($element['#view_mode'] == 'sidebar' || $element['#view_mode'] == 'stacked_sidebar') && $element['#bundle'] == 'contact_group') {
    $groups = [];
    $order = [];
    $delta = 0;

    // Wrap up our contact groups.
    while (!empty($element[$delta])) {

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'phone') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our phone numbers.
        $phone_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'rawVal' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link' => str_replace(['+', '-'], '', filter_var($element[$delta]['#paragraph']->get('field_phone')->value, FILTER_SANITIZE_NUMBER_INT)),
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'fax') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our fax numbers.
        $fax_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'rawVal' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'online') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our online links.
        $value = $link = NULL;
        if (!empty($element[$delta]['#paragraph']->get('field_link')->first())) {
          $value = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['uri'];
        }

        $online_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $value,
          'rawVal' => '',
          'link' => $link,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'branch_location') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our branch location links.
        $value = $link = NULL;
        if (!empty($element[$delta]['#paragraph']->get('field_branch_locations')->first())) {
          $value = $element[$delta]['#paragraph']->get('field_branch_locations')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_branch_locations')->first()->getValue()['uri'];
        }

        $branch_location_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $value,
          'rawVal' => '',
          'link' => $link,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => 'online',
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'email') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our emails.
        $email_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_email')->value,
          'rawVal' => $element[$delta]['#paragraph']->get('field_email')->value,
          'link' => $element[$delta]['#paragraph']->get('field_email')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'mail') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;

        // Wrap up all our addresses.
        $address_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_address')->value,
          'rawVal' => '',
          'link' => 'https://maps.google.com/?q=' . urlencode($element[$delta]['#paragraph']->get('field_address')->value),
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => 'address',
        ];
        $delta++;
        continue;
      }

      // No type? or type "other"? Try to process what we have.
      if (!isset($element[$delta]['#paragraph']->get('field_type')->value) || $element[$delta]['#paragraph']->get('field_type')->value == 'other') {
        $order[$delta] = 'other';
        // Wrap up all our other stuff. Anything goes!
        $value = '';
        $link = '';
        if ($element[$delta]['#paragraph']->get('field_link')->first() !== NULL) {
          $value = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['uri'];
        }
        $other_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_phone')->value
          . $value
          . $element[$delta]['#paragraph']->get('field_email')->value
          . $element[$delta]['#paragraph']->get('field_address')->value,
          'rawVal' => '',
          'link' => $element[$delta]['#paragraph']->get('field_phone')->value
          . $link
          . $element[$delta]['#paragraph']->get('field_email')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      // If all else fails, increment or we spin out of control.
      $delta++;
    }

    $order = array_unique($order);

    // Render our groups in order.
    foreach ($order as $value) {
      // Do we have phone numbers? If so, display them under one icon.
      if (!empty($phone_details) && $value == 'phone') {
        $groups[] = [
          'icon' => 'phone',
          'name' => 'Phone',
          'items' => $phone_details,
        ];
      }
      // Do we have fax numbers? If so, display them under one icon.
      if (!empty($fax_details) && $value == 'fax') {
        $groups[] = [
          'icon' => 'fax-icon',
          'name' => 'Fax',
          'items' => $fax_details,
        ];
      }
      // Do we have emails? If so, display them under one icon.
      if (!empty($email_details) && $value == 'email') {
        $groups[] = [
          'icon' => 'laptop',
          'name' => 'Online',
          'items' => $email_details,
        ];
      }
      // Do we have online links? If so, display them under one icon.
      if (!empty($online_details) && $value == 'online') {
        $groups[] = [
          'icon' => 'laptop',
          'name' => 'Online',
          'items' => $online_details,
        ];
      }
      // Do we have branch location links? If so, display them under one icon.
      if (!empty($branch_location_details) && $value == 'branch_location') {
        $groups[] = [
          'icon' => 'profile',
          'name' => 'Branch Location',
          'items' => $branch_location_details,
        ];
      }
      // Do we have address? If so, display them under one icon.
      if (!empty($address_details) && $value == 'mail') {
        $groups[] = [
          'icon' => 'mail',
          'name' => 'Address',
          'items' => $address_details,
        ];
      }
      // Do we have other details? If so, display them under one icon.
      if (!empty($other_details) && $value == 'other') {
        $groups[] = [
          'icon' => 'marker',
          'name' => 'Other',
          'items' => $other_details,
        ];
      }
    }
    // Send to twig template.
    $variables['contactGroups'] = $groups;
  }

  // Populate helpful links array.
  if ($element['#field_name'] == 'field_helpful_links') {
    $helpful_links = [];
    $helpful_links['compHeading'] = [
      'title' => $element['#title'],
      'sub' => 'true',
      'color' => 'yellow',
    ];
    $links = [];
    $delta = 0;
    // Wrap up our helpful links.
    while (!empty($element[$delta]) && !isset($element[$delta]['#type'])) {
      $links[] = [
        'chevron' => 'true',
        'text' => $element[$delta]['#title'],
        'href' => $element[$delta]['#url_title'],
      ];
      $delta++;
    }
    $helpful_links['items'] = $links;
    // Send array to twig.
    $variables['helpfulLinks'] = $helpful_links;
  }

  // The first element of the featured items mosaic needs a slightly different template.
  if ($element['#field_name'] == 'field_featured_item_mosaic_items') {
    // First image with an image style.
    $highlight = $variables['items'][0]['content']['#paragraph']->field_featured_item_highlight;
    $style = ImageStyle::load('featured_item_highlight');
    $new_image = $style->buildUrl($highlight->entity->getFileUri());
    $highlight->entity->setFileUri($new_image);
    $variables['items'][0]['content']['#view_mode'] = 'tall';
  }

  // Setup social link icons.
  if (in_array($element['#field_name'], ['field_services_social_links', 'field_social_links'])) {
    // Get icons for social links.
    $services = [
      'twitter',
      'facebook',
      'flickr',
      'blog',
      'linkedin',
      'google',
      'instagram',
      'medium',
      'youtube',
    ];

    foreach ($variables['items'] as $index => &$item) {
      $url = $item['content']['#url']->toString();
      foreach ($services as $service) {
        if (strpos($url, $service)) {
          $item['icon'] = Helper::getIconPath($service);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  $vocab = $term->bundle();

  if ($vocab == 'icons') {
    $field_sprite_type = $term->get('field_sprite_type');

    if ($field_sprite_type->count() > 0) {
      $svg_type = $field_sprite_type->first()->getValue();
      $variables['svg_type'] = $svg_type['value'];
    }

    $field_sprite_name = $term->get('field_sprite_name');

    if ($field_sprite_name->count() > 0) {
      $sprite_name = $field_sprite_name->first()->getValue();
      $variables['sprite_name'] = $sprite_name['value'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '__' . $paragraph->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function mass_theme_preprocess_paragraph__iframe(&$variables) {
  if (!$variables['paragraph']->get('field_iframe_height_config')->isEmpty()) {
    if (!$variables['paragraph']->get('field_height')->isEmpty()) {
      $variables['iframe_height'] = $variables['paragraph']->get('field_height')->getValue()[0]['value'];
    }
    if ($variables['paragraph']->get('field_iframe_height_config')->getValue()[0]['value'] == '100') {
      $variables['#attached']['library'][] = 'mass_theme/iframe-resizer';
      $variables['iframe_height'] = 'auto';
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * Process info_details card group/
 */
function mass_theme_preprocess_paragraph__info_details_card_group(&$variables) {
  $entity = $variables['paragraph'];

  if (!$entity->field_card->isEmpty()) {
    $entities = $entity->get('field_card')->referencedEntities();
    foreach ($entities as $index => $p) {
      $numOfSections = ++$index;
      $variables['numOfSections'] = $numOfSections;
      $link = Helper::separatedLinks($p, 'field_card_link');
      $seeAll = [
        'href' => $link[0]['href'],
        'text' => 'more',
      ];
      $sectionLinks[] = [
        'title' => [
          'href' => $link[0]['href'],
          'text' => $link[0]['text'],
        ],
        'level' => 3,
        'type' => '',
        'description' => Helper::fieldFullView($p, 'field_content'),
        'links' => '',
        'seeAll' => $seeAll,
      ];
      $sections = ['sections' => $sectionLinks];
    }
    $variables['sectionContent'][$numOfSections]['sectionThreeUp'] = $sections;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess logic for the org_events paragraph.
 */
function mass_theme_preprocess_paragraph__org_events(&$variables) {
  $paragraph = $variables['paragraph'];
  // Gather events associated with this node.
  $eventManager = \Drupal::service('mass_content.event_manager');
  $eventsRender = (new EventsRendererOrgPages($eventManager, $paragraph))->render();
  $variables = array_merge($variables, $eventsRender);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess logic for the org_news paragraph.
 */
function mass_theme_preprocess_paragraph__org_news(&$variables) {
  $paragraph = $variables['paragraph'];
  $cache_tags = [];

  if (Helper::isFieldPopulated($paragraph, 'field_org_featured_news_items') || Helper::isFieldPopulated($paragraph, 'field_number_of_news_items')) {
    $numItems = (int) Helper::fieldValue($paragraph, 'field_number_of_news_items');
    $pressListing_options = [
      'numOfSecondaryItems' => $numItems,
      'displayImages' => Helper::fieldValue($paragraph, 'field_org_show_news_images'),
    ];
    $secondaryItems = $paragraph->recent_news->range(0, $numItems + 1)->referencedEntities();
    $press_listing = Organisms::preparePressListing($paragraph, 'field_org_featured_news_items', $pressListing_options, $secondaryItems, $cache_tags);

    if (!empty($press_listing)) {
      $variables['news'] = [
        'pageContent' => [
          [
            'path' => '@organisms/by-author/press-listing.twig',
            'data' => [
              'pressListing' => $press_listing,
            ],
          ],
        ],
      ];

      // Bubble cache tag to the current render. Based on template_preprocess_pager()
      // Needed until core implements https://www.drupal.org/project/drupal/issues/3028976
      (new CacheableMetadata())->addCacheTags($cache_tags)
        ->applyTo($variables);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for org_locations paragraphs.
 */
function mass_theme_preprocess_paragraph__org_locations(&$variables) {
  $paragraph = $variables['paragraph'];
  $node = Helper::getParentNode($paragraph);

  if (Helper::isFieldPopulated($paragraph, 'field_org_ref_locations')) {
    $mappedLocations_options = [
      'locationDetailsLink' => [
        'display' => TRUE,
        'nid' => $node->id(),
        'path' => \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id()),
      ],
    ];

    // Use aside for the text that displays next to the map with the button.
    $mappedLocations_options['aside'] = [
      'button' => $paragraph->field_location_button_label->value,
      'paragraph' => [
        'text' => Helper::fieldFullView($paragraph, 'field_location_button_short_desc'),
      ],
    ];

    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/mapped-locations.twig',
          'data' => [
            'mappedLocations' => Organisms::prepareMappedLocations($paragraph->field_org_ref_locations->referencedEntities(), $mappedLocations_options),
          ],
        ],
      ],
    ];

    $variables['stackedRowSections'] = $sections;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__related_content(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_related_content_items = $paragraph->get('field_related_content');

  // Get Related items.
  if ($field_related_content_items->count() > 0) {
    $related_items = $field_related_content_items->referencedEntities();
  }

  if (!empty($related_items)) {
    $nodes = [];
    $types = [];
    $total_count = count($related_items);

    foreach ($related_items as $id => $item) {
      /** @var Drupal\node\Entity\Node $item */
      // Default icon for content without icons but using the Topic card.
      $item->{'icon'} = 'marker';
      $item->{'node_path'} = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $item->get('nid')->value);
      $item->{'image_thumbnail_url'} = $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '';

      // For Stacked Layout, if label or acronym is Guide then the label
      // should be "Guide:".
      if ($item->getType() == 'stacked_layout') {
        $label = $item->get('field_label')->isEmpty() ? '' : $item->get('field_label')->value;
        $item->{'label_text'} = $label == 'Guide' ? 'Guide:' : '';
      }

      // Grab our icon.
      // Topics have an icon field.
      if ($item->hasField('field_icon_term') && array_key_exists('0', $item->get('field_icon_term')->referencedEntities())) {
        $icon = $item->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
        $item->{'icon'} = $icon;
      }

      // Topics don't have topic callouts, so we use common content for links.
      if ($item->hasField('field_common_content')) {
        $links = [];
        foreach ($item->get('field_common_content')->referencedEntities() as $link) {
          // Get aliased path.
          $link_path = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $link->get('nid')->value);
          if ($link && $link->hasField('field_external_url')) {
            $external_link = $link->get('field_external_url')->uri;
            // Check the external url field value is not empty.
            if (!empty($external_link)) {
              $link_path = $external_link;
            }
          }
          $links[] = ['text' => $link->getTitle(), 'href' => $link_path];
        }
        // Get links for our topic cards.
        $item->{'links'} = $links;
      }

      // Subtopics have topic callout links.
      if ($item->hasField('field_topic_callout_links')) {
        $links = [];
        foreach ($item->get('field_topic_callout_links') as $link) {
          $link_path = Url::fromUri($link->uri);
          if (mb_strpos($link->uri, 'entity:node/') !== FALSE) {
            $nid = explode('/', $link->uri)[1];
            $linked_node = Node::load($nid);
            // Check that we have a node and that it has an external_url field.
            if ($linked_node && $linked_node->hasField('field_external_url')) {
              $external_link = $linked_node->get('field_external_url')->uri;
              // Check the external url field value is not empty.
              if (!empty($external_link)) {
                $link_path = $external_link;
              }
            }
          }
          $links[] = ['text' => $link->computed_title, 'href' => $link_path];
        }
        // Get links for our topic cards.
        $item->{'links'} = $links;
      }

      $nodes[] = $item;
      $types[] = $item->getType();
    }
  }

  $contentTypes = \Drupal::service('entity_type.manager')->getStorage('node_type')->loadMultiple();

  $contentTypesList = [];

  // Get our content types list.
  foreach ($contentTypes as $contentType) {
    $contentTypesList[$contentType->id()] = 0;
  }

  // Merge in our content types with totals so we don't have to check indexs.
  $total_type_with_count = array_merge($contentTypesList, array_count_values($types));

  $variables['layout'] = _get_layout($total_type_with_count, $total_count);
  $variables['items'] = $nodes;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess logic for the org_related_orgs paragraph.
 */
function mass_theme_preprocess_paragraph__org_related_orgs(&$variables) {
  $paragraph = $variables['paragraph'];

  // Add related orgs stack row section.
  if (Helper::isFieldPopulated($paragraph, 'field_ref_orgs')) {
    $linkList_options = [
      'sectionClass' => 'ma__related-organizations',
    ];

    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/link-list.twig',
          'data' => [
            'linkList' => Organisms::prepareLinkList($paragraph, 'field_ref_orgs', $linkList_options),
          ],
        ],
      ],
    ];
    $variables['stackedRowSections'] = $sections;
  }
}

/**
 * Provide the desired design layout for related things.
 *
 * @param array $total_type_with_count
 *   A list of all content types with counts of how many.
 * @param int $total_count
 *   The total count of referenced nodes.
 *
 * @return string
 *   The twig layout to be used.
 */
function _get_layout(array $total_type_with_count, $total_count) {
  // If all content is "stacked_layout" or "org," we use "bullets".
  if (
    $total_type_with_count['stacked_layout'] == $total_count ||
    $total_type_with_count['org_page'] == $total_count
  ) {
    return 'bullets';
  }

  // Tests for using Topic Card layout.
  // Pretty sure we don't use this layout anymore; there are no page types called 'topic' or 'subtopic'
  // and we don't use stacked layout except for the homepage.
  if (
    $total_type_with_count['topic_page'] + $total_type_with_count['service_page'] == $total_count ||
    $total_type_with_count['topic_page'] + $total_type_with_count['stacked_layout'] == $total_count
  ) {
    return 'topicCards';
  }
  // For all other types or combinations, use actionCards
  // This layout is the only one in active use
  // It's used in the "Features Services" section of the home page
  // where it's a part of the "search" paragraph.
  return 'actionCards';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__action_set(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_featured_items = $paragraph->get('field_featured_content');
  $featured_links = [];
  $image_url = '';

  // Get field labels for twig.
  $variables['featuredHeading'] = $field_featured_items->getFieldDefinition()->getLabel();

  // Get Featured links.
  if ($field_featured_items->count() > 0) {
    $featured_items = $field_featured_items->referencedEntities();
  }

  if (!empty($featured_items)) {
    foreach ($featured_items as $id => $item) {
      $image_url = '';
      $external_url = '';
      if ($item->hasField('field_external_url')) {
        $external_url = $item->get('field_external_url')->uri;
      }

      $featured_links[] = [
        'image' => $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '',
        'text' => $item->getTitle(),
        'type' => $external_url ? 'external' : 'internal',
        'href' => $external_url ? $external_url : $item->toURL()->toString(),
      ];
    }

    $variables['featuredLinks'] = $featured_links;
  }

  $field_link_items = $paragraph->get('field_related_content');
  $links = [];

  $variables['generalHeading'] = $field_link_items->getFieldDefinition()->getLabel();

  // Get All Actions & Guides links.
  if ($field_link_items->count() > 0) {
    $link_items = $field_link_items->referencedEntities();
  }

  if (!empty($link_items)) {
    foreach ($link_items as $id => $item) {
      $image_url = '';
      $external_url = '';
      if ($item->hasField('field_external_url')) {
        $external_url = $item->get('field_external_url')->uri;
      }

      $links[] = [
        'image' => $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '',
        'text' => $item->getTitle(),
        'type' => $external_url ? 'external' : 'internal',
        'href' => $external_url ? $external_url : $item->toURL()->toString(),
      ];
    }

    $variables['links'] = $links;

    if (!empty($paragraph->get('field_link_single')->uri)) {
      $seeAll = [
        'type' => UrlHelper::isExternal($paragraph->get('field_link_single')->uri) ? 'external' : 'internal',
        'href' => Url::fromUri($paragraph->get('field_link_single')->uri),
        'text' => $paragraph->get('field_link_single')->title,
        'info' => '',
      ];
      $variables['seeAll'] = $seeAll;
    }
  }

  // Get our background image.
  if ($paragraph->get('field_image')->entity) {
    $variables['bgWide'] = ImageStyle::load('hero800x400')->buildUrl($paragraph->get('field_image')->entity->getFileUri());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process 3 up text.
 */
function mass_theme_preprocess_paragraph__3_up_content(&$variables) {
  $paragraph = $variables['paragraph'];
  $rows = $paragraph->get('field_3_up_rows');
  $list = [];

  if ($rows->count() > 0) {
    $items = $rows->referencedEntities();
  }

  if (!empty($items)) {
    foreach ($items as $id => $item) {
      $field_content = $item->get('field_content')->view('full');
      // Break out our paragraphs and render the field - it might have an image.
      $paragraph_tags = explode("<p>", str_replace("</p>", "", \Drupal::service('renderer')->render($field_content)));

      // Reset our array.
      $paragraphs = [];
      foreach ($paragraph_tags as $paragraph_tag) {
        if (!empty($paragraph_tag)) {
          $paragraphs[] = [
            'path' => '@atoms/11-text/raw-html.twig',
            'data' => [
              'rawHtml' => [
                'content' => trim(str_replace("<p>", "", $paragraph_tag)),
              ],
            ],
          ];
        }
      }

      $list_items = [];
      if ($item->get('field_heading')->value) {
        $list_items[] = [
          'path' => '@atoms/04-headings/column-heading.twig',
          'data' => [
            'columnHeading' => [
              'text' => $item->get('field_heading')->value,
              'href' => '',
              'info' => '',
            ],
          ],
        ];
      }
      $list_items[] = [
        'path' => '@organisms/by-author/rich-text.twig',
        'data' => [
          'richText' => [
            'rteElements' => $paragraphs,
          ],
        ],
      ];

      $list[] = [
        'items' => $list_items,
      ];
    }
  }

  $variables['splitColumns']['columns'] = $list;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step_numbered_list(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_action_step_numbered_items = $paragraph->get('field_action_step_numbered_items');
  $list = [];

  if ($field_action_step_numbered_items->count() > 0) {
    $items = $field_action_step_numbered_items->referencedEntities();
  }

  if (!empty($items)) {
    foreach ($items as $id => $item) {
      $list[$id] = [];
      $field_title = $item->get('field_title');
      $field_content = $item->get('field_content');

      if ($field_title->count() > 0) {
        $title = $field_title->first()->getValue();
        $list[$id]['title'] = $title['value'];
      }

      if ($field_content->count() > 0) {
        $content = $field_content->first()->view('full');
        $list[$id]['rteElements'][] = [
          'path' => '@atoms/11-text/raw-html.twig',
          'data' => [
            'rawHtml' => [
              'content' => $content,
            ],
          ],
        ];
      }
    }
  }
  $variables['actionSeqLists'] = $list;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Clean css id for subheads.
 */
function mass_theme_preprocess_paragraph__subhead(&$variables) {
  $subhead = $variables['paragraph']->get('field_title')->first()->getValue()['value'];
  $subhead_clean = strtolower($subhead);
  $subhead_clean = Html::cleanCssIdentifier($subhead_clean);
  $variables['title_clean'] = $subhead_clean;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for action step paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step(&$variables) {
  $paragraph = $variables['paragraph'];
  $terms = Helper::getReferencedEntitiesFromField($paragraph, 'field_para_icon_term');
  $variables['icon_path'] = (!empty($terms)) ? Helper::getIconPathFromIconTerm(reset($terms)) : Helper::getIconPath('');
  $field_title = $paragraph->get('field_title');
  $field_content = $paragraph->get('field_content');

  if ($field_title->count() > 0) {
    $title = $field_title->first()->getValue();
    $variables['title'] = $title['value'];
  }

  if ($field_content->count() > 0) {
    $rich_text = $field_content->first()->view('full');
    $variables['rich_text'] = $rich_text['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_link(&$variables) {
  $url = $variables['paragraph']->get('field_link')->first()->getUrl();

  $variables['calloutLink']['text'] = $variables['paragraph']->get('field_link')->first()->getValue()['title'];
  $variables['calloutLink']['href'] = $url->toString();
  $variables['calloutLink']['type'] = (UrlHelper::isExternal($url->toString())) ? 'external' : 'internal';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link - need-to-know paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_alert(&$variables) {
  $link = Helper::separatedLinks($variables['paragraph'], 'field_link');

  $variables['calloutAlert']['decorativeLink'] = $link[0];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Deliver a image style uri to our search band twig template.
 */
function mass_theme_preprocess_paragraph__search_band(&$variables) {
  $paragraph = $variables['paragraph'];
  $image = isset($paragraph->field_image->entity) ? $paragraph->field_image->entity : NULL;
  $variables['search1600x400_image_url'] = $image ? ImageStyle::load('hero1600x800')->buildUrl($image->getFileUri()) : NULL;
  $variables['search800x400_image_url'] = $image ? ImageStyle::load('hero800x400')->buildUrl($image->getFileUri()) : NULL;

  // Grab node title incase we don't have a title in band.
  $node = \Drupal::request()->attributes->get('node');
  if ($node && is_object($node)) {
    $variables['title'] = $node->label();
    $variables['intro'] = $node->field_lede->value;
  }

  $items = [];
  if (!$variables['paragraph']->get('field_link_six')->isEmpty()) {
    $popular_searches = $variables['paragraph']->get('field_link_six');

    // Roll up our popular searches links for search band.
    foreach ($popular_searches as $link) {
      $items[] = [
        'href' => $link->getUrl()->toString(),
        'text' => $link->computed_title,
        'chevron' => 'true',
      ];
    }
  }

  $variables['items'] = $items;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout button paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_button(&$variables) {

  if (!$variables['paragraph']->get('field_link')->isEmpty()) {
    $links = $variables['paragraph']->get('field_link');
    $items = [];

    foreach ($links as $link) {
      // If the linked item was deleted, $link may not exist.
      if ($link) {
        $items[] = [
          'text' => $link->computed_title,
          'href' => $link->getUrl()->toString(),
          'type' => (UrlHelper::isExternal($link->getUrl()
            ->toString())) ? 'external' : 'internal',
        ];
      }
    }

    $variables['buttonMinors'] = $items;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sets up banner elements for full_bleed paragraphs.
 */
function mass_theme_preprocess_paragraph__full_bleed(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_full_bleed_ref = $paragraph->get('field_full_bleed_ref');
  if ($field_full_bleed_ref) {
    $items = $field_full_bleed_ref->referencedEntities();
    if (!empty($items)) {
      foreach ($items as $item) {
        if ($item->getType() == 'slideshow') {
          $image_field = $item->get('field_slideshow');
          $image_count = $image_field->count();
          $images = [];
          foreach ($image_field as $id => $image) {
            $value = $image->getValue();
            $image_small = Helper::getFieldImageUrl($item, 'action_banner_small', 'field_slideshow', $id);
            $image_large = Helper::getFieldImageUrl($item, 'action_banner_large', 'field_slideshow', $id);
            $images[$id] = [
              'image' => $image_small,
              'imageLarge' => $image_large,
              'alt' => $value['alt'],
            ];
          }

          $variables['images'] = $images;
          $variables['image_count'] = $image_count;
        }
        elseif ($item->getType() == 'iframe' || $item->getType() == 'map') {
          $map = $item;
          $id = $item->id;

          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
          $build = $view_builder->view($item, 'extended_header');
          $variables['map'] = $build;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_link_formatter_link_separate().
 *
 * Separate title and link for rendering in template
 * Default template: link-formatter-link-separate.html.twig.
 */
function mass_theme_preprocess_link_formatter_link_separate(&$variables) {
  $variables['fieldLink']['text'] = $variables['title'];
  $variables['fieldLink']['href'] = $variables['url'];
  $variables['fieldLink']['type'] = $variables['url']->isExternal() ? 'external' : 'internal';
}

/**
 * Provide the URL of an image.
 *
 * @param object $node
 *   The node with the field on it.
 * @param string $style_name
 *   The name of an image style.
 * @param string $field
 *   The name of an the image field.
 *
 * @return string
 *   The URL to the styled image, or to the original image if the style does not
 *   exist.
 */
function mass_theme_get_field_image_url($node, $style_name = NULL, $field = NULL, $id = 0) {
  $url = '';

  $fields = $node->get($field);
  if ($fields) {
    $images = $fields->referencedEntities();
  }

  if (!empty($images)) {
    $image = $images[$id];

    if (!empty($style_name) && ($style = ImageStyle::load($style_name))) {
      $url = $style->buildUrl($image->getFileUri());
    }
    else {
      $url = $image->url();
    }
  }

  return $url;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_group(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_layout = $paragraph->get('field_contact_group_layout');

  if ($field_layout->count() > 0) {
    $layout = $field_layout->first()->getValue();
    $variables['layout'] = $layout['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_info(&$variables) {
  $paragraph = $variables['paragraph'];
  // Ensure contact changes invalidate this render.
  (new CacheableMetadata())->addCacheableDependency($paragraph)
    ->applyTo($variables);
  $field_address = $paragraph->get('field_address');

  if ($field_address->count() > 0) {
    $address = $field_address->first()->getValue();
    $address_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['address_url'] = $address_url;
  }

  $svg_types = [
    'phone' => ['class' => 'svg-phone', 'svg' => 'phone'],
    'laptop' => ['class' => 'svg-laptop', 'svg' => 'laptop'],
    'mail' => ['class' => 'svg-mail', 'svg' => 'mail'],
    'profile' => ['class' => 'svg-profile', 'svg' => 'profile'],
  ];

  $field_type = $paragraph->get('field_type');

  if ($field_type->count() > 0) {
    $type = $field_type->first()->getValue();
    $svg_type = '';

    switch ($type['value']) {
      case 'phone';
      case 'fax':
        $svg_type = $svg_types['phone'];
        break;

      case 'online':
        $svg_type = $svg_types['laptop'];
        break;

      case 'email';
      case 'mail':
        $svg_type = $svg_types['mail'];
        break;

      case 'branch_location':
        $svg_type = $svg_types['profile'];
        break;

    }
    $variables['svg_type'] = $svg_type;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact(&$variables) {
  if ($variables['paragraph']->get('field_phone')->first()) {
    $phone = $variables['paragraph']->get('field_phone')->first()->getValue()['value'];
    $variables['phone_clean'] = preg_replace('/[^0-9]+/', '', $phone);
  }
  if ($variables['paragraph']->get('field_fax')->first()) {
    $fax = $variables['paragraph']->get('field_fax')->first()->getValue()['value'];
    $variables['fax_clean'] = preg_replace('/[^0-9]+/', '', $fax);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__action_address(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_address_url = $paragraph->get('field_address_url');

  if ($field_address_url->count() > 0) {
    $address = $field_address_url->first()->getValue();
    $direction_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['direction_url'] = $direction_url;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for downloads.
 */
function mass_theme_preprocess_paragraph__file_download(&$variables) {
  $cache_tags = [];
  if (isset($variables['paragraph'])) {
    $paragraph = $variables['paragraph'];

    $variables = [
      'theme_hook_original' => $variables['theme_hook_original'],
      'formDownloads' => Organisms::prepareFormDownloads($paragraph, [], $cache_tags),
    ];
  }
  if (!empty($cache_tags)) {
    // Add the cache tags to the render array.
    $variables['#cache']['tags'] = $cache_tags;
  }
}

/**
 * Helper function to sort a list of items by title.
 */
function compare_by_title($a, $b) {
  return strcasecmp($a['content']['#title'], $b['content']['#title']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sort items array case insensitively, since twig won't.
 */
function mass_theme_preprocess_field__field_topic_callout_links(&$variables) {
  if (isset($variables['element']['#view_mode']) && $variables['element']['#view_mode'] == 'teaser') {
    // Don't have to do anything with this since usort acts on the actual
    // array but returns a boolean.
    $items_lower = usort($variables['items'], 'compare_by_title');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions for Footer Menus.
 */
function mass_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (!empty($variables['menu_name']) && strpos($variables['menu_name'], 'footer') > -1) {
    $suggestions[] = "menu__footer_layout";
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions to fields for separate view modes.
 */
function mass_theme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#view_mode'];

  $suggestions[] = 'field__' .
    $variables['element']['#entity_type'] . '__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#bundle'] . '__' .
    $variables['element']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add title to 3up Container from the current page.
 */
function mass_theme_preprocess_ma_section3up_container_style(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['label'] = $title;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Parse file attributes for file link template.
 * Default template: file-link.html.twig.
 */
function mass_theme_preprocess_file_link(&$variables) {
  // Get file attributes for ct.action file download links.
  $file = $variables['file'];
  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);

  // Get the human readable file size.
  $bytes = $file->getSize();
  $readable_size = format_size($bytes);
  $variables['download']['size'] = $readable_size;

  // Use the description as the link text if available,
  // if not, use the file name.
  $filename = $file_entity->getFilename();
  if (empty($variables['description'])) {
    $variables['download']['linktext'] = $filename;
  }
  else {
    $variables['download']['linktext'] = $variables['description'];
  }

  // Set the file link variable.
  $variables['download']['link'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file_entity->getFileUri());

  // Get the file extension.
  // see: http://php.net/manual/en/splfileinfo.getextension.php
  $file_info = new SplFileInfo($filename);
  $file_extension = $file_info->getExtension();

  // Set the file type based on extesnion.
  $variables['download']['filetype'] = $file_extension;

  // Set the icon name.
  $file_extension = strtoupper($file_info->getExtension());
  $file_icon = 'doc-' . strtolower($file_extension);
  if (!in_array($file_extension, ['PDF', 'DOCX', 'XLSX'])) {
    $file_icon = 'doc-generic';
  }
  $variables['download']['iconName'] = $file_icon;
}

/**
 * Implements template_preprocess_views_view().
 */
function mass_theme_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $variables['title'] = ['#markup' => $view->getTitle()];
  $variables['row_count'] = 0;
  $variables['filter_value'] = '';

  if (isset($variables['exposed']['filter']['#value'])) {
    $variables['filter_value'] = $variables['exposed']['filter']['#value'];
  }
  if (isset($variables['rows'][0]['#rows'])) {
    $variables['row_count'] = count($variables['rows'][0]['#rows']);
  }

  // Add a class to the submit button.
  if (isset($variables['exposed']['actions']['submit'])) {
    $variables['exposed']['actions']['submit']['#attributes']['class'][] = 'ma__button ma__button-submit';
  }
  // Add a class to the reset button.
  if (isset($variables['exposed']['actions']['reset'])) {
    $variables['exposed']['actions']['reset']['#attributes']['class'][] = 'ma__button ma__button--quaternary ma__button-reset';
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_views_view_page() or foo_preprocess_views_view_block().
  $function = __FUNCTION__ . '_' . $variables['id'] . '_' . $variables['display_id'];
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Preprocess entity_embed_container template.
 */
function mass_theme_preprocess_entity_embed_container(array &$variables) {
  // image_loading is hidden from entity_embed dialog.
  // See docroot/themes/custom/mass_admin_theme/mass_admin_theme.theme:27
  // This code will prevent warnings for the content that already
  // has image_loading attribute set.
  // @TODO Remove this code when entity_embed start supporting lazy loading attribute.
  if (isset($variables['attributes']['data-entity-embed-display-settings']['image_loading'])) {
    unset($variables['attributes']['data-entity-embed-display-settings']['image_loading']);
  }
}

/**
 * Populates $variables for a collection header image from a $collection_term.
 */
function _mass_theme_populate_collection_image_from_collection($collection_term, &$variables) {
  if (!isset($collection_term->field_collection_logo) || $collection_term->field_collection_logo->isEmpty()) {
    return;
  }

  $collection_logo = $collection_term->field_collection_logo[0] ?? FALSE;
  $file_url_generator = \Drupal::service('file_url_generator');
  $file_url = $file_url_generator->generateAbsoluteString($collection_logo->entity->uri->value);
  $variables['image'] = ['src' => $file_url];

  $alt = $collection_logo->getValue()['alt'] ?? FALSE;
  if (!$alt) {
    return;
  }
  $variables['image']['alt'] = $alt;
}

/**
 * Adds variables to views-view--data-listing.html.
 */
function mass_theme_preprocess_views_view_collection_all_page_all(&$variables) {
  $collection = \Drupal::routeMatch()->getParameter('collection');
  if (!$collection) {
    return;
  }

  // Get collection terms matching the field_url_name
  $query = Drupal::entityQuery('taxonomy_term');
  $query
    ->accessCheck(FALSE)
    ->condition('vid', 'collections')
    ->condition('field_url_name', $collection)
    ->range(0, 1);

  $res = $query->execute();
  if (!$res) {
    return;
  }

  $tid = reset($res);
  $term = Term::load($tid);

  /** @var \Drupal\Core\Entity\EntityViewBuilder $view_builder */
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('taxonomy_term');
  $build = $view_builder->build($view_builder->view($term));
  $variables['term'] = $term;
  $variables['bg_color'] = $term->field_header_color->value ?: '#FFF';
  $variables['content'] = $build;
  $variables['collection']['title'] = $term->label();
  $variables['collection']['description'] = $build['field_short_description'];
  $variables['collection']['bg_color'] = $variables['bg_color'];
  $variables['collection']['dark_font'] = $variables['bg_color'] === '#FFF';
  _mass_theme_populate_collection_image_from_collection($term, $variables['collection']);
}

/**
 * Implements template_preprocess_views_view().
 *
 * @see mass_theme_theme_suggestions_alter()
 */
function mass_theme_preprocess_views_view_locations_page(&$variables) {
  $view = $variables['view'];
  $view_result = $view->result;

  if ($nid = $view->args[0]) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

    if ($node) {
      if ($node->hasField('field_organizations')) {
        $variables['organizations'] = $node->field_organizations->view();
      }
      $node_title = $node->label();
      // Set appropriate page title.
      if ($node->getType() == "location") {
        $page_title = t('Other locations related to @title', ['@title' => $node_title]);
      }
      else {
        $page_title = $node_title . ' Locations';
      }

      $variables['pageHeader'] = [
        'title' => $page_title,
        'divider' => FALSE,
        'headerTags' => [
          'label' => 'More about:',
          'taxonomyTerms' => [
            [
              'href' => $node->toUrl(),
              'text' => $node_title,
            ],
          ],
        ],
      ];
    }
  }

  $query = \Drupal::request()->query;
  $variables['helper'] = $query->get('helper') ?: '';
  $icons = $query->get('icons') ?: 'All';
  $variables['icons'] = ($icons == 'All') ? FALSE : TRUE;

  if (!empty($view_result)) {

    // Array for mapping Contact entities to corresponding Location entities.
    $contact_location_map = [];

    $contact_ids = [];
    foreach ($view_result as $result) {
      $location = $result->_entity;
      foreach ($location->field_ref_contact_info_1 as $contactRef) {
        $contactId = $contactRef->target_id;
        $contact_ids[] = $contactId;
        $contact_location_map[$contactId] = $location;
      }
    }
    // Batch load contact entities all at once.
    $contact_entities = Node::loadMultiple($contact_ids);
    $variables['leafletMap'] = Molecules::prepareGoogleMapFromContacts($contact_entities, $contact_location_map);
    if ($node_title) {
      $variables['leafletMap']['title'] = t('Map for @title', ['@title' => $node_title]);
    }
  }
}

/**
 * Implements template_preprocess_form_element_label().
 */
function mass_theme_preprocess_form_element_label(&$variables) {
  // Add a class to the form element label for a views exposed filter title
  // field.
  switch ($variables['element']['#id']) {
    case 'edit-title':
      $variables['attributes']['class'][] = 'ma__sidebar-heading ma__legend';
      break;

    case 'edit-sort-bef-combine':
      unset($variables['title']);
      break;
  }
}

/**
 * Implements template_preprocess_fieldset().
 */
function mass_theme_preprocess_fieldset(&$variables) {
  // Add a class to the form fieldset legend span for a views exposed filter
  // topicid field.
  if ($variables['element']['#id'] === 'edit-topicid') {
    $variables['legend_span']['attributes']->addClass('ma__sidebar-heading ma__label');
  }
}

/**
 * Implements template_preprocess_views_view().
 *
 * @see mass_theme_theme_suggestions_alter()
 */
function mass_theme_preprocess_views_view__press_listing(&$variables) {
  // Prepare views header elements.
  $headerElements = Helper::prepareViewsHeader($variables['view']);

  // Prepare views header tag.
  if (!empty($headerElements['subTitle'])) {
    $variables['subTitle'] = $headerElements['subTitle'];
  }

  // Prepare views header tag.
  if (!empty($headerElements['headerTags'])) {
    $variables['headerTags'] = $headerElements['headerTags'];
  }

  // Sets the subtitle to be inside the h1 tag.
  if ($variables['title'] == "News and Announcements") {
    $variables['nested'] = TRUE;
  }
  else {
    $variables['nested'] = FALSE;
  }

  // Calculates values for Results Heading molecule in Mayflower style guide.
  // @see views-view--image-promos.html.twig
  $variables['resultsHeading'] = Helper::prepareViewsPager($variables['view']);

  if (empty($variables['rows'])) {
    throw new NotFoundHttpException();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_events_page(&$variables) {
  $variables['events'] = Helper::prepareEvents($variables['events']);

  $total_pages = ceil(count($variables['events']) / 10);
  $pages = [];
  foreach (range(1, $total_pages) as $page) {
    $pages[] = [
      'active' => FALSE,
      'text' => $page,
    ];
  }
  if ($pages) {
    $pages[0]['active'] = TRUE;
  }
  $variables['pages'] = $pages;
}

/**
 * Implements template_preprocess_views_view_list().
 */
function mass_theme_preprocess_views_view_list(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];

  if ($view->storage->id() == 'subtopics_all_actions') {
    $nodes = [];

    foreach ($rows as $row) {
      $result = $row['content']['#row'];
      $nid = $result->nid;

      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $storage->load($nid);
      $build = $view_builder->view($node, 'teaser_simple');
      $nodes[] = $build;
    }
    $variables['nodes'] = $nodes;
  }
}

/**
 * Implements template_preprocess_views_view().
 *
 * @see mass_theme_theme_suggestions_alter()
 */
function mass_theme_preprocess_views_view__image_promos(&$variables) {
  // Prepare views header elements.
  $headerElements = Helper::prepareViewsHeader($variables['view']);

  if (!empty($headerElements['subTitle'])) {
    // Prepare views header tag.
    $variables['subTitle'] = $headerElements['subTitle'];
  }

  if (!empty($headerElements['headerTags'])) {
    // Prepare views header tag.
    $variables['headerTags'] = $headerElements['headerTags'];
  }

  $variables['resultsHeading'] = Helper::prepareViewsPager($variables['view']);

  if (empty($variables['rows'])) {
    throw new NotFoundHttpException();
  }
}

/**
 * Implements template_preprocess_views_view_field().
 *
 * @see mass_theme_theme_suggestions_alter()
 */
function mass_theme_preprocess_views_view_field__image_promos__string(&$variables) {
  $type = '';
  $options = $variables['view']->style_plugin->options;

  if (array_key_exists('type', $options)) {
    $type = $options['type'];
  }

  $node = reset($variables['row']->_relationship_entities);
  if ($type == 'ref_reverse') {
    $node = $variables['row']->_entity;
  }

  if (!empty($node) && $node instanceof Node && $node->hasField($variables['field']->field)) {
    $variables['node'] = $node;
  }
}

/**
 * Implements template_preprocess_views_view_field().
 *
 * @see mass_theme_theme_suggestions_alter()
 */
function mass_theme_preprocess_views_view_field__image_promos__string__title(&$variables) {
  // Assembles array needed for outputting a Decorative Link design pattern.
  // @see http://mayflower.digital.mass.gov/?p=atoms-decorative-link
  // Fetches referenced node from View result row.
  $type = '';
  $options = $variables['view']->style_plugin->options;

  if (array_key_exists('type', $options)) {
    $type = $options['type'];
  }

  $node = reset($variables['row']->_relationship_entities);
  if ($type == 'ref_reverse') {
    $node = $variables['row']->_entity;
  }

  if (!empty($node) && $node instanceof Node) {
    $title = $node->label();
    $href = UrlHelper::filterBadProtocol($node->toUrl()->toString());
    $variables['decorativeLink'] = [
      'text' => $title,
      'info' => $title,
      'href' => $href,
    ];
  }
}

/**
 * Implements template_preprocess_views_view_field().
 *
 * @see mass_theme_theme_suggestions_alter()
 */
function mass_theme_preprocess_views_view_field__image_promos__entity_reference_label(&$variables) {
  // Assembles array needed for outputting a Decorative Link design pattern.
  // @see http://mayflower.digital.mass.gov/?p=atoms-decorative-link
  // Fetches referenced node from View result row.
  $node = reset($variables['row']->_relationship_entities);
  if (!empty($node) && $node instanceof Node) {
    $title = $node->label();
    $href = UrlHelper::filterBadProtocol($node->toUrl()->toString());
    $variables['decorativeLink'] = [
      'text' => $title,
      'info' => $title,
      'href' => $href,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-subtopics-all-actions-block-1') {
    if (isset($form['actions']['submit']['#attributes'])) {
      $attributes = $form['actions']['submit']['#attributes'];
      $form['actions']['submit']['#attributes'] = $attributes + ['data-theming-id' => 'filter-submit'];
    }
    else {
      $form['actions']['submit']['#attributes'] = ['data-theming-id' => 'filter-submit'];
    }
  }

  if ($form['#id'] == 'views-exposed-form-locations-page') {
    $form['helper'] = [
      '#type' => 'textfield',
      '#title' => 'Helper',
      '#size' => 60,
    ];

    $form['lat'] = [
      '#type' => 'textfield',
      '#title' => 'Lat.',
      '#size' => 60,
    ];

    $form['lng'] = [
      '#type' => 'textfield',
      '#title' => 'Lng.',
      '#size' => 60,
    ];

  }
}

/**
 * Check for icon twig templates.
 *
 * @deprecated Deprecated since 8/16/18 - Just pass the string name of the icon
 *   directly instead of using this function.
 */
function icon_path($icon) {
  $icon_path = DRUPAL_ROOT . '/' . mayflower_get_path() . '/assets/images/icons/';

  if (file_exists($icon_path . strtolower($icon) . '.svg')) {
    return strtolower($icon);
  }

  return 'marker';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds a page template hook suggestion per content type.
 */
function mass_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  $node = \Drupal::request()->attributes->get('node');

  // When loading a revision only the nid is returned. We need the object.
  if (ctype_digit($node)) {
    $node = Node::load($node);
  }

  $is_error_page = FALSE;

  if ($node) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
    // Provide a page template that doesn't include the <main> element for types that include that in the extended
    // mayflower template.
    $without_main = [
      'binder',
      'info_details',
      'guide_page',
      'service_page'
    ];
    if (in_array($node->getType(), $without_main)) {
      array_splice($suggestions, 1, 0, 'page__node__without_main');
    }
    if ($node->getType() === 'error_page') {
      $is_error_page = TRUE;
    }
  }
  $path_args = explode('/', trim(\Drupal::service('path.current')->getPath(), '/'));
  // Use a simplified layout for /user* and /tfa*.
  if (!$is_error_page && ($path_args[0] === 'user' || $path_args[0] === 'tfa')) {
    $suggestions[] = 'page__simple';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare icon link values for template.
 */
function mass_theme_preprocess_paragraph__icon_links(&$variables) {
  $items = [];
  if (!$variables['paragraph']->get('field_icon_link')->isEmpty()) {
    $icon_links = $variables['paragraph']->get('field_icon_link')->referencedEntities();
    foreach ($icon_links as $icon_link) {
      $icon_name = current($icon_link->get('field_para_icon_term')->referencedEntities())->get('field_sprite_name')->value;
      $link = $icon_link->get('field_link_single')->first()->getValue();
      $icon_path = Helper::getIconPath($icon_name);
      $items[] = [
        'icon' => $icon_path,
        'link' => [
          'href' => $link['uri'],
          'text' => $link['title'],
          'chevron' => '',
        ],
      ];
    }
  }

  $variables['iconLinks']['items'] = $items;
}

/**
 * Language config for Google translate.
 */
function mass_theme_googletranslate_options_languages() {
  $language_codes = [
    'aa' => 'Afar',
    'ab' => 'Abkhazian',
    'af' => 'Afrikaans',
    'am' => 'Amharic',
    'ar' => 'Arabic',
    'as' => 'Assamese',
    'ay' => 'Aymara',
    'az' => 'Azerbaijani',
    'ba' => 'Bashkir',
    'be' => 'Byelorussian',
    'bg' => 'Bulgarian',
    'bh' => 'Bihari',
    'bi' => 'Bislama',
    'bn' => 'Bengali/Bangla',
    'bo' => 'Tibetan',
    'br' => 'Breton',
    'ca' => 'Catalan',
    'cv' => 'Cape Verdean Creole',
    'co' => 'Corsican',
    'cs' => 'Czech',
    'cy' => 'Welsh',
    'da' => 'Danish',
    'de' => 'German',
    'dz' => 'Bhutani',
    'el' => 'Greek',
    'eo' => 'Esperanto',
    'es' => 'Spanish',
    'et' => 'Estonian',
    'eu' => 'Basque',
    'fa' => 'Persian',
    'fi' => 'Finnish',
    'fj' => 'Fiji',
    'fo' => 'Faeroese',
    'fr' => 'French',
    'fy' => 'Frisian',
    'ga' => 'Irish',
    'gd' => 'Scots/Gaelic',
    'gl' => 'Galician',
    'gn' => 'Guarani',
    'gu' => 'Gujarati',
    'ha' => 'Hausa',
    'hi' => 'Hindi',
    'hr' => 'Croatian',
    'hu' => 'Hungarian',
    'ht' => 'Haitian Creole',
    'hy' => 'Armenian',
    'ia' => 'Interlingua',
    'ie' => 'Interlingue',
    'ik' => 'Inupiak',
    'in' => 'Indonesian',
    'is' => 'Icelandic',
    'it' => 'Italian',
    'iw' => 'Hebrew',
    'ja' => 'Japanese',
    'ji' => 'Yiddish',
    'jw' => 'Javanese',
    'ka' => 'Georgian',
    'kk' => 'Kazakh',
    'kl' => 'Greenlandic',
    'km' => 'Cambodian',
    'kn' => 'Kannada',
    'ko' => 'Korean',
    'ks' => 'Kashmiri',
    'ku' => 'Kurdish',
    'ky' => 'Kirghiz',
    'la' => 'Latin',
    'ln' => 'Lingala',
    'lo' => 'Laothian',
    'lt' => 'Lithuanian',
    'lv' => 'Latvian/Lettish',
    'mg' => 'Malagasy',
    'mi' => 'Maori',
    'mk' => 'Macedonian',
    'ml' => 'Malayalam',
    'mn' => 'Mongolian',
    'mo' => 'Moldavian',
    'mr' => 'Marathi',
    'ms' => 'Malay',
    'mt' => 'Maltese',
    'my' => 'Burmese',
    'na' => 'Nauru',
    'ne' => 'Nepali',
    'nl' => 'Dutch',
    'no' => 'Norwegian',
    'oc' => 'Occitan',
    'om' => '(Afan)/Oromoor/Oriya',
    'pa' => 'Punjabi',
    'pl' => 'Polish',
    'ps' => 'Pashto/Pushto',
    'pt' => 'Portuguese',
    'qu' => 'Quechua',
    'rm' => 'Rhaeto-Romance',
    'rn' => 'Kirundi',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'rw' => 'Kinyarwanda',
    'sa' => 'Sanskrit',
    'sd' => 'Sindhi',
    'sg' => 'Sangro',
    'sh' => 'Serbo-Croatian',
    'si' => 'Singhalese',
    'sk' => 'Slovak',
    'sl' => 'Slovenian',
    'sm' => 'Samoan',
    'sn' => 'Shona',
    'so' => 'Somali',
    'sq' => 'Albanian',
    'sr' => 'Serbian',
    'ss' => 'Siswati',
    'st' => 'Sesotho',
    'su' => 'Sundanese',
    'sv' => 'Swedish',
    'sw' => 'Swahili',
    'ta' => 'Tamil',
    'te' => 'Tegulu',
    'tg' => 'Tajik',
    'th' => 'Thai',
    'ti' => 'Tigrinya',
    'tk' => 'Turkmen',
    'tl' => 'Tagalog',
    'tn' => 'Setswana',
    'to' => 'Tonga',
    'tr' => 'Turkish',
    'ts' => 'Tsonga',
    'tt' => 'Tatar',
    'tw' => 'Twi',
    'uk' => 'Ukrainian',
    'ur' => 'Urdu',
    'uz' => 'Uzbek',
    'vi' => 'Vietnamese',
    'vo' => 'Volapuk',
    'wo' => 'Wolof',
    'xh' => 'Xhosa',
    'yo' => 'Yoruba',
    'zh-CN' => 'Chinese',
    'zh-TW' => 'Chinese, Traditional',
    'zu' => 'Zulu'
  ];
  return $language_codes;
}

/**
 * Add languages to theme settings.
 */
function mass_theme_form_system_theme_settings_alter(&$form, $form_state) {
  $languages = mass_theme_googletranslate_options_languages();

  $form['mass_theme_settings'] = [
    '#type' => 'details',
    '#title' => t('Languages'),
    '#open' => TRUE,
  ];

  $form['mass_theme_settings']['languages'] = [
    '#type' => 'checkboxes',
    '#options' => $languages,
    '#title' => t('Choose google translate languages?'),
    '#default_value' => theme_get_setting('languages', 'mass_theme'),
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mass_theme_theme_suggestions_textarea_alter(array &$suggestions, array $variables) {
  // Use a "special" template for these contact form fields. This prevents
  // Mayflower's `textarea.twig` from getting used, since it doesn't render
  // Drupal's attributes properly.  The "special" template just extends stable.
  $contact_textareas = [
    'field_reason_flagged[0][value]',
    'message[0][value]',
  ];
  if (in_array($variables['element']['#name'], $contact_textareas)) {
    $suggestions[] = 'textarea__drupal';
  }
}

/**
 * Prepares variables for media templates.
 *
 * Default template: media.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - media: An individual media for display.
 */
function mass_theme_preprocess_media(array &$variables) {
  $src = '';

  // Do something special for document bundle.
  $media_bundle = $variables['elements']['#media']->bundle();

  if (isset($variables['elements']['field_media_video_embed_field'][0]['children']['#url'])) {
    $src = $variables['elements']['field_media_video_embed_field'][0]['children']['#url'];

    // Set static pageHeader properties to pass to prepare function.
    $pageHeader_options = [
      'category' => 'transcript',
    ];

    // Make pageBanner data object available in twig template.
    $variables['pageHeader'] = Organisms::preparePageHeader($variables['elements']['#media'], $pageHeader_options);

    $variables['video'] = [
      'src' => $src,
      'label' => Helper::fieldValue($variables['elements']['#media'], 'name'),
      'width' => '',
      'height' => '',
      'link' => NULL,
      'position' => '',
    ];

    $back_url = \Drupal::request()->server->get('HTTP_REFERER');
    $current_path = \Drupal::service('path.current')->getPath();
    global $base_url;

    if (!empty($back_url) && $back_url != $base_url . $current_path) {
      $variables['backButton'] = [
        'link' => [
          'href' => $back_url,
          'text' => t('Back to previous page'),
          'info' => t('Back to page about Blah'),
        ],
      ];
    }

    $variables['richText'] = [
      'rteElements' => [
        [
          'path' => '@atoms/11-text/paragraph.twig',
          'data' => [
            'paragraph' => [
              'text' => Helper::fieldValue($variables['elements']['#media'], 'field_video_description'),
            ],
          ],
        ],
      ],
    ];
  }

  // Optionally, run media-type-specific preprocess functions, like
  // foo_preprocess_media_bundle() or foo_preprocess_media_documents().
  $function = __FUNCTION__ . '_' . $media_bundle;
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Preprocess document media bundles.
 *
 * @param array $variables
 *   An associative array containing:
 *   - media: An individual media for display.
 */
function mass_theme_preprocess_media_document(array &$variables) {
  /** @var \Drupal\mass_content\Entity\Bundle\media\DocumentBundle $media */
  $media = $variables['elements']['#media'];
  $variables = array_merge($variables, Molecules::prepareDownloadLink($media));
  if ($variables['elements']['#view_mode'] == 'full') {
    $display_fields = [];

    // Create rows for listTable.
    $list_table_rows = [];

    // Get the attached file from the media entity.
    if ($media_file_changed_time = $media->getFileChangedTime()) {
      $list_table_rows[] = [
        'label' => 'Last Updated:',
        'text' => $media_file_changed_time,
      ];
    }

    $language = $media->language();

    $display_fields = [
      'langcode' => [
        'label' => 'Language:',
        'text' => $language ? $language->getName() : '',
      ],
    ];
    if (isset($media->field_organizations)) {
      /** @var \Drupal\node\Entity\Node[] $org_nodes */
      $org_nodes = $media->field_organizations->referencedEntities();
      if (!empty($org_nodes)) {
        $labels = [];
        /** @var \Drupal\Core\StringTranslation\TranslationManager $translation_manager */
        $translation_manager = \Drupal::service('string_translation');
        foreach ($org_nodes as $org) {
          $labels[] = $org->label();
        }
        $row_label = $translation_manager->formatPlural(
          count($org_nodes),
          'Contributing Organization',
          'Contributing Organizations');
        $display_fields['field_organizations'] = [
          'label' => $row_label,
          'text' => Html::escape(implode(', ', $labels)),
        ];
      }
    }

    foreach ($display_fields as $display_field => $display_values) {
      if (Helper::isFieldPopulated($media, $display_field)) {
        $list_table_rows[] = $display_values;
      }
    }
    $variables['curated_rows'] = $list_table_rows;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare collection_search values for template.
 */
function mass_theme_preprocess_paragraph__collection_search(&$variables) {
  $variables['searchBoxWithLinks'] = [];
  $variables['searchBoxWithLinks']['form'] = [];

  $p = $variables['paragraph'];
  $variables['searchBoxWithLinks']['form']['headingText'] = $p->field_search_heading->value;
  $variables['searchBoxWithLinks']['form']['submitText'] = t('SEARCH');

  switch ($p->field_search_type->value) {
    case 'external':
      if ($param_name = $p->field_search_query_param_name->value) {
        $parsed_url = UrlHelper::parse($p->field_search_site_url->value);
        if (array_key_exists($param_name, $parsed_url['query'])) {
          unset($parsed_url['query'][$param_name]);
        }
        $action_url = Url::fromUri($parsed_url['path'], [
          'query' => $parsed_url['query'],
          'absolute' => TRUE,
          'https' => TRUE,
        ]);
        $variables['searchBoxWithLinks']['form']['actionUrl'] = $action_url->toString();
        $variables['searchBoxWithLinks']['form']['inputName'] = $param_name;
      }
      break;

    case 'collection':
      // In some rare cases field_url_name might be missing, so we set
      // default value to avoid warnings.
      $collection_url = '/';
      if ($p->field_collection->referencedEntities()[0]->field_url_name) {
        $collection_url = '/collections/' . $p->field_collection->referencedEntities()[0]->field_url_name->value;
      }
      $variables['searchBoxWithLinks']['form']['actionUrl'] = $collection_url;
      $variables['searchBoxWithLinks']['form']['inputName'] = t('title');

      break;
  }

  $variables['searchBoxWithLinks']['form']['footerText'] = [
    'rteElements' => [
      Atoms::prepareTextField($p, 'field_search_footer'),
    ],
  ];

  if (!$p->field_search_related_info->isEmpty()) {
    $variables['searchBoxWithLinks']['secondary']['relatedInfo'] = [
      'rteElements' => [
        Atoms::prepareTextField($p, 'field_search_related_info'),
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare video values for template.
 */
function mass_theme_preprocess_paragraph__video(&$variables) {
  $variables['video'] = Helper::getVideoAtomData($variables['paragraph']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepares icon value for each social link item.
 */
function mass_theme_preprocess_field__node__field_social_links(&$variables) {
  // Get icons for social links.
  $services = [
    'twitter',
    'facebook',
    'flickr',
    'blog',
    'linkedin',
    'google',
    'instagram',
    'medium',
    'youtube',
  ];

  foreach ($variables['items'] as $index => &$item) {
    $url = $item['content']['#url']->toString();
    foreach ($services as $service) {
      if (strpos($url, $service)) {
        $item['icon'] = Helper::getIconPath($service);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__board_member(&$variables) {
  $paragraph = $variables['paragraph'];

  // Get the referring field.
  $item = $paragraph->_referringItem->getParent();
  // If the referring field is the featured board members field, set the flag
  // to TRUE so the appropriate image size can be used in the template.
  if ($item->getName() == 'field_featured_board_members') {
    $variables['is_featured_board_member'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepares variables for the Alert pages.
 */
function mass_theme_preprocess_node_sitewide_alert(&$variables) {

  $node = $variables['node'];

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_alert_related_links_5')) {
    // Prepare the linkList data object.
    $linkList_options = [
      'heading' => [
        'title' => t('Related Links'),
        'type' => 'compHeading',
      ],
    ];
    $variables['linkList'] = Organisms::preparelinkList($node, 'field_alert_related_links_5', $linkList_options);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepares variables for the Alert pages.
 */
function mass_theme_preprocess_node_alert(&$variables) {

  $node = $variables['node'];

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_alert_related_links_5')) {
    // Prepare the linkList data object.
    $linkList_options = [
      'heading' => [
        'title' => t('Related Links'),
        'type' => 'compHeading',
      ],
    ];
    $variables['linkList'] = Organisms::preparelinkList($node, 'field_alert_related_links_5', $linkList_options);
  }
}

/**
 * Determines if a paragraph's parent field is field_header.
 */
function mass_theme_campaign_landing_paragraph_set_header_level(array &$variables) {
  $variables['level'] = 2;
  $parent_field = $variables['paragraph']->parent_field_name->value;
  if ($parent_field === 'field_header') {
    $variables['level'] = 1;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__key_message(array &$variables) {
  mass_theme_build_key_message_component($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__key_message_section(array &$variables) {
  mass_theme_build_key_message_component($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_build_key_message_component(array &$variables) {
  mass_theme_campaign_landing_paragraph_set_header_level($variables);
  $paragraph = $variables['paragraph'];
  $variables['button'] = [];
  // Color mapping to their appropriate styles.
  $colors = [
    'dark_blue' => 'c-primary',
    'light_blue' => 'c-primary-lightest',
    'dark_green' => 'c-primary-alt',
    'light_green' => 'c-primary-alt-lightest',
    'white' => 'c-white',
    'light_grey' => 'c-gray-lightest',
  ];
  // @TODO: Setup the button style to pass through once the designs are ready.
  if (!empty($paragraph->field_button->title)) {
    $button = $variables['elements']['field_button'][0];
    $variables['button']['text'] = $button['#title'];
    $variables['button']['href'] = $button['#url']->toString();
  }

  $variables['halfImage'] = $paragraph->field_use_half_image->value ?? FALSE;

  if (!empty($paragraph->field_text_overlay_color->value)) {
    $variables['textOverlay'] = isset($colors[$paragraph->field_text_overlay_color->value]) ? $colors[$paragraph->field_text_overlay_color->value] : '';
  }
  if (!empty($paragraph->field_section_text_overlay_color->value)) {
    $variables['textOverlaySection'] = isset($colors[$paragraph->field_section_text_overlay_color->value]) ? $colors[$paragraph->field_section_text_overlay_color->value] : '';
  }
  $variables['backgroundColor'] = '';
  if (!empty($paragraph->field_background_type->value)) {
    if (!empty($paragraph->field_background_color->value)) {
      $variables['backgroundColor'] = isset($colors[$paragraph->field_background_color->value]) ? $colors[$paragraph->field_background_color->value] : '';
    }
    if (!empty($paragraph->field_section_background_color->value)) {
      $variables['backgroundColor'] = isset($colors[$paragraph->field_section_background_color->value]) ? $colors[$paragraph->field_section_background_color->value] : '';
    }

    $variables['componentId'] = 'ID' . $paragraph->id();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__video_with_header(array &$variables) {
  mass_theme_campaign_landing_paragraph_set_header_level($variables);
  $paragraph = $variables['paragraph'];
  $variables['isHeader'] = 1;
  $bg_color = $paragraph->get('field_video_header_bg_color')->getValue();
  $variables['backgroundColor'] = $bg_color[0]['value'];
  $variables['componentId'] = 'ID' . $paragraph->id();
  $variables['videoData'] = Helper::getVideoAtomData($variables['paragraph']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__video_with_section(array &$variables) {
  mass_theme_campaign_landing_paragraph_set_header_level($variables);
  $paragraph = $variables['paragraph'];
  $bg_color = $paragraph->get('field_video_section_bg_color')->getValue();
  $variables['backgroundColor'] = $bg_color[0]['value'];
  $variables['componentId'] = 'ID' . $paragraph->id();
  $variables['videoData'] = Helper::getVideoAtomData($variables['paragraph']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__campaign_features(&$variables) {
  // The preprocessing for this paragraph is done in the .theme file because
  // it is necessary to build the views for the sub-cards (single and 2up)
  // which are contained in separate paragraphs. These paragraphs need to be
  // contextually aware that they are rendered within a campaign feature in
  // order to get the proper styling and heading levels.
  $paragraph = $variables['paragraph'];
  $features = [
    'positionTop' => FALSE,
    'compHeading' => NULL,
    'campaignFullWidthFeature' => NULL,
    'campaignFeature2up' => NULL,
    'moreLink' => NULL,
  ];
  $level = 2;
  $parent_field = $paragraph->parent_field_name->value;
  if ($parent_field === 'field_header') {
    $level = 1;
    $features['positionTop'] = TRUE;
  }

  // Set the heading that appears before the three cards of the campaign
  // feature are rendered. If set, then increase the heading level value after
  // the values are set against $features.
  if (!$paragraph->field_main_heading->isEmpty()) {
    $features['compHeading'] = [
      'title' => $paragraph->field_main_heading->value,
      'level' => $level,
    ];
    $level += 1;
  }
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
  $large_card_entity = $paragraph->field_full_width_featured_item->entity;
  $large_card_render_array = $view_builder->build($view_builder->view($large_card_entity));
  $large_card_theme_values = mass_theme_featured_content_cards($large_card_render_array);
  $componentId = 'ID' . $paragraph->id();
  $features['campaignFullWidthFeature'] = $large_card_theme_values + [
    'id' => $componentId,
    'bgImage' => '',
    'mobileBgImage' => '',
    'level' => $level,
    'text' => $large_card_render_array['field_rich_text_description'],
  ];
  $small_cards = [];
  foreach ($paragraph->field_2up_featured_item as $small_card) {
    $small_card_render_array = $view_builder->build($view_builder->view($small_card->entity));
    $small_theme_values = mass_theme_featured_content_cards($small_card_render_array);
    $small_cards[] = $small_theme_values + [
      'bgImage' => '',
      'mobileBgImage' => '',
      'level' => $level,
      'text' => $small_card_render_array['field_rich_text_description'],
    ];
  }
  foreach ($paragraph->field_2up_featured_item_2 as $small_card) {
    $small_card_render_array = $view_builder->build($view_builder->view($small_card->entity));
    $small_theme_values = mass_theme_featured_content_cards($small_card_render_array);
    $small_cards[] = $small_theme_values + [
      'bgImage' => '',
      'mobileBgImage' => '',
      'level' => $level,
      'text' => $small_card_render_array['field_rich_text_description'],
    ];
  }
  $features['campaignFeature2up'] = $small_cards;

  if (!$paragraph->field_url->isEmpty()) {
    $features['moreLink'] = [
      'text' => $variables['elements']['field_url'][0]['#title'],
      'href' => $variables['elements']['field_url'][0]['#url']->toString(),
    ];
  }

  $variables['campaignFeature'] = $features;
}

/**
 * Add in common overlapping field values for featured content cards.
 */
function mass_theme_featured_content_cards(&$variables) {
  $paragraph = $variables['#paragraph'];
  if (isset($paragraph)) {
    $return_array = [
      'link' => '#',
      'thumbnail' => '',
    ];
    if (is_object($paragraph->field_image->entity)) {
      $return_array['thumbnail'] = $paragraph->field_image->entity->createFileUrl();
    }
    if (!$paragraph->field_url->isEmpty()) {
      $return_array['link'] = $paragraph->field_url->first()->getUrl()->toString();
    }
    $return_array['title'] = '';
    if (!$paragraph->field_main_heading->isEmpty()) {
      $return_array['title'] = $paragraph->field_main_heading->value;
    }
    return $return_array;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__featured_content_single_item(&$variables) {
  mass_theme_campaign_landing_paragraph_set_header_level($variables);
  mass_theme_featured_content_cards($variables);
}

/**
 * Fetch social links from parent org node.
 */
function mass_theme_preprocess_paragraph__social_media(&$variables) {
  $level = "2";
  $paragraph = $variables['paragraph'];
  if ($paragraph->parent_field_name->value == 'field_service_section_content') {
    if ($parent_paragraph = Paragraph::load($paragraph->parent_id->value)) {
      if (!$parent_paragraph->field_hide_heading->isEmpty() && $parent_paragraph->field_hide_heading->value != 1) {
        $level = "3";
      }
    }
  }
  $node = Helper::getParentNode($paragraph);
  $social_field_name = $node->bundle() == 'service_page' ? 'field_services_social_links' : 'field_social_links';
  $variables['social_links'] = $node && ($node->$social_field_name ?? FALSE) ?
    $node->$social_field_name->view() : [];
  $variables['level'] = $level;
}

/**
 * Fetch contact info and logo from parent org node.
 */
function mass_theme_preprocess_paragraph__organization_contact_logo(&$variables) {
  $paragraph = $variables['paragraph'];
  $node = Helper::getParentNode($paragraph);

  $variables['org_contact'] = $node->get('field_ref_contact_info_1')->view('contact_us');
  $variables['org_logo'] = $node->get('field_sub_brand')->view('logo_link');

}

/**
 * Fetch contact info from parent service node.
 */
function mass_theme_preprocess_paragraph__contact_placeholder(&$variables) {
  $paragraph = $variables['paragraph'];
  $node = Helper::getParentNode($paragraph);

  // Prepare the Contact Us field, if it's populated.
  if (Helper::isFieldPopulated($node, 'field_ref_contact_info')) {
    // Set up options for contact list.
    $contact_list_options = [
      'heading' => [
        'title' => '',
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];
    // Prepare the contactList data object.
    $variables['contactList'] = Organisms::prepareContactList($node, $contact_list_options);
  }
}

/**
 * Preprocess paragraph sections from services and organizations.
 */
function _mass_theme_preprocess_paragraph_sections(&$variables, $field) {
  // Define fields and paragraphs that should be wrapped, fields have priority over paragraphs.
  $wrap_paragraphs = ['iframe', 'caspio_embed', 'tableau_embed', 'image', 'stat'];
  $wrap_fields = ['field_tabl_wrapping', 'field_iframe_wrapping', 'field_image_wrapping', 'field_stat_wrapping'];
  $contained = ['rich_text'];

  $components = [];
  /** @var \Drupal\paragraphs\Entity\Paragraph */
  $container = $variables['paragraph'];
  /** @var \Drupal\paragraphs\Entity\Paragraph[] */
  $paragraphs = Helper::getReferencedEntitiesFromField($container, $field);

  for ($i = 0; $i < count($paragraphs); $i++) {
    $component = [];
    // If the current component has the "wrapping" field, group it with the following component and move the loop pointer.
    if (mass_theme_paragraphs_sections_check_wrapping_field($paragraphs[$i], $wrap_fields)) {
      $items = [];
      do {
        if (isset($paragraphs[$i])) {
          $items[] = $paragraphs[$i];
        }

        $i++;
        // Keep grouping together while the next element has the check.
      } while (isset($paragraphs[$i]) && mass_theme_paragraphs_sections_check_wrapping_field($paragraphs[$i], $wrap_fields));

      // Once done, also group the following one.
      if (isset($paragraphs[$i])) {
        $items[] = $paragraphs[$i];
      }

      $component = ['group' => 'default', 'items' => $items];
    }
    // There are some special paragraphs that should have a right margin.
    elseif (in_array($paragraphs[$i]->getType(), $contained) !== FALSE) {
      $component = ['group' => 'contained', 'items' => $paragraphs[$i]];
    }
    // Otherwise, if it's one of the following paragraphs, wrap it as well.
    elseif (in_array($paragraphs[$i]->getType(), $wrap_paragraphs) !== FALSE) {
      $component = ['group' => 'self', 'items' => $paragraphs[$i]];
    }

    else {
      // Otherwise, just return it as it is.
      $component[] = $paragraphs[$i];
    }
    $components[] = $component;
  }
  return $components;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Groups different components together when necessary.
 */
function mass_theme_preprocess_paragraph__org_section_long_form(&$variables) {
  $variables["org_components"] =
    _mass_theme_preprocess_paragraph_sections($variables, 'field_section_long_form_content');
}

/**
 * Join contiguous flexible link groups, type links, into the same element.
 */
function _mass_theme_join_contiguous_flexible_link_group_type_links(&$links_group, &$variables) {
  if (count($links_group) < 2) {
    return;
  }
  $first = array_keys($links_group)[0];
  foreach ($links_group as $key => $link_group) {
    if ($key == $first) {
      continue;
    }

    $variables['service_components'][$first][0]->subsequent_links[] = $link_group[0];

    // Empty elements included previously.
    $variables['service_components'][$key] = FALSE;
  }
  $links_group = [];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Groups different components together when necessary.
 */
function mass_theme_preprocess_paragraph__service_section(&$variables) {
  $variables["service_components"] =
    _mass_theme_preprocess_paragraph_sections($variables, 'field_service_section_content');

  /** @var \Drupal\paragraphs\Entity\Paragraph */
  $container = $variables['paragraph'];
  $variables['section_style'] = $container->field_section_style->value;
  $variables['hide_heading'] = $container->field_hide_heading->value;

  $links_group = [];
  foreach ($variables['service_components'] as $key => &$service_component) {
    /** @var Drupal\paragraphs\Entity\Paragraph */
    $service_component_paragraph = &$service_component[0];
    if (
      is_object($service_component_paragraph) &&
      $service_component_paragraph->getType() == 'flexible_link_group' &&
      $service_component_paragraph->field_display_type->value == 'links'
    ) {
      $links_group[$key] = $service_component;
    }
    else {
      _mass_theme_join_contiguous_flexible_link_group_type_links($links_group, $variables);
      $links_group = [];
    }
  }

  _mass_theme_join_contiguous_flexible_link_group_type_links($links_group, $variables);

  // Removing elements included previously.
  foreach ($variables['service_components'] as $key => &$service_component) {
    if ($service_component === FALSE) {
      unset($variables['service_components'][$key]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_paragraph__flexible_link_group(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph */
  $flexible_lg = $variables['paragraph'];

  $all_flexible_links = array_merge([$flexible_lg], $flexible_lg->subsequent_links ?? []);

  unset($flexible_lg->subsequent_links);

  foreach ($all_flexible_links as $key => $flexible_lg) {

    $base = 'flexible_links_group';
    $variables['display_type'] = $flexible_lg->field_display_type->value;

    $variables[$base][$key]['title'] = $flexible_lg->field_flexible_link_group_title->value;
    $variables[$base][$key]['description'] = $flexible_lg->field_flexible_link_group_desc->value;
    $variables[$base][$key]['theme'] = ((bool) intval($flexible_lg->field_featured->value)) ? 'blue' : 'white';
    $variables[$base][$key]['links'] = [];
    $variables[$base][$key]['expanded'] = (bool) intval($flexible_lg->field_group_expanded->value);

    $links = &$variables[$base][$key]['links'];
    foreach ($flexible_lg->field_link_group as $index => $item) {
      if (empty($item->entity)) {
        continue;
      }
      switch ($item->entity->bundle()) {
        case 'link_group_link':
          if (empty($item->entity->field_link_group_link)) {
            break;
          }
          /** @var \Drupal\mass_content\Field\FieldType\DynamicLinkItem */
          $link = $item->entity->field_link_group_link[0];
          if (empty($link->get('computed_title'))) {
            break;
          }
          $computed_title = $link->get('computed_title')->getValue();
          $links[$index]['text'] = is_array($computed_title) ? $computed_title['#markup'] : $computed_title;
          $links[$index]['href'] = $link->getUrl()->setAbsolute()->toString();
          break;

        case 'link_group_document':
          if (empty($item->entity->field_file_download_single)) {
            break;
          }
          /** @var Drupal\mass_content\Entity\Bundle\media\DocumentBundle */
          $file = $item->entity->field_file_download_single[0]->entity;
          if ($file) {

            if ($variables['display_type'] == "buttons") {
              $original_file = $file->field_upload_file->entity;
              $links[$index]['file_size'] = strtoupper(format_size($original_file->getSize()));
              $file_info = new \SplFileInfo($original_file->getFilename());
              $file_extension = strtoupper($file_info->getExtension());
              $file_icon = 'doc-' . strtolower($file_extension);
              if (!in_array($file_extension, ['PDF', 'DOCX', 'XLSX'])) {
                $file_icon = 'doc-generic';
              }
              $links[$index]['file_icon'] = $file_icon;
              $links[$index]['downloadable_file'] = TRUE;
              $links[$index]['file_extension'] = $file_extension;
              if (!$file->field_title->isEmpty()) {
                $links[$index]['file_title'] = $file->field_title->value;
              }
              else {
                $links[$index]['file_title'] = $file->label();
              }
              $links[$index]['mid'] = $file->id();

            }
            else {
              $view_builder = Drupal::entityTypeManager()
                ->getViewBuilder($file->getEntityType()->id());
              $links[$index]['download_link'] = $view_builder->view($file, 'media_download_link');
            }
            $links[$index]['href'] = $file->toURL()->setAbsolute()->toString();
            $links[$index]['text'] = $file->label();
          }
          break;
      }
    }
  }
}

/**
 * Checks if the paragraph has one of the fields and has a value for it.
 */
function mass_theme_paragraphs_sections_check_wrapping_field($paragraph, $fields) {
  foreach ($fields as $field) {
    if (isset($paragraph) && $paragraph->hasField($field) && $paragraph->get($field)->getValue()) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_theme_preprocess_hook().
 */
function mass_theme_preprocess_select(&$variables) {
  if ($variables['attributes']['name'] == 'sort_bef_combine') {
    $variables['selectBox'] = [];
    $variables['selectBox']['label'] = $variables['element']['#title'] ?? '';

    $variables['selectBox']['required'] = TRUE;
    $variables['selectBox']['id'] = $variables['attributes']['name'];
    $variables['selectBox']['name'] = $variables['attributes']['name'];

    /** @var \Symfony\Component\HttpFoundation\Request $request*/
    $request = \Drupal::request();
    $sort = $request->query->get('sort_bef_combine');

    foreach ($variables['options'] as $option) {
      $variables['selectBox']['options'][] = [
        'value' => $option['value'],
        'text' => $option['label'],
        'selected' => $sort && $option['value'] === $sort,
      ];
    }
  }
}

/**
 * Remove breadcrumbs for top level pages and generates schema.org metadata.
 */
function mass_theme_preprocess_breadcrumb(&$variables) {
  $breadcrumb = $variables['breadcrumb'];
  $itemListElement = [];

  $variables['current_page'] = end($breadcrumb)['text'];

  // Remove current page.
  foreach ($breadcrumb as $key => $link) {
    if ($link['url'] == "") {
      unset($breadcrumb[$key]);
    }
  }

  $collection_page = mass_content_get_collection_from_current_page();

  $variables['borderless'] = FALSE;

  if ((bool) $collection_page) {
    $variables['borderless'] = (bool) (
      $collection_page->field_short_description->value ||
      $collection_page->field_header_color->value
    );
  }

  // Remove breadcrumbs for top level pages
  if (count($breadcrumb) < 2 && !((bool) $collection_page)) {
    $variables['breadcrumb'] = NULL;
  }
  else {
    foreach ($breadcrumb as $key => $link) {
      $itemListElement[] = [
        "@type" => "ListItem",
        "position" => $key + 1,
        "item" => [
          "@id" => $link['url'],
          "name" => $link['text']
        ],
      ];
    }

    $variables['breadcrumb'] = $breadcrumb;

    // Set up metadata
    $items = [
      '@context' => 'https://schema.org/',
      '@type' => 'BreadcrumbList',
      'itemListElement' => $itemListElement,
    ];
    $jsonld = SchemaMetatagManager::encodeJsonld($items);
    $variables['#attached']['html_head']['schema_dataset'] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#value' => $jsonld,
        '#attributes' => ['type' => 'application/ld+json'],
      ],
      'mass_schema_dataset',
    ];
  }
}

/**
 * Fixes sort_bef_combine filter on collection pages.
 */
function _mass_theme_override_sort_bef_combine(&$item, $default_sort) {
  // Pagers may have no items.
  if (!$item) {
    return;
  }

  // Ex. Pages are an array of items.
  if (!isset($item['href'])) {
    foreach ($item as &$inner_item) {
      _mass_theme_override_sort_bef_combine($inner_item, $default_sort);
    }
    return;
  }

  // Parsing query string parameters and overriding default sort.
  parse_str(ltrim($item['href'], '?'), $params);
  $params['sort_bef_combine'] = $default_sort;

  // Unneeded parameters.
  unset($params['sort_by']);
  unset($params['sort_order']);

  // Building query string again.
  $item['href'] = '?' . http_build_query($params);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_theme_preprocess_pager__collection_all(&$variables) {
  $collection = mass_content_get_collection_from_current_page();
  $param = \Drupal::request()->query->get('sort_bef_combine');
  $default_sort = $param ?? $collection->field_default_sort->value ?? 'title_ASC';
  _mass_theme_override_sort_bef_combine($variables['items'], $default_sort);
}
