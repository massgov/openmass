<?php

/**
 * @file
 * Functions to support theming in the mass.gov admin theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\views\Render\ViewsRenderPipelineMarkup;
use Drupal\views\Views;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_admin_theme_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (array_key_exists('data-align', $form['attributes'])) {
    unset($form['attributes']['data-align']['#options']['center']);
  }
  if (array_key_exists('data-entity-embed-display-settings', $form['attributes'])) {
    $display_settings = $form['attributes']['data-entity-embed-display-settings'];
    // Image loading added by core image module not supported by entity_embed.
    // This is causing array to string conversion warning and behat test failure.
    // Temporarily unsetting image_loading field from the dialog to avoid warnings.
    // @todo Remove this code when entity_embed start supporting lazy loading attribute.
    if (array_key_exists('image_loading', $display_settings)) {
      unset($form['attributes']['data-entity-embed-display-settings']['image_loading']);
    }
    if (array_key_exists('image_style', $display_settings)) {
      $image_style = $form['attributes']['data-entity-embed-display-settings']['image_style'];
      $image_style['#title'] = t('Image width');
      $image_style['#description'] = t('The width of the image is scaled to either 50% or 100% of the container it is embedded in.');
      $form['attributes']['data-entity-embed-display-settings']['image_style'] = $image_style;
    }
    if (array_key_exists('image_link', $display_settings)) {
      unset($form['attributes']['data-entity-embed-display-settings']['image_link']);
    }
  }
  $form['#attached']['library'][] = 'mass_admin_theme/entity_embed_dialog';
}

/**
 * Implements hook_preprocess_hook().
 *
 * Customize the help text for the field.
 */
function mass_admin_theme_preprocess_file_upload_help(&$variables) {

  // Remove matching unneeded help text items.
  foreach ($variables['descriptions'] as $index => $desc) {
    if (strstr($desc, "One file only") !== FALSE) {
      $variables['descriptions'][$index] = '';
    }
    elseif (strstr($desc, "Images must be larger than") !== FALSE) {
      $variables['descriptions'][$index] = '';
    }
  }

  if (count($variables['descriptions']) == 3) {
    /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $description */
    $description = $variables['descriptions'][1];
    $variables['descriptions'][1] = t("Files must be less than @size.", $description->getArguments(), $description->getOptions());

    $description = $variables['descriptions'][2];
    $extensions = str_replace(' ', ', ', $description->getArguments()['@extensions']);
    $variables['descriptions'][2] = t('Allowed types: @extensions', ['@extensions' => $extensions]);

    // Removes first line of descriptions.
    unset($variables['descriptions'][0]);
    $variables['descriptions'] = array_values($variables['descriptions']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_admin_theme_preprocess_menu_local_action(&$variables) {
  $classes = $variables['link']['#options']['attributes']['class'];
  $classes[] = 'button--local-actions';
  $classes = array_filter($classes, function ($item) {
    return $item != 'button--small';
  });
  $variables['link']['#options']['attributes']['class'] = $classes;
}

/**
 * Helper function to set description_display for node, media, and term add/edit pages.
 */
function _add_description_display_before(&$variables) {
  // Check for current path to match node and media add/edit pages.
  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  // Set description display so it will take effect in the template,
  // leaving the description placement as-is on other pages.
  if (preg_match('/((node|media|term)\/\d+\/edit)|((node|media)\/add)|(taxonomy\/manage\/[0-9A-Za-z\-]+\/add)/', $result)) {
    $variables['description_display'] = 'before';
  }

  if (isset($variables['type']) && $variables['type'] == 'checkbox') {
    $parents = $variables['element']['#parents'] ?? [];
    $last_parent = end($parents);
    if ($last_parent == 'autolink') {
      $variables['description_display'] = 'after';
    }
  }

}

/**
 * Implements hook_preprocess_form_element().
 */
function mass_admin_theme_preprocess_form_element(&$variables) {
  _add_description_display_before($variables);

  if (isset($variables['element']['#id']) &&
    ($variables['element']['#id'] === 'edit-upload')
  ) {
    $variables['prefix'] = t('Please note, only one image can be embedded at a time.');
  }
}

/**
 * Implements hook_preprocess_fieldset().
 */
function mass_admin_theme_preprocess_fieldset(&$variables) {
  _add_description_display_before($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_admin_theme_preprocess_html(&$variables) {
  // See: https://jira.mass.gov/browse/DP-10034.
  $variables['deployment_identifier'] = Settings::get('deployment_identifier');

  // Metatag module prevents its regular use on admin pages
  // see: https://cgit.drupalcode.org/metatag/tree/metatag.module?id=8.x-1.5#n249
  // so instead of using functions like `metatag_get_tags_from_route()`
  // which our custom frontend theme does, for the backend admin theme
  // we rely on using Metatag Manager service.
  $metatag_manager = \Drupal::service('metatag.manager');
  $globalMetatagsEntity = $metatag_manager->getGlobalMetatags();
  $globalMetatagsRenderArray = $metatag_manager->generateElements($globalMetatagsEntity->get('tags'));
  if (isset($globalMetatagsRenderArray['#attached']) && isset($globalMetatagsRenderArray['#attached']['html_head'])) {
    foreach ($globalMetatagsRenderArray['#attached']['html_head'] as $item) {
      $variables['page']['#attached']['html_head'][] = $item;
    }
  }
}

/**
 * Implements hook_theme().
 */
function mass_admin_theme_theme($existing, $type, $theme, $path) {
  return [
    'media_document_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Changes vertical tabs to container.
 */
function mass_admin_theme_form_media_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = 'media_document_form';
  $form['#attached']['library'][] = 'mass_admin_theme/doc-form';
  $form['advanced']['#type'] = 'container';
  $form['advanced']['#attributes']['class'][] = 'doc-form-meta__header';
  $form['revision_information']['#type'] = 'container';

}

/**
 * Implements hook_form_alter().
 */
function mass_admin_theme_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form['last_updated'])) {
    $form['last_updated']['#options']['All'] = t('All');
    $form['last_updated']['#validated'] = TRUE;
    $input = &$form_state->getUserInput();
    if (!isset($input['last_updated'])) {
      $input['last_updated'] = 'All';
    }
    $form_state->setUserInput($input);
  }

}

/**
 * Implements template_preprocess_views_view().
 *
 * Add an CSV export link to the footer of the redirect view.
 */
function mass_admin_theme_preprocess_views_view__redirect(&$variables) {
  if ($view = Views::getView('redirect_export')) {
    $url = $view->setDisplay('data_export_1') ? $view->getUrl('data_export_1') : '';
    $variables['footer']['csv_link'] = [
      '#type' => 'link',
      '#url' => $url,
      '#title' => t('Redirect CSV Export'),
      '#attributes' => [
        'class' => [
          'button',
        ],
        'target' => '_blank',
      ],
    ];
  }

}

/**
 * Implements hook_preprocess_input__submit(array &$variables).
 */
function mass_admin_theme_preprocess_input__submit(array &$variables) {
  $attr_value = &$variables['attributes']['value'];

  // Hide "Add media" button from selection of existing files since it is
  // replaced by "Select Entities" button.
  if (!is_string($attr_value) && $attr_value->getUntranslatedString() == 'Add @type_singular') {
    if (!empty($attr_value->getArguments()['@type_singular']) &&
      !is_string($attr_value->getArguments()['@type_singular']) &&
      strpos($attr_value->getArguments()['@type_singular']->getUntranslatedString(), "media") !== FALSE) {
      $needles = [
        "field-service-detail-sections",
        "field-video",
        "field-info-details-sections",
        "field-executive-order-downloads",
        "field-regulation-download",
        "field-rules-download",
        "field-decision-download",
        "field-advisory-download",
        "field-curatedlist-list-section",
        "field-binder-appendix",
        "field-downloads",
        "field-event-minutes-download",
        "field-event-ref-downloads",
        "field-event-agenda-download",
        "field-how-to-next-steps",
        "field-how-to-files",
        "field-location-details-sections",
        "field-guide-page-sections",
        "field-service-video",
        "field-service-file",
      ];

      $needles_regex = [
        '/service-sections.*subform.*field-service.*actions-ief-reference-save/',
      ];

      foreach ($needles as $needle) {
        if (strpos($variables['attributes']['id'], $needle) !== FALSE) {
          $variables['attributes']['class'][] = 'visually-hidden';
        }
      }

      foreach ($needles_regex as $needle_regex) {
        $matches = [];
        preg_match($needle_regex, $variables['attributes']['id'], $matches);
        if ($matches) {
          $variables['attributes']['class'][] = 'visually-hidden';
        }
      }
    }
  }
}
