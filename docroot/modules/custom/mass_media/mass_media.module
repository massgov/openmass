<?php

/**
 * @file
 * Primary module hooks for Mass Media module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\file\Entity\File;
use Drupal\file\FileInterface;
use Drupal\file\Plugin\Field\FieldWidget\FileWidget;
use Drupal\mass_content\Entity\Bundle\media\DocumentBundle;
use Drupal\mass_content\Entity\Bundle\media\MediaBundle;
use Drupal\media\MediaInterface;

/**
 * Immediately delete any old file entity on this media entity.
 *
 * See https://jira.state.ma.us/browse/DP-8699.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   A media entity.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function mass_media_media_update(EntityInterface $entity) {

  // getUploadFile method and field_upload_file field are only available to documents.
  if (!($entity instanceof DocumentBundle)) {
    return;
  }

  if ($entity->getUploadFile()->isEmpty()) {
    return;
  }

  $target_new = $entity->getUploadFile()->target_id;
  $target_original = $entity->original->getUploadFile()->target_id;
  if (empty($target_original) || $target_original == $target_new) {
    return;
  }

  $file = File::load($target_original);
  if (empty($file)) {
    return;
  }

  $file_uri = $file->getFileUri();
  /** @var \Drupal\Core\File\FileSystem $file_system */
  $file_system = \Drupal::service('file_system');
  $file_scheme = StreamWrapperManager::getScheme($file_uri);
  if ($file_scheme == 'private') {
    return;
  }

  $file_uri_target = \Drupal::service('stream_wrapper_manager')->getTarget($file_uri);
  $file_destination = 'private://' . $file_uri_target;
  $dirname = $file_system->dirname($file_destination);
  if (!$file_system->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
    throw new \RuntimeException("Unable to prepare directory for file move '$dirname'");
  }
  if (!\Drupal::service('file.repository')->move($file, $file_destination)) {
    throw new \RuntimeException("Unable to move file to '$file_destination'");
  }
  Drupal::logger('content')->info('File entity @num was moved to private. Was @url', ['@num' => $file->id(), '@url' => $file->createFileUrl()]);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function mass_media_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\file\Plugin\Field\FieldType\FileFieldItemList $items */
  $items = $context['items'];
  if ($context['widget'] instanceof FileWidget && $items->getName() === 'field_upload_file') {
    $element['#process'][] = 'mass_media_process_file_widget';
  }
}

/**
 * File widget process callback.
 *
 * Adds an extra data property to the "remove" button of any file widget that's
 * displaying a permanent file.  This property is used in JS to display a
 * confirmation before allowing the "Remove" action.
 */
function mass_media_process_file_widget(&$element, $form_state) {
  $value = $form_state->getValue($element['#parents']);
  if (isset($value['target_id']) && ($file = File::load($value['target_id'])) && $file->isPermanent()) {
    $element['remove_button']['#attributes']['data-remove-confirm'] = $file->getFilename();
    $element['remove_button']['#attached']['library'][] = 'mass_media/delete_confirm';
  }
  return $element;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Show document title field value instead of filename.
 */
function mass_media_preprocess_page_title(&$variables) {

  $entities = [];

  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() !== 'entity.media.edit_form') {
    return;
  }

  foreach (\Drupal::routeMatch()->getParameters() as $param) {
    if ($param instanceof EntityInterface) {
      $entities[] = $param;
    }
  }

  foreach ($entities as $id => $entity) {
    if ($entity->bundle() == 'document') {
      $variables['title'] = "Edit Document: " . $entity->field_title->value;
    }
  }

}

/**
 * Implements hook_form_alter_HOOK().
 *
 * Checks permission for restricted state.
 */
function mass_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $uid = \Drupal::currentUser()->id();
  $current_user_roles = \Drupal::currentUser()->getRoles();

  if ($form_id === "views_bulk_operations_confirm_action") {
    if ($form_data = $form_state->get('views_bulk_operations')) {
      if ($form_data['view_id'] == "media" && $form_data['display_id'] == "media_page_list") {
        $form['actions']['submit']['#value'] = $form_data['action_label'];
        $form['actions']['submit']['#attributes']['class'][] = $form_data['action_id'];
        $form['actions']['cancel']['#value'] = t("Cancel transition");
        $form['#attached']['library'][] = 'mass_media/views_operations';
      }
    }
  }
  // Check if we're editing a media document.
  if ($form_id == "media_document_edit_form") {
    $doc = $form_state->getFormObject()->getEntity();
    $mod_state = $doc->getModerationState()->getValue();
    $mod_state = $mod_state[0]['value'];

    if ($mod_state == "restricted") {
      $author_id = $doc->getOwner()->id();
      // If the user isn't an administrator.
      if (!in_array("administrator", $current_user_roles)) {
        // Check if the person trying to access the content is the author.
        if ($author_id !== $uid) {
          $form['#access'] = FALSE;
          $form['#markup'] = t('Access Denied. This file is locked and you do not have permission to edit this media.');
          $form['#cache'] = [
            'contexts' => [],
            'max-age' => 0,
          ];
        }
      }
    }
  }

}

/**
 * Implements hook_media_access().
 *
 * Restricts access to restricted content to only the author.
 */
function mass_media_media_access(MediaBundle $entity, $operation, AccountInterface $account) {

  $uid = \Drupal::currentUser()->id();
  $current_user_roles = \Drupal::currentUser()->getRoles();
  if ($entity->bundle() === "document") {
    $mod_state = $entity->getModerationState()->getValue();
    $mod_state = $mod_state[0]['value'];

    if ($mod_state == "restricted") {
      $author_id = $entity->getOwner()->id();

      if (!in_array("administrator", $current_user_roles)) {
        if ($author_id !== $uid) {
          // File is restricted and this isn't the author so we restrict access.
          return AccessResult::forbidden();
        }
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Provides custom handling of uploaded files within Document media entities.
 * Desired behavior for Document media entities and their uploaded files:
 * - Published Documents will have a public uploaded file.
 * - Unpublished Documents will have a private uploaded file.
 */
function mass_media_media_presave(MediaInterface $entity) {
  // We need a way to bypass file handling when bulk updating both
  // published and unpublished media entities, since sometimes there is a
  // mismatch between environments that would result in failures when trying
  // to move files that no longer exist.
  $bypass_presave = isset($_ENV['MASS_MEDIA_PRESAVE_BYPASS']) ? (bool) $_ENV['MASS_MEDIA_PRESAVE_BYPASS'] : FALSE;

  if ($entity->bundle() == 'document' && !$bypass_presave) {

    // This helps the system to track documents in the automatic curated lists.
    if ($labels = $entity->field_document_label->getValue()) {

      // Check if the usage of the document is 0.
      // If not process further to track the media.
      $total = Drupal::service('mass_entity_usage.usage')->listUniqueSourcesCount($entity);
      if (!$total) {
        foreach ($labels as $label) {
          // Check if there are paragraphs with the same labels.
          // If there are, this means we should track the document.
          $paragraphs = \Drupal::entityTypeManager()
            ->getStorage('paragraph')
            ->loadByProperties([
              'field_listdynamic_label' => $label['target_id'],
            ]);
          if ($paragraphs) {
            foreach ($paragraphs as $paragraph) {
              if (\Drupal::config('entity_usage_queue_tracking.settings')
                ->get('queue_tracking')) {
                // Add the paragraph to the queue to update the usage.
                \Drupal::queue('entity_usage_tracker')->createItem([
                  'operation' => 'update',
                  'entity_type' => 'paragraph',
                  'entity_id' => $paragraph->id(),
                ]);
              }
            }
          }
        }
      }
    }

    // Loads file.
    /** @var \Drupal\file\Entity\File $file */
    $file = File::load($entity->getUploadFile()->target_id);
    if ($file) {
      $file_uri = $file->getFileUri();
      /** @var \Drupal\Core\File\FileSystem $file_system */
      $file_system = \Drupal::service('file_system');
      $file_scheme = StreamWrapperManager::getScheme($file_uri);
      $file_uri_target = \Drupal::service('stream_wrapper_manager')->getTarget($file_uri);

      // Checks for unpublished Documents to ensure file is private.
      // Checks for published Documents to ensure file is public.
      if ($entity->isPublished() && $file_scheme == 'private') {
        // Moves file from private to public.
        $file_destination = 'public://' . $file_uri_target;
      }
      elseif (!$entity->isPublished() && $file_scheme == 'public') {
        $file_destination = 'private://' . $file_uri_target;
      }

      // Moves file as needed.
      if (!empty($file_destination)) {
        $dirname = $file_system->dirname($file_destination);
        if (!\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
          throw new \RuntimeException("Unable to prepare directory for file move '$dirname'");
        }
        if (!\Drupal::service('file.repository')->move($file, $file_destination)) {
          throw new \RuntimeException("Unable to move file to '$file_destination'");
        }
      }
    }
  }
}

/**
 * Implements hook_file_move().
 *
 * Used in conjunction with mass_media_media_presave(),
 * where file_move() must be used without the FILE_EXISTS_REPLACE option,
 * which leads to source file being left to linger as a temporary file.
 * file_move() calls the 'file_move' hook, which we use here to ensure
 * that the source file is deleted immediately.
 */
function mass_media_file_move(FileInterface $file, FileInterface $source) {
  /** @var \Drupal\Core\File\FileSystem $file_system */
  $file_system = \Drupal::service('file_system');

  // Delete the original if it's not in use elsewhere.
  $delete_source_document = FALSE;
  $file_references = file_get_file_references($file);
  foreach ($file_references as $key => $reference) {
    // Checks for Document-related files moving between public/private schemes.
    if (
      $key == 'field_upload_file'
      && !empty($media = reset($reference['media']))
      && $media->bundle() == 'document'
      && StreamWrapperManager::getScheme($file->getFileUri()) != StreamWrapperManager::getScheme($source->getFileUri())
    ) {
      $delete_source_document = TRUE;
    }
  }
  if ($delete_source_document) {
    // Deletes old file immediately to avoid unwanted temporary file duplicates.
    // Cannot use File::delete() because $file and $source share same ID.
    $file_system->delete($source->getFileUri());
  }
}
