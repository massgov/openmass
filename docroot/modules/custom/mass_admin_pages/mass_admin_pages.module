<?php

/**
 * @file
 * Contains mass_admin_pages.module.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * If a user logs in with a password reset, send them to the user edit form to
 * reset their password first, then redirect to my-work.
 */
function mass_admin_pages_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '_mass_admin_pages_user_redirect';
}

/**
 * Custom submit handler to redirect users to my-work page.
 */
function _mass_admin_pages_user_redirect(&$form, FormStateInterface $form_state) {
  // Redirect from user form on save only when user first logs in.
  if (\Drupal::request()->query->has('pass-reset-token')) {
    $form_state->setRedirect('mass_admin_pages.author_home');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_admin_pages_preprocess_html(&$variables) {
  $current_route = \Drupal::routeMatch()->getRouteName();

  if ($current_route == 'mass_admin_pages.author_home') {
    $variables['attributes']['class'][] = 'author-home';
  }
}

/**
 * Content type categories.
 */
const MASS_CT_CATEGORIES = [
  'service_suite' => 'Services & Info',
  'organization' => 'Org & Contact Info',
  'news_events' => 'News & Events',
  'laws_regulations' => 'Laws & Regs',
  'other' => 'Other',
  'decision_tree' => 'Decision Tree (Beta)',
];

/**
 * Implements hook_help().
 */
function mass_admin_pages_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the mass_admin_pages module.
    case 'help.page.mass_admin_pages':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom pages for the mass_admin theme') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments().
 */
function mass_admin_pages_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'mass_admin_pages/mass_admin_pages.node-add';
}

/**
 * Implements hook_theme().
 */
function mass_admin_pages_theme($existing, $type, $theme, $path) {
  return [
    'block__add_content_search' => [
      'template' => 'block--add-content-search',
      'base hook' => 'block',
    ],
    'block__alerts_block' => [
      'template' => 'block--alerts-block',
      'base hook' => 'block',
    ],
  ];
}

/**
 * Custom '#element_validate' callback for 'node_type_thumbnail_path' textfield.
 *
 * @param array $element
 *   Form element to validate.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 * @param array $complete_form
 *   Form.
 */
function _mass_admin_pages_node_type_thumbnail_path_validate(array &$element, FormStateInterface $form_state, array &$complete_form) {
  // Checks that thumbnail path begins with slash and ends with file extension.
  $pattern = '/^\/[\w\-\/]*[\w]\.(png|jpg|jpeg|gif|svg)$/';
  if (!empty($element['#value']) && !preg_match($pattern, $element['#value'])) {
    $form_state->setError($element, t('The path %path is invalid. Please see the field description for a valid example.', ['%path' => $element['#value']]));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_admin_pages_preprocess_page(&$variables) {
  $current_route = \Drupal::routeMatch()->getRouteName();

  if ($current_route == 'system.admin_content') {
    unset($variables['page']['content']['mass_admin_theme_local_actions']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the KPI tab and fields on all new service pages.
 */
function mass_admin_pages_form_node_service_page_form_alter(&$form, &$form_state, $form_id) {
  unset($form['field_service_kpi_choice']);
  foreach (array_keys($form) as $field_name) {
    if (strpos($field_name, 'field_kpi_') !== FALSE) {
      unset($form[$field_name]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the KPI tab and fields on all service pages except two PFML pages.
 */
function mass_admin_pages_form_node_service_page_edit_form_alter(&$form, &$form_state, $form_id) {
  $pfml_service_family_nids = [414121, 535101];
  if ($nid = $form_state->getFormObject()->getEntity()->id()) {
    if (!in_array($nid, $pfml_service_family_nids)) {
      unset($form['field_service_kpi_choice']);
      foreach (array_keys($form) as $field_name) {
        if (strpos($field_name, 'field_kpi_') !== FALSE) {
          unset($form[$field_name]);
        }
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function mass_admin_pages_views_data_alter(array &$data) {
  $data['editoria11y_results']['entity_id']['relationship'] = [
    'base' => 'node_field_data',
    'base field' => 'nid',
    'id' => 'standard',
    'label' => t('Entity ID'),
  ];
}
