<?php

/**
 * @file
 * Contains mass_admin_pages.module.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\Entity\NodeType;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\Core\Render\Element;

/**
 * Add icon to Mass menu item thats shown in admin toolbar.
 */
function mass_admin_pages_preprocess_menu(&$variables) {
  // A menu item to css class mapping.
  $map = [
    'mass_admin_pages.mass' => 'toolbar-icon-tmgmt-admin-tmgmt',
    // 'mass_admin_pages.admin' => 'toolbar-icon-system-admin-config',
    'mass_admin_pages.help' => 'toolbar-icon-help-main',
    'mass_admin_pages.drupal' => 'toolbar-icon-system-modules-list',
    'mass_admin_pages.all_collection' => 'toolbar-icon-entity-webform-collection',
    'mass_admin_pages.trash_collection' => 'toolbar-icon-rebuild-cache-access',
    'views_view:views.mass_dashboard_needs_review.page_1' => 'toolbar-icon-system-admin-structure',
    'views_view:views.my_content.page_1' => 'toolbar-icon-entity-user-collection',
    'mass_feedback_loop.mass_feedback_loop_author_interface_form' => 'toolbar-icon-system-admin-reports',
  ];
  foreach ($map as $link => $class) {
    if (isset($variables['items'][$link])) {
      $options = $variables['items'][$link]['url']->getOptions();
      $options['attributes']['class'][] = $class;
      $variables['items'][$link]['url']->setOptions($options);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements because they will be
 * processed by Twig and \Drupal::service('renderer')->render() will be invoked.
 */
function mass_admin_pages_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = [
      'library' => [
        'claro/drupal.nav-tabs',
      ],
    ];
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = [
      'library' => [
        'claro/drupal.nav-tabs',
      ],
    ];
  }

  foreach (Element::children($variables['primary']) as $key) {
    $variables['primary'][$key]['#level'] = 'primary';
  }
  foreach (Element::children($variables['secondary']) as $key) {
    $variables['secondary'][$key]['#level'] = 'secondary';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function mass_admin_pages_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'tabs__link';
  $variables['link']['#options']['attributes']['class'][] = 'js-tabs-link';

  // Ensure is-active class is set when the tab is active. The generic active
  // link handler applies stricter comparison rules than what is necessary for
  // tabs.
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'is-active';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
}

/**
 * Implements hook_user_login().
 *
 * Redirect users to the admin home on successful login.
 */
function mass_admin_pages_user_login(AccountInterface $account) {
  $url = Url::fromRoute('system.admin')->toString();

  // If there are no password reset parameters in the URL, then bypass the user edit
  // page and go straight to my-work.
  if (\Drupal::service('current_route_match')->getRouteName() !== 'user.reset.login') {
    return \Drupal::requestStack()->getCurrentRequest()->query->set('destination', $url);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * If a user logs in with a password reset, send them to the user edit form to
 * reset their password first, then redirect to my-work.
 */
function mass_admin_pages_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '_mass_admin_pages_user_redirect';
}

/**
 * Custom submit handler to redirect users to my-work page.
 */
function _mass_admin_pages_user_redirect(&$form, FormStateInterface $form_state) {
  // Redirect from user form on save only when user first logs in.
  if (\Drupal::request()->query->has('pass-reset-token')) {
    $form_state->setRedirect('system.admin');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_admin_pages_preprocess_html(&$variables) {
  $current_route = \Drupal::routeMatch()->getRouteName();

  if ($current_route == 'mass_admin_pages.author_home' || $current_route == 'system.admin') {
    $variables['attributes']['class'][] = 'author-home';
  }
}

/**
 * Content type categories.
 */
const MASS_CT_CATEGORIES = [
  'service_suite' => 'Services & Info',
  'organization' => 'Org & Contact Info',
  'news_events' => 'News & Events',
  'laws_regulations' => 'Laws & Regs',
  'other' => 'Other',
  'decision_tree' => 'Decision Tree (Beta)',
];

/**
 * Implements hook_help().
 */
function mass_admin_pages_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the mass_admin_pages module.
    case 'help.page.mass_admin_pages':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom pages for the mass_admin theme') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function mass_admin_pages_menu_links_discovered_alter(&$links) {
  $links['system.admin_content']['title'] = new TranslatableMarkup('All (content)');
}

/**
 * Implements hook_page_attachments().
 */
function mass_admin_pages_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'mass_admin_pages/mass_admin_pages.node-add';
}

/**
 * Implements hook_theme_suggestions_node_add_list.
 *
 * @see https://drupal.stackexchange.com/a/269258/549
 */
function mass_admin_pages_theme_suggestions_node_add_list(array $variables) {
  $suggestions = [];
  $suggestions[] = 'node_add_list__custom';
  return $suggestions;
}

/**
 * Implements hook_theme().
 */
function mass_admin_pages_theme($existing, $type, $theme, $path) {
  return [
    'block__add_content_search' => [
      'template' => 'block--add-content-search',
      'base hook' => 'block',
    ],
    'block__alerts_block' => [
      'template' => 'block--alerts-block',
      'base hook' => 'block',
    ],
    // https://drupal.stackexchange.com/a/269258/549
    'node_add_list__custom' => [
      'base hook' => 'node_add_list',
    ],
  ];
}

/**
 * Use our template for breadcrumb in Gin secondary toolbar.
 */
function mass_admin_pages_theme_registry_alter(&$theme_registry) {
  $mass_admin_templates_path = \Drupal::service('extension.list.module')->getPath('mass_admin_pages') . '/templates';
  $claro_templates_path = \Drupal::service('extension.list.theme')->getPath('claro') . '/templates';
  $theme_registry['toolbar']['path'] = $mass_admin_templates_path;
  $theme_registry['toolbar__gin__secondary']['path'] = $mass_admin_templates_path;
  $theme_registry['menu_local_tasks']['path'] = $claro_templates_path;
  $theme_registry['menu_local_task']['path'] = $claro_templates_path . '/navigation';
}

function mass_admin_pages_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'theme_registry_alter') {
    $group = $implementations['mass_admin_pages'];
    unset($implementations['mass_admin_pages']);
    $implementations['mass_admin_pages'] = $group;
  }
}

/**
 * Implements hook_form_form_ID_alter().
 */
function mass_admin_pages_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeTypeForm $node_type_form */
  $node_type_form = $form_state->getFormObject();
  /** @var \Drupal\node\Entity\NodeType $node_type */
  $node_type = $node_type_form->getEntity();

  $form['node_type_long_description'] = [
    '#type' => 'textarea',
    '#title' => t('Use this content type for...'),
    '#weight' => 0,
    '#default_value' => $node_type->getThirdPartySetting('mass_admin_pages', 'node_type_long_description', NULL),
  ];

  $form['node_type_url'] = [
    '#type' => 'url',
    '#title' => t('Link to live example'),
    '#default_value' => $node_type->getThirdPartySetting('mass_admin_pages', 'node_type_url', NULL),
    '#maxlength' => 255,
    '#weight' => 0,
    '#size' => 30,
  ];

  $form['node_type_category'] = [
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => MASS_CT_CATEGORIES,
    '#title' => t('Category'),
    '#weight' => 0,
    '#default_value' => $node_type->getThirdPartySetting('mass_admin_pages', 'node_type_category', NULL),
  ];

  $form['node_type_thumbnail_path'] = [
    '#type' => 'textfield',
    '#title' => t('Enter the path to the thumbnail image, for example: /modules/custom/mass_admin_pages/images/thumbnail.png'),
    '#weight' => 0,
    '#default_value' => $node_type->getThirdPartySetting('mass_admin_pages', 'node_type_thumbnail_path', NULL),
    '#element_validate' => ['_mass_admin_pages_node_type_thumbnail_path_validate'],
  ];

  $form['#entity_builders'][] = '_mass_admin_pages_form_node_type_edit_form_builder';
}

/**
 * Custom '#element_validate' callback for 'node_type_thumbnail_path' textfield.
 *
 * @param array $element
 *   Form element to validate.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 * @param array $complete_form
 *   Form.
 */
function _mass_admin_pages_node_type_thumbnail_path_validate(array &$element, FormStateInterface $form_state, array &$complete_form) {
  // Checks that thumbnail path begins with slash and ends with file extension.
  $pattern = '/^\/[\w\-\/]*[\w]\.(png|jpg|jpeg|gif|svg)$/';
  if (!empty($element['#value']) && !preg_match($pattern, $element['#value'])) {
    $form_state->setError($element, t('The path %path is invalid. Please see the field description for a valid example.', ['%path' => $element['#value']]));
  }
}

/**
 * Entity form builder for the node type edit form.
 */
function _mass_admin_pages_form_node_type_edit_form_builder($entity_type, NodeType $node_type, &$form, FormStateInterface $form_state) {
  $node_type->setThirdPartySetting('mass_admin_pages', 'node_type_long_description', $form_state->getValue('node_type_long_description'));
  $node_type->setThirdPartySetting('mass_admin_pages', 'node_type_url', $form_state->getValue('node_type_url'));
  $node_type->setThirdPartySetting('mass_admin_pages', 'node_type_category', $form_state->getValue('node_type_category'));
  $node_type->setThirdPartySetting('mass_admin_pages', 'node_type_thumbnail_path', $form_state->getValue('node_type_thumbnail_path'));
}

/**
 * Helper function to find non-empty content type categories.
 *
 * @return array
 *   Content type categories with sub-items.
 */
function _mass_admin_pages_get_used_categories() {
  $content_types = \Drupal::service('entity_type.manager')->getStorage('node_type')->loadMultiple();
  $categories_in_use = [];
  $user = \Drupal::currentUser();
  foreach ($content_types as $content_type) {
    $content_type_name = $content_type->id();
    if ($user->hasPermission('create ' . $content_type_name . ' content')) {
      $cat_id = $content_type->getThirdPartySetting('mass_admin_pages', 'node_type_category');
      if (isset($cat_id)) {
        $categories_in_use[$cat_id] = MASS_CT_CATEGORIES[$cat_id];
      }
    }
  }
  $categories_in_use = array_intersect(MASS_CT_CATEGORIES, $categories_in_use);
  return $categories_in_use;
}

/**
 * Prepares variables for list of available node type templates.
 */
function mass_admin_pages_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $cat_id = $type->getThirdPartySetting('mass_admin_pages', 'node_type_category');
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] = Url::fromRoute('node.add', ['node_type' => $type->id()])->toString();
      $variables['types'][$type->id()]['node_type_category'] = (!empty($cat_id)) ? MASS_CT_CATEGORIES[$cat_id] : '';
      $variables['types'][$type->id()]['node_type_url'] = UrlHelper::filterBadProtocol($type->getThirdPartySetting('mass_admin_pages', 'node_type_url'));
      $variables['types'][$type->id()]['node_type_long_description'] = Xss::filterAdmin($type->getThirdPartySetting('mass_admin_pages', 'node_type_long_description'));
      $variables['types'][$type->id()]['node_type_thumbnail_path'] = UrlHelper::filterBadProtocol($type->getThirdPartySetting('mass_admin_pages', 'node_type_thumbnail_path'));
    }
  }
  $variables['categories'] = _mass_admin_pages_get_used_categories();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the KPI tab and fields on all new service pages.
 */
function mass_admin_pages_form_node_service_page_form_alter(&$form, &$form_state, $form_id) {
  unset($form['field_service_kpi_choice']);
  foreach (array_keys($form) as $field_name) {
    if (strpos($field_name, 'field_kpi_') !== FALSE) {
      unset($form[$field_name]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the KPI tab and fields on all service pages except two PFML pages.
 */
function mass_admin_pages_form_node_service_page_edit_form_alter(&$form, &$form_state, $form_id) {
  $pfml_service_family_nids = [414121, 535101];
  if ($nid = $form_state->getFormObject()->getEntity()->id()) {
    if (!in_array($nid, $pfml_service_family_nids)) {
      unset($form['field_service_kpi_choice']);
      foreach (array_keys($form) as $field_name) {
        if (strpos($field_name, 'field_kpi_') !== FALSE) {
          unset($form[$field_name]);
        }
      }
    }
  }
}
