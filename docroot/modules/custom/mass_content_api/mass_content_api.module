<?php

/**
 * @file
 * The module file for the Mass Content API module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Format descendant api return as a flat list.
 */
const MASS_CONTENT_API_FLAT = 'flat';

/**
 * Format descendant api return as a hierarchy with depth.
 */
const MASS_CONTENT_API_DEPTH = 'depth';

/**
 * Implements hook_node_update().
 *
 * When a node is updated, add a queue item to update relationships.
 */
function mass_content_api_node_update(EntityInterface $node) {
  mass_content_api_crud($node);
}

/**
 * Implements hook_node_insert().
 *
 * When a node is inserted, add a queue item to update relationships.
 */
function mass_content_api_node_insert(EntityInterface $node) {
  mass_content_api_crud($node);
}

/**
 * Implements hook_node_delete().
 *
 * When a node is deleted, add a queue item to update relationships.
 */
function mass_content_api_node_delete(EntityInterface $node) {
  /** @var \Drupal\mass_content_api\DescendantManagerInterface $dm */
  $dm = \Drupal::service('descendant_manager');
  $dm->deindex($node);
}

/**
 * Handles updating relationships for decision trees on CRUD operations.
 *
 * @param Drupal\Core\Entity\EntityInterface $node
 *   The node to update relationships for.
 */
function mass_content_api_crud(EntityInterface $node) {
  $types = [
    'decision_tree',
    'decision_tree_branch',
    'decision_tree_conclusion',
  ];
  if (in_array($node->bundle(), $types)) {
    /** @var \Drupal\mass_content_api\DescendantManagerInterface $descendant_manager */
    $descendant_manager = \Drupal::getContainer()->get('descendant_manager');
    $descendant_manager->index($node);
  }
  else {
    // Non decision tree nodes still need to be processed in queue.
    $queue = \Drupal::queue('mass_content_api_descendant_queue');
    $queue->createItem((object) ['id' => $node->id()]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For the purpose of providing developers or administrators with context we'll
 * leave some messaging on the node type form that indicates the proper steps to
 * take to edit the dependency settings.
 */
function mass_content_api_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  $config_name = $node->getConfigDependencyName();
  $bundle = $node->get('type');
  $config = \Drupal::config($config_name)->getRawData();
  if (!isset($config['third_party_settings'], $config['third_party_settings']['mass_content_api'])) {
    return;
  }
  $mass_settings = $config['third_party_settings']['mass_content_api'];
  $config_settings = '';
  foreach ($mass_settings as $setting_name => $settings) {
    $config_settings .= '<pre>' . $setting_name . ':</pre>';
    if (!empty($settings)) {
      foreach ($settings as $field_name => $children) {
        if (is_array($children)) {
          $config_settings .= '<ul><pre>' . $field_name . ':</pre>';
          $config_settings .= '<ul><pre>- ' . implode('</pre></ul><ul><pre>',
              $children) . '</pre></ul></ul>';
        }
        else {
          $config_settings .= '<ul><pre>' . $field_name . ':' . $children . '</pre></ul>';
        }
      }
    }
  }
  $re_queue = '<pre>hook_update_N() {</pre>
    <ul><pre>$descendant_queue = \Drupal::queue(\'mass_content_api_descendant_queue\');</pre>

    <pre>$query = \Drupal::entityQuery(\'node\');</pre>
    <pre>$query->condition(\'status\', 1)</pre>
      <ul><pre>->condition(\'type\', \'' . $bundle . '\');</pre></ul>

    <pre>$results = $query->execute();</pre>

    <pre>foreach ($results as $result) {</pre>
      <ul><pre>$queue_item = (object) [\'id\' => $result];</pre></ul>
      <ul><pre>$descendant_queue->createItem($queue_item);</pre></ul>
    <pre>}</pre></ul>
    <pre>}<pre>
    </pre>';

  // Create the group for the fields.
  $form['dependency_settings'] = [
    '#type' => 'details',
    '#title' => t('Dependency options'),
    '#weight' => 100,
    '#group' => 'additional_settings',
  ];

  $form['dependency_settings']['description'] = [
    '#type' => 'inline_template',
    '#template' => '<div> {% trans %} The configuration settings for {% endtrans %}
      <em>{{ bundle }}</em> {% trans %} can be edited directly in the {% endtrans %}
      <strong>{{ config_name }}.yml</strong> {% trans %} file. If you plan to update
      the configuration for this node type you must also re-queue all nodes of type
      {% endtrans %} <em>{{ bundle }}</em> {% trans %} to ensure their relationships are
      reprocessed. See below for information on how to re-queue nodes. The current
      configuration for {% endtrans %} <em>{{ bundle }}</em> {% trans %} is: {% endtrans %}
      {{ config_settings | raw }} {% trans %} To re-queue nodes use the following as a
      guide: {% endtrans %} {{ re_queue | raw }} </div>',
    '#context' => [
      'bundle' => $bundle,
      'config_name' => $config_name,
      'config_settings' => $config_settings,
      're_queue' => $re_queue,
    ],
  ];
}
