<?php

/**
 * @file
 * Installation functions for Mass Content API.
 */

use Drupal\Core\Database\Database;

/**
 * Implementations of hook_update_N().
 */

/**
 * Create the table to hold the content relationships.
 */
function mass_content_api_update_8100() {
  $spec = [
    'description' => 'Store parent child relationships of content.',
    'fields' => [
      'reporter' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The id of the entity that stores or reports this relationship.',
      ],
      'parent' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The id of the parent entity.',
      ],
      'child' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The id of the child entity.',
      ],
    ],
    'indexes' => [
      'reporter' => ['reporter'],
      'parent' => ['parent'],
    ],
  ];
  $schema = Database::getConnection()->schema();
  $schema->createTable('mass_content_api_descendants', $spec);
}

/**
 * Queue updates for service_pages to capture new child relationship.
 */
function mass_content_api_update_8101() {
  $queue = \Drupal::queue('mass_content_api_descendant_queue');

  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1)
    ->condition('type', 'service_page');

  $results = $query->execute();

  foreach ($results as $result) {
    $queue->createItem((object) ['id' => $result]);
  }
}

/**
 * Add a table to support storing various relationships.
 */
function mass_content_api_update_8102() {
  $spec = [
    'description' => 'Store parent child relationships of content.',
    'fields' => [
      'nid' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The id of the child entity.',
      ],
      'orgs' => [
        'type' => 'text',
        'size' => 'medium',
        'description' => 'A serialized representation of organization pages that are ancestors of this node.',
      ],
      'services' => [
        'type' => 'text',
        'size' => 'medium',
        'description' => 'A serialized representation of service pages that are ancestors of this node.',
      ],
      'topics' => [
        'type' => 'text',
        'size' => 'medium',
        'description' => 'A serialized representation of topic pages that are ancestors of this node.',
      ],
      'ancestors' => [
        'type' => 'text',
        'size' => 'medium',
        'description' => 'A serialized representation of ancestors of this node.',
      ],
    ],
  ];

  $schema = Database::getConnection()->schema();
  $schema->createTable('mass_content_api_relationships', $spec);
}

/**
 * Add a field for debug information.
 */
function mass_content_api_update_8103() {
  $spec = [
    'type' => 'text',
    'size' => 'medium',
    'description' => 'Stores debug about the relationship definition.',
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('mass_content_api_descendants', 'debug', $spec);
}

/**
 * Queue updates for "Location Page" nodes to capture new child relationship.
 */
function mass_content_api_update_8104() {
  $queue = \Drupal::queue('mass_content_api_descendant_queue');

  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1)
    ->condition('type', 'location');

  $results = $query->execute();

  foreach ($results as $result) {
    $queue->createItem((object) ['id' => $result]);
  }
}

/**
 * Update the org field to orgs.
 */
function mass_content_api_update_8105() {
  $spec = [
    'type' => 'text',
    'size' => 'medium',
    'description' => 'A serialized representation of organization pages that are ancestors of this node.',
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('mass_content_api_relationships', 'orgs', $spec);
  $schema->dropField('mass_content_api_relationships', 'org');
}

/**
 * Add index to the descendant relationship table.
 */
function mass_content_api_update_8106() {
  $schema = Database::getConnection()->schema();
  $schema->addPrimaryKey('mass_content_api_relationships', ['nid']);
}

/**
 * Queue published advisory, executive_order nodes to capture new relationships.
 */
function mass_content_api_update_8107() {
  $descendant_queue = \Drupal::queue('mass_content_api_descendant_queue');
  $relationship_queue = \Drupal::queue('mass_content_api_relationship_queue');

  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1)
    ->condition('type', ['advisory', 'executive_order'], 'IN');

  $results = $query->execute();

  foreach ($results as $result) {
    $queue_item = (object) ['id' => $result];
    $descendant_queue->createItem($queue_item);
    $relationship_queue->createItem($queue_item);
  }
}

/**
 * Add a field for impact information.
 */
function mass_content_api_update_8108() {
  $spec = [
    'type' => 'int',
    'not null' => FALSE,
    'description' => 'The id of the linking_page entity.',
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('mass_content_api_descendants', 'linking_page', $spec);
}

/**
 * Add a field for entity type information.
 */
function mass_content_api_update_8109() {
  $spec = [
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'default' => '',
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('mass_content_api_descendants', 'entity_type', $spec);
}

/**
 * Remove nodes with no associated type.
 */
function mass_content_api_update_8110() {
  $nodes = \Drupal::service('entity_type.manager')->getStorage('node')->loadMultiple([3306, 3311]);
  /** @var \Drupal\node\Entity\Node $node */
  foreach ($nodes as $node) {
    try {
      $node->delete();
    }
    catch (\Exception $e) {
      watchdog_exception('update', $e);
    }
  }
}

/**
 * Add index to child column of mass_content_api_descendants.
 */
function mass_content_api_update_8111() {
  $spec = [
    'fields' => [
      'child' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The id of the child entity.',
      ],
    ],
    'indexes' => [
      'mass_content_api_descendants' => [
        'child',
      ],
    ],
  ];
  $schema = Database::getConnection()->schema();
  $schema->addIndex('mass_content_api_descendants', 'mass_content_api_descendants_child', ['child'], $spec);
}

/**
 * Clean up after the removal of the relationships index.
 */
function mass_content_api_update_8012() {
  $schema = Database::getConnection()->schema();
  $schema->dropTable('mass_content_api_relationships');
  \Drupal::queue('mass_content_api_relationship_queue')->deleteQueue();
}

/**
 * Clean up the old descendants index table.
 */
function mass_content_api_update_8013() {
  $schema = Database::getConnection()->schema();
  $schema->dropTable('mass_content_api_descendants');
}

/**
 * Re-Queue descendants linking content information.
 */
function mass_content_api_update_8112() {
  // Node Types with new linked content data.
  $types = [
    'action',
    'advisory',
    'alert',
    'binder',
    'curated_list',
    'decision',
    'event',
    'executive_order',
    'form_page',
    'how_to_page',
    'info_details',
    'location',
    'news',
    'org_page',
    'regulation',
    'rules',
    'service_details',
    'utility_drawer',
    'location_details',
    'guide_page',
  ];
  $descendant_queue = \Drupal::queue('mass_content_api_descendant_queue');
  foreach ($types as $type) {
    $query = \Drupal::entityQuery('node');
    $query->condition('status', 1)
      ->condition('type', $type);
    $results = $query->execute();
    foreach ($results as $result) {
      $queue_item = (object) ['id' => $result];
      $descendant_queue->createItem($queue_item);
    }
  }
}
