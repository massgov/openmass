<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityPublishedInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\TypedData\Plugin\DataType\Uri;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_entity_insert().
 *
 * The extra logic to clear cache tags for referenced nodes is necessary because
 * the "Related to" blocks will not function properly without the node_list
 * cache tag.  Specifically, when a referencing entity is created or edited
 * to add a new reference, the page for the referenced entity will not be
 * invalidated since it does not yet contain the referencing entity's tag.
 *
 * An example of this problem is:
 *   - Create new Service Detail Page (SD) and view it.
 *   - Create new Service Page (SP) referencing SD via "Eligibility Info".
 *   - Visit SD and observe that SP _is not_ reflected in the "Related to" area.
 *   - Clear caches
 *   - Visit SD and observe that SP _is_ reflected in the "Related to" section.
 *
 * To work around this, we clear tags for all referenced entities when a
 * referencing entity is saved.  See https://github.com/massgov/mass/pull/1747
 * for a full discussion of the issue.
 */
function mass_fields_entity_insert(EntityInterface $entity) {
  mass_fields_entity_clear_referenced($entity);
}

/**
 * Implements hook_entity_update().
 */
function mass_fields_entity_update(EntityInterface $entity) {
  mass_fields_entity_clear_referenced($entity);
}

/**
 * Clear cache tags for referenced entities that match our criteria.
 *
 * Tags will be collected from nodes referenced in entity reference fields,
 * and in URL fields.
 */
function mass_fields_entity_clear_referenced(EntityInterface $entity) {
  $checked_types = ['node', 'paragraph', 'media'];
  if ($entity instanceof ContentEntityInterface && in_array($entity->getEntityTypeId(), $checked_types)) {
    // Skip tag clearing for unpublished entities.  It's assumed these will not
    // be displayed on referenced pages.
    if ($entity instanceof EntityPublishedInterface && !$entity->isPublished()) {
      return;
    }
    $referenceTags = mass_fields_get_tags_from_references($entity);
    $linkTags = mass_fields_get_tags_from_links($entity);

    $allTags = array_merge($referenceTags, $linkTags);
    if ($allTags) {
      Cache::invalidateTags($allTags);
    }
  }
}

/**
 * Retrieve a list of cache tags for referenced entities from entityref fields.
 */
function mass_fields_get_tags_from_references(ContentEntityInterface $entity) {
  $referenced = [];
  // Exclude computed fields.  We have some computed fields that execute queries
  // for entities. We don't want to cause those queries to execute.
  foreach ($entity->getFields(FALSE) as $field_items) {
    if ($field_items instanceof EntityReferenceFieldItemListInterface) {

      $referenced = array_merge($referenced, array_filter($field_items->referencedEntities(), function ($referencedEntity) {
        if ($referencedEntity->bundle() === 'org_page') {
          // These nodes are referenced by many pages, so lets not do such a wide cache invalidation.
          return FALSE;
        }

        // All referenced nodes are cleared.
        if (in_array($referencedEntity->getEntityTypeId(), ['media', 'node'])) {
          return TRUE;
        }
        // All referenced label terms are cleared. We use these to build dynamic
        // lists.  See mass_theme_preprocess_node_curated_list.
        if ($referencedEntity->getEntityTypeId() === 'taxonomy_term' && $referencedEntity->bundle() === 'label') {
          return TRUE;
        }

      }));
    }
  }

  return array_map(function (EntityInterface $entity) {
    return sprintf('%s:%d', $entity->getEntityTypeId(), $entity->id());
  }, $referenced);
}

/**
 * Retrieve a list of cache tags for referenced entities from link fields.
 */
function mass_fields_get_tags_from_links(ContentEntityInterface $entity) {
  $tags = [];
  foreach ($entity->getFields(FALSE) as $items) {
    foreach ($items as $item) {
      foreach ($item->getProperties(FALSE) as $property) {
        if ($property instanceof Uri) {
          if (preg_match('~^entity:node/(\d+)$~', $item->uri, $matches)) {
            $tags[] = sprintf('node:%d', $matches[1]);
          }
        }
      }
    }
  }
  return $tags;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mass_fields_entity_extra_field_info() {
  $extra = [];

  // Add the extra_sidebar_contact field to corresponding content types.
  $sidebar_types = ['binder', 'curated_list', 'info_details'];

  foreach ($sidebar_types as $sidebar_type) {
    $extra['node'][$sidebar_type]['display']['extra_sidebar_contact'] = [
      'label' => t('Sidebar Contact'),
      'description' => t('A copy of the contact with a sidebar view mode.'),
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  // Add the extra_node_pager field to corresponding content types.
  $pager_types = [
    'advisory',
    'curated_list',
    'decision',
    'executive_order',
    'form_page',
    'how_to_page',
    'info_details',
    'regulation',
    'rules',
  ];

  foreach ($pager_types as $pager_type) {
    $extra['node'][$pager_type]['display']['extra_node_pager'] = [
      'label' => t('Node Pager'),
      'description' => t('Displays the Next, Previous links in tandem with the Parent binder link.'),
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  // Used with Documents on Curated Lists.
  $extra['paragraph']['list_item_document']['display']['extra_list_linked_desc'] = [
    'label' => t('List with linked description'),
    'description' => t('Render the paragraph in a linked description display mode'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['paragraph']['list_item_document']['display']['extra_list_manual_desc'] = [
    'label' => t('List with manual description'),
    'description' => t('Render the paragraph in a manual description display mode'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  // Used on the org page.
  $extra['node']['org_page']['display']['extra_org_nav_contact_us'] = [
    'label' => t('Organization Navigation Contact Us Row'),
    'description' => t('A copy of the contact with a organization_navigation view mode.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_featured_services'] = [
    'label' => t('Organization Navigation Featured Services'),
    'description' => t('A copy of the contact with a org_nav_featured_services view mode.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_featured_topics'] = [
    'label' => t('Organization Navigation Featured Topics'),
    'description' => t('A copy of the featured topics field in the org_nav_featured_topics view mode.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_more_agency_link'] = [
    'label' => t('Organization Navigation More Agency Link'),
    'description' => t('A copy of the more agency links in the organization_navigation view mode.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_application_login_links'] = [
    'label' => t('Organization Navigation Application Login Links'),
    'description' => t('A copy of the about application login links field in the organization_navigation view mode.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_events'] = [
    'label' => t('Organization Navigation Events'),
    'description' => t('The org_events paragraph referenced in an organization section.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_locations'] = [
    'label' => t('Organization Navigation Locations'),
    'description' => t('The org_locations paragraph referenced in an organization section.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_news'] = [
    'label' => t('Organization Navigation News'),
    'description' => t('The org_news paragraph referenced in an organization section.'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['node']['org_page']['display']['extra_org_nav_our_organizations'] = [
    'label' => t('Organization Navigation Our Organizations'),
    'description' => t('The organization_grid paragraph referenced in an organization section.'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  // Add the extra_node_all_actions field to corresponding content types.
  $all_actions_types = [
    'org_page',
    'service_page',
  ];
  foreach ($all_actions_types as $type) {
    $extra['node'][$type]['display']['extra_node_all_actions'] = [
      'label' => t('All action links'),
      'description' => t('Lists all action links for a node.'),
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_entity_base_field_info().
 */
function mass_fields_entity_base_field_info(EntityTypeInterface $entity_type) {
  $options = [
    'type' => 'boolean_checkbox',
    'weight' => 99,
    'settings' => [
      'display_label' => TRUE,
    ],
  ];
  $search = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Exclude from search'))
    ->setDefaultValueCallback('mass_fields_search_default_value')
    ->setRevisionable(TRUE)
    ->setTranslatable(FALSE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', $options)
    ->setDescription('If you need to publish this content but hide it from search engines, check this box. If you change the value of this checkbox, it may take multiple days for your page to be added or removed from search.');
  $nosnippet = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Omit snippet in search results'))
    ->setDefaultValue(FALSE)
    ->setRevisionable(TRUE)
    ->setTranslatable(FALSE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', $options)
    ->setDescription('Tell search engines not to show a page description or excerpt after the result title. We recommend that you do not use this option as snippets help users choose a search result.');

  if (in_array($entity_type->id(), ['media', 'node'])) {
    $fields['search'] = $search;

    if ($entity_type->id() == 'node') {
      $fields['search_nosnippet'] = $nosnippet;
    }
    return $fields;
  }
}

/**
 * A default value field api callback for 'search' field.
 *
 * @see https://chromatichq.com/insights/dynamic-default-and-allowed-values-list-fields-drupal-8/
 */
function mass_fields_search_default_value(ContentEntityInterface $entity) {
  $is_indexed = \Drupal::service('simple_sitemap.generator')->entityManager()->bundleIsIndexed($entity->getEntityTypeId(), $entity->bundle());
  return [
    ['value' => !$is_indexed],
  ];
}

/**
 * Get org_page section data for display fields used in SubNav.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function _mass_fields_get_org_page_sections_data(EntityInterface $entity) {
  // Initalize the return array.
  $org_page_field_data = [];
  // If there no sections, return an empty array.
  if ($entity->get('field_organization_sections')->isEmpty()) {
    return $org_page_field_data;
  }
  // Get the sections field value.
  $field_organization_sections = $entity->get('field_organization_sections')->getValue();
  // Loop through the sections.
  foreach ($field_organization_sections as $section_key => $section_value) {
    // Get the section entity.
    $section_entity = $entity->get('field_organization_sections')[$section_key]->entity;
    // If the section content field is empty, continue to the next section.
    if ($section_entity->get('field_section_long_form_content')->isEmpty()) {
      continue;
    }
    // Get the section content field value.
    $field_section_long_form_content = $section_entity->get('field_section_long_form_content')->getValue();
    // Loop through the section content paragraphs.
    foreach ($field_section_long_form_content as $content_key => $content_value) {
      // Get the content paragraph entity.
      $content_entity = $section_entity->get('field_section_long_form_content')[$content_key]->entity;
      // Get the paragraph type.
      if ($content_entity) {
        $paragraph_type = $content_entity->bundle();
        // For certain paragraph types, get field data and store in return array.
        switch ($paragraph_type) {
          case 'about':
            $org_page_field_data['about']['entities'][] = $content_entity;
            break;

          case 'featured_topics':
            $org_page_field_data['field_featured_topics_topics']['build'] = $content_entity->field_featured_topics_topics->view();
            $org_page_field_data['field_featured_topics_topics']['entities'] = $content_entity->field_featured_topics_topics->referencedEntities();
            break;

          case 'org_events':
            $org_page_field_data['org_events']['entities'][] = $content_entity;
            break;

          case 'org_locations':
            $org_page_field_data['org_locations']['entities'][] = $content_entity;
            break;

          case 'org_news':
            $org_page_field_data['org_news']['entities'][] = $content_entity;
            break;

          case 'organization_grid':
            $org_page_field_data['organization_grid']['entities'][] = $content_entity;
            break;

          case 'what_would_you_like_to_do':
            $org_page_field_data['field_wwyltd_top_s_links']['value'] = $content_entity->get('field_wwyltd_top_s_links')
              ->getValue();
            $org_page_field_data['field_wwyltd_top_s_links']['build'] = $content_entity->field_wwyltd_top_s_links->view();
            $org_page_field_data['field_wwyltd_more_services']['value'] = $content_entity->get('field_wwyltd_more_services')
              ->getValue();
            $org_page_field_data['field_wwyltd_more_services']['build'] = $content_entity->field_wwyltd_more_services->view();
            $org_page_field_data['field_wwyltd_more_services']['entities'] = $content_entity->field_wwyltd_more_services->referencedEntities();
            break;
        }
      }
    }
  }
  return $org_page_field_data;
}

/**
 * Prepare a link field with node titles for missing node link titles.
 *
 * @param array $field_build
 *   The link field value.
 *
 * @return array
 *   Updated field value array.
 */
function _mass_fields_prepare_link_field_build(array &$field_build) {
  $entityTypeManager = \Drupal::entityTypeManager();
  // Ensure all links have titles.
  foreach ($field_build['#items'] as $delta => $item) {
    $test = $item->uri;
    if (strpos($item->uri, 'entity:') !== FALSE) {
      [$entity_type, $entity_id] = explode('/', str_replace('entity:', '', $item->uri));
      $storage = $entityTypeManager->getStorage('node');
      $node = $storage->load($entity_id);
      if ($node !== NULL && $node->isPublished() === TRUE) {
        // Override the node title with the link title.
        if ($item->title !== '' && $item->title !== $node->title->value) {
          $node->set('title', $item->title);
        }
        // Update the title value.
        $field_build[$delta]['#title'] = $node->label();
      }
    }
  }
  return $field_build;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function mass_fields_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $entityTypeManager = \Drupal::entityTypeManager();

  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'org_page' && $view_mode == 'full') {
    $org_page_sections_data = _mass_fields_get_org_page_sections_data($entity);
  }

  if ($display->getComponent('extra_sidebar_contact') && !empty($build['field_contact'])) {
    $build['extra_sidebar_contact'] = $build['field_contact'];
    $build['extra_sidebar_contact']['#field_name'] = 'extra_sidebar_contact';
    foreach (Element::children($build['extra_sidebar_contact']) as $key) {
      $item = &$build['extra_sidebar_contact'][$key];
      $item['#view_mode'] = 'sidebar';
      $item['#field_name'] = 'extra_sidebar_contact';
      // Prevent the cache from the contact field from interfering with this.
      if (!empty($item['#cache']['keys'])) {
        foreach ($item['#cache']['keys'] as &$key) {
          if ($key == 'contact_list') {
            $key = 'sidebar';
          }
        }
      }
    }
  }
  // Pass information from a curated list item of a person with a contact on contact information node.
  if ($display->getComponent('field_contact') && !empty($build['#to_show'])) {
    foreach (Element::children($build['field_contact']) as $key) {
      $item = &$build['field_contact'][$key];
      $item['#to_show'] = $build['#to_show'];
      // Vary the cache by the contact elements to show.
      $item['#cache']['keys'][] = implode('.', $build['#to_show']);
    }
  }
  // Set access to control what contact information is shown on curated list items.
  if (isset($build['#to_show'])) {
    if ($entity->bundle() === 'person' && $entity->field_contact_source->value === 'node') {
      $build['field_ref_links']['#access'] = in_array('online', $build['#to_show']);
      $build['field_ref_phone']['#access'] = in_array('phone', $build['#to_show']);
      $build['field_ref_single_address']['#access'] = in_array('address', $build['#to_show']);
      $build['field_ref_fax']['#access'] = in_array('fax', $build['#to_show']);
    }
    elseif ($entity->bundle() === 'contact_information') {
      $build['field_ref_links']['#access'] = in_array('online', $build['#to_show']);
      $build['field_ref_phone_number']['#access'] = in_array('phone', $build['#to_show']);
      $build['field_ref_address']['#access'] = in_array('address', $build['#to_show']);
      $build['field_ref_fax_number']['#access'] = in_array('fax', $build['#to_show']);
    }
  }

  if ($display->getComponent('extra_org_nav_featured_services')
    && (!empty($org_page_sections_data['field_wwyltd_top_s_links']['build'][0]) || !empty($org_page_sections_data['field_wwyltd_more_services']['build'][0]))) {
    // If there are featured services links, copy them.
    if (!empty($org_page_sections_data['field_wwyltd_top_s_links']['build'][0])) {
      // Ensure all links have titles.
      _mass_fields_prepare_link_field_build($org_page_sections_data['field_wwyltd_top_s_links']['build']);
      $build['extra_org_nav_featured_services'] = $org_page_sections_data['field_wwyltd_top_s_links']['build'];
      // If there are "More services" links, add them to the render array.
      if (!empty($org_page_sections_data['field_wwyltd_more_services']['build'][0])) {
        $build['extra_org_nav_featured_services'] = array_merge($build['extra_org_nav_featured_services'], $org_page_sections_data['field_wwyltd_more_services']['build']);
      }
    }
    else {
      $build['extra_org_nav_featured_services'] = $org_page_sections_data['field_wwyltd_more_services']['build'];
    }

    $build['extra_org_nav_featured_services']['#view_mode'] = 'org_nav_featured_services';
    $build['extra_org_nav_featured_services']['#field_name'] = 'extra_org_nav_featured_services';
  }

  if ($display->getComponent('extra_org_nav_application_login_links')&& (!empty($build['field_application_login_links']))) {
    $build['extra_org_nav_application_login_links'] = $build['field_application_login_links'];
    $build['extra_org_nav_application_login_links']['#field_name'] = 'extra_org_nav_application_login_links';
  }

  if ($display->getComponent('extra_org_nav_featured_topics')
    && !empty($org_page_sections_data['field_featured_topics_topics']['entities'])) {
    foreach ($org_page_sections_data['field_featured_topics_topics']['entities'] as $linked) {
      $builder = $entityTypeManager->getViewBuilder($linked->getEntityTypeId());
      $item = $builder->view($linked, 'org_nav_featured_topics');
      $item['#field_name'] = 'extra_org_nav_featured_topics';
      $build['extra_org_nav_featured_topics'][] = $item;
    }
  }

  if ($display->getComponent('extra_org_nav_contact_us') && !empty($build['field_ref_contact_info_1'])) {
    // Whether there is a location listings page.
    $has_location_listing_page =
      $entity->field_org_ref_locations ?? FALSE &&
      !$entity->field_org_ref_locations->isEmpty();
    // The org page's location listing URL.
    $location_listings_url = Url::fromRoute('view.locations.page', ['node' => $entity->id()])->toString();

    foreach ($entity->field_ref_contact_info_1->referencedEntities() as $linked) {
      $builder = $entityTypeManager->getViewBuilder($linked->getEntityTypeId());
      $item = $builder->view($linked, 'organization_navigation');
      $item['#field_name'] = 'extra_org_nav_contact_us';
      $item['location_listings_url'] = [
        '#markup' => $location_listings_url,
        '#access' => $has_location_listing_page,
      ];

      $build['extra_org_nav_contact_us'][] = $item;
    }
  }

  if ($display->getComponent('extra_org_nav_more_agency_link') && !empty($org_page_sections_data['about'])) {
    foreach ($org_page_sections_data['about']['entities'] as $linked) {
      $builder = $entityTypeManager->getViewBuilder($linked->getEntityTypeId());
      $item = $builder->view($linked, 'organization_navigation');
      $item['#field_name'] = 'extra_org_nav_more_agency_link';
      $build['extra_org_nav_more_agency_link'][] = $item;
    }
  }

  // Provide a value that represents the presence of an organization events.
  if ($display->getComponent('extra_org_nav_events') && !empty($org_page_sections_data['org_events'])) {
    $build['extra_org_nav_events'] = $org_page_sections_data['org_events']['entities'];
  }

  // Provide a value that represents the presence of an organization locations.
  if ($display->getComponent('extra_org_nav_locations') && !empty($org_page_sections_data['org_locations'])) {
    $build['extra_org_nav_locations'] = $org_page_sections_data['org_locations']['entities'];
  }

  // Provide a value that represents the presence of an organization news.
  if ($display->getComponent('extra_org_nav_news') && !empty($org_page_sections_data['org_news'])) {
    $build['extra_org_nav_news'] = $org_page_sections_data['org_news']['entities'];
  }

  // Provide a value that represents the presence of an organization grid.
  if ($display->getComponent('extra_org_nav_our_organizations') && !empty($org_page_sections_data['organization_grid'])) {
    $build['extra_org_nav_our_organizations'] = $org_page_sections_data['organization_grid']['entities'];
  }

  if ($display->getComponent('extra_node_pager') && !empty($build['referencing_binders'][0])) {
    $pagers = ['page_next', 'page_previous'];
    foreach ($pagers as $pager) {
      $cache_tags = [];
      $link[$pager] = NULL;
      if ($entity->hasField($pager) && !$entity->get($pager)->isEmpty()) {
        $link_value = $entity->get($pager)->getValue();
        $cache_tags = array_merge($link_value[0]['cache_tags']);
        $link[$pager] = [
          'url' => Url::fromUri($link_value[0]['uri']),
          'title' => $link_value[0]['title'],
          'tags' => $link_value[0]['cache_tags'],
        ];
      }
    }
    $build['extra_node_pager'] = [
      '#theme' => 'extra_node_pager',
      '#next' => $link['page_next'],
      '#previous' => $link['page_previous'],
      '#parent' => $entity->referencing_binders,
      '#cache' => [
        'tags' => $cache_tags,
      ],
    ];
  }

  if ($display->getComponent('extra_node_all_actions')) {
    if ($entity->bundle() === 'org_page') {
      // If there are featured services links, copy them.
      if (!empty($org_page_sections_data['field_wwyltd_top_s_links'])) {
        $build['extra_node_all_actions'] = $org_page_sections_data['field_wwyltd_top_s_links']['build'];
        foreach ($org_page_sections_data['field_wwyltd_top_s_links']['value'] as $delta => $item) {
          if (strpos($item['uri'], 'entity:') !== FALSE) {
            [$entity_type, $entity_id] = explode('/', str_replace('entity:', '', $item['uri']));

            $view_builder = $entityTypeManager->getViewBuilder('node');
            $storage = $entityTypeManager->getStorage('node');
            $node = $storage->load($entity_id);
            if ($node) {
              $build['extra_node_all_actions'][$delta] = $view_builder->view($node, 'title_short_desc');
            }
          }
          else {
            $build['extra_node_all_actions'][$delta] = [
              '#url_title' => $item['uri'],
              '#title' => $item['title'],
            ];
          }
        }

        // If there are "More services" links, add them to the render array.
        if (!empty($org_page_sections_data['field_wwyltd_more_services'])) {
          foreach ($org_page_sections_data['field_wwyltd_more_services']['entities'] as $linked) {
            $builder = $entityTypeManager->getViewBuilder($linked->getEntityTypeId());
            $item = $builder->view($linked, 'title_short_desc');
            $item['#field_name'] = 'extra_node_all_actions';
            $build['extra_node_all_actions'][] = $item;
          }
        }
      }
      elseif (!empty($org_page_sections_data['field_featured_topics_topics'])) {
        $build['extra_node_all_actions'] = $org_page_sections_data['field_featured_topics_topics']['build'];
      }
      $build['extra_node_all_actions']['#view_mode'] = 'title_short_desc';
      $build['extra_node_all_actions']['#field_name'] = 'extra_node_all_actions';
    }
  }
  // In Service Details sections, the link presented at the bottom of Additional Resources should show a total of the
  // links for all sections. Because this needs to reach into multiple paragraphs, it must be calculated where there is
  // access to the multiple paragraphs and then pushed into any that have more than 6 links.
  if ($entity->bundle() === 'service_details') {
    $total = 0;
    $more_links = [];
    foreach ($entity->field_service_detail_sections as $delta => $section) {
      $subtotal = 0;
      if ($section->entity && $section->entity->bundle() === 'section') {
        $subtotal += $section->entity->field_section_links->count();
        $subtotal += $section->entity->field_section_downloads->count();
        $total += $subtotal;
      }
      if ($subtotal > 6) {
        array_push($more_links, $delta);
      }
    }
    if ($view_mode !== 'title_short_desc') {
      foreach ($more_links as $delta) {
        // See paragraph--section.html.twig for the usage of this more link.
        $build['field_service_detail_sections'][$delta]['more'] = [
          'href' => Url::fromRoute('mass_more_lists.mass_more_lists_buildList', ['node' => $entity->id()])
            ->toString(),
          'text' => t('See all @count', ['@count' => $total]),
          'chevron' => TRUE,
          'labelContext' => t('See all of the resources for @title', ['@title' => $entity->label()]),
        ];
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function mass_fields_paragraph_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Pass information from an automatic / dynamic curated list to controll what contact information is displayed.
  if ($display->getComponent('computed_dynamic_directory')) {
    $to_show = array_column($entity->field_contact_values_to_display->getValue(), 'value');
    foreach (Element::children($build['computed_dynamic_directory']) as $key) {
      $item = &$build['computed_dynamic_directory'][$key];
      $item['#to_show'] = $to_show;
      // Vary the cache by the contact elements to show.
      $item['#cache']['keys'][] = implode('.', $item['#to_show']);
    }
  }
  // Pass information from a curated list item for a contact information node or person node to control the contact
  // information that should be displayed.
  if ($entity->hasField('field_contact_values_to_display') && ($display->getComponent('field_contact') || $display->getComponent('field_person'))) {
    // Contacts.
    if (!empty($build['field_contact'])) {
      $target = &$build['field_contact'];
    }
    // Persons.
    else {
      $target = &$build['field_person'];
    }
    $target[0]['#to_show'] = array_column($entity->field_contact_values_to_display->getValue(), 'value');
    // Vary the cache by the contact elements to show.
    $target[0]['#cache']['keys'][] = implode('.', $target[0]['#to_show']);
  }
  // Add a version of the curated list document for linked description.
  if ($display->getComponent('extra_list_linked_desc')) {
    $entityTypeManager = \Drupal::entityTypeManager();
    foreach ($entity->field_liststaticdoc_item->referencedEntities() as $linked) {
      $builder = $entityTypeManager->getViewBuilder($linked->getEntityTypeId());
      $item = $builder->view($linked, 'linked_desc');
      $item['#field_name'] = 'extra_list_linked_desc';
      $build['extra_list_linked_desc'][] = $item;
    }
  }

  // Add a version of the curated list document for manual description.
  if ($display->getComponent('extra_list_manual_desc')) {
    $entityTypeManager = \Drupal::entityTypeManager();
    foreach ($entity->field_liststaticdoc_item->referencedEntities() as $linked) {
      $builder = $entityTypeManager->getViewBuilder($linked->getEntityTypeId());
      $item = $builder->view($linked, 'manual_desc');
      $item['#options']['manual_description'] = $build['field_listitemdoc_desc_manual'];
      $item['#field_name'] = 'extra_list_manual_desc';
      // Vary the cache by the SHA of the description so that updating the description updates the display.
      if (!$entity->getManualDescription()->isEmpty()) {
        $item['#cache']['keys'][] = sha1($entity->getManualDescription()->value);
      }

      $build['extra_list_manual_desc'][] = $item;
    }
  }
}

/**
 * Implements hook_entity_field_access().
 */
function mass_fields_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // This is being used to hide the custom HTML field from all roles without permission.
  // At this point only Admin have access.
  if ($operation === 'edit') {
    switch ($field_definition->getName()) {
      case 'field_campaign_custom_html':
        return AccessResult::forbiddenIf(!$account->hasPermission("access the custom_html field"));

      // See DP-23754: data hub tagging permissions.
      case 'field_data_flag':
      case 'field_data_format':
      case 'field_data_resource_type':
      case 'field_data_topic':
      case 'field_details_data_type':
      case 'field_binder_data_type':
      case 'field_list_data_type':
        // See DP-26260: Add field to data metadata fields so we can
        // paste in additional content to search.
      case 'field_data_search_content':
        return AccessResult::forbiddenIf(!$account->hasPermission("access data flag fields"));
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_theme().
 */
function mass_fields_theme() {
  $base_theme = \Drupal::service('extension.list.theme')->getPath('mass_theme');
  return [
    'extra_node_pager' => [
      'path' => $base_theme . '/templates/field',
      'variables' => [
        'next' => [],
        'previous' => [],
        'parent' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_fields_form_node_form_alter(&$form, FormStateInterface $form_state) {
  mass_fields_do_form_alter($form, $form_state);
  if (empty($form['search_nosnippet'])) {
    return;
  }

  // Do same for no snippet field.
  $form['search_status']['search_nosnippet'] = $form['search_nosnippet'];
  // Nosnippet only makes sense if search is enabled.
  $form['search_status']['search_nosnippet']['#states'] = [
    'enabled' => [
      ':input[name="search[value]"]' => ['checked' => FALSE],
    ],
  ];
  // Remove the original checkbox in the main section.
  unset($form['search_nosnippet']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_fields_form_media_form_alter(&$form, FormStateInterface $form_state) {
  mass_fields_do_form_alter($form, $form_state);
}

/**
 * Place the 'Exclude from search' checkbox.
 */
function mass_fields_do_form_alter(&$form, FormStateInterface $form_state) {
  if (empty($form['search'])) {
    return;
  }

  /** @var ContentEntityInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $is_indexed = \Drupal::service('simple_sitemap.generator')->entityManager()->bundleIsIndexed($entity->getEntityTypeId(), $entity->bundle());
  $form['search_status'] = [
    '#type' => 'details',
    '#group' => 'advanced',
    '#open' => FALSE,
    '#title' => t('Search status'),
    '#weight' => 55,
    '#access' => $is_indexed,
  ];
  // Copy the checkbox field into the advanced group.
  $form['search_status']['search'] = $form['search'];

  // Remove the original checkbox in the main section.
  unset($form['search']);
}

/**
 * Restricts fields on topic pages based on field_restrict_link_management.
 *
 * Users with create topic page permission will not be restricted.
 * For users with "edit any topic page" permission
 * and without "create topic page" permission...
 * - If the restriction is checked, they wont be able to edit any field.
 * - If the restriction is unchecked, they will be able to use $allowed_fields:
 *   - Intended audience
 *   - Organizations
 *   - Labels
 *   - Link groups
 *   - Workflow states.
 *   - Action (save/preview)
 */
function _mass_fields_form_node_topic_page_edit_restrict_fields(&$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser();
  $user_can_create_topic_page = $user->hasPermission('create topic_page content');
  if ($user_can_create_topic_page) {
    return;
  }

  /** @var \Drupal\node\NodeForm */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\Entity\Node */
  $node = $form_object->getEntity();

  // Setting allowed fields based on the restriction.
  $restricted = $node->field_restrict_link_management->value ?? FALSE;
  $allowed_fields = $restricted ? [] : [
    // We want revisions as well.
    'revision_log',
    // These fields are the ones we want to allow.
    'field_intended_audience',
    'field_organizations',
    'field_reusable_label',
    'field_topic_content_cards',
    // Workflow.
    'moderation_state',
    // Save & preview.
    'actions',
  ];

  foreach ($form as $key => &$element) {
    if (in_array($key, $allowed_fields)) {
      $element['#disabled'] = FALSE;
      continue;
    }

    // Only disabling form elements.
    if (!is_array($element) || !isset($element['#type'])) {
      continue;
    }

    // Token & hidden types are necessary for submission.
    if (in_array($element['#type'], ['token', 'hidden'])) {
      continue;
    }

    $element['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_fields_form_node_topic_page_edit_form_alter(&$form, FormStateInterface $form_state) {
  _mass_fields_form_node_topic_page_edit_restrict_fields($form, $form_state);
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function mass_fields_field_widget_single_element_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  _mass_fields_conditions_for_paragraphs($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function mass_fields_field_widget_single_element_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  _mass_fields_conditions_for_paragraphs($element, $form_state, $context);
}

/**
 * Helper function to define conditional logic for paragraphs.
 */
function _mass_fields_conditions_for_paragraphs(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_service_sections' || $paragraph_entity_reference_field_name == 'field_header' || $paragraph_entity_reference_field_name == 'field_organization_sections' || $paragraph_entity_reference_field_name == 'field_location_details_sections' || $paragraph_entity_reference_field_name == 'field_service_section_content' || $paragraph_entity_reference_field_name == 'field_sections' || $paragraph_entity_reference_field_name == 'field_section_long_form_content') {
    $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    if ($paragraph_instance) {
      $paragraph_type = $paragraph_instance->bundle();
      // Determine which paragraph type is being embedded.
      switch ($paragraph_type) {
        case 'key_message':
          $dependee_field_name = 'field_background_type';
          $selector = sprintf('input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);
          $element['subform']['field_background_color']['#states'] = [
            'visible' => [
              $selector => ['value' => 'color'],
            ],
            'invisible' => [
              $selector => ['value' => 'image'],
            ],
          ];
          $element['subform']['field_text_overlay_color']['#states'] = [
            'visible' => [
              $selector => ['value' => 'image'],
            ],
            'invisible' => [
              $selector => ['value' => 'color'],
            ],
          ];
          break;
        case 'org_section_long_form':
          $dependee_field_name = 'field_hide_heading';
          $selector = sprintf('input[name="%s[%d][subform][%s][value]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);
          $element['subform']['field_hide_in_org_navigation']['#states'] = [
            'invisible' => [
              $selector => ['checked' => TRUE],
            ],
          ];
          $element['subform']['field_org_navigation_jump_link_t']['#states'] = [
            'invisible' => [
              $selector => ['checked' => TRUE],
            ],
          ];
          break;
        case 'flexible_link_group':
          $dependee_field_name = 'field_display_type';
          $selector = sprintf('select[name="%s[%d][subform][%s][%d][subform][%s]"]',
            $element['#field_parents'][0],
            $element['#field_parents'][1],
            $paragraph_entity_reference_field_name,
            $element['#delta'],
            $dependee_field_name);
          // Dependent fields.
          $element['subform']['field_featured']['#states'] = [
            'invisible' => [
              $selector => ['value' => 'links'],
            ],
          ];
          $element['subform']['field_group_expanded']['#states'] = [
            'visible' => [
              $selector => ['value' => 'links'],
            ],
          ];
          $element['subform']['field_flexible_link_group_title']['#states'] = [
            'required' => [
              $selector => ['value' => 'links'],
            ],
          ];
          break;
        case 'collection_search':
          $dependee_field_name = 'field_search_type';
          $selector = sprintf('select[name="%s[%d][subform][%s][%d][subform][%s]"]',
            $element['#field_parents'][0],
            $element['#field_parents'][1],
            $paragraph_entity_reference_field_name,
            $element['#delta'],
            $dependee_field_name);

          if ($paragraph_entity_reference_field_name == 'field_sections') {
            $selector = sprintf('select[name="%s[%d][subform][%s]"]',
              $paragraph_entity_reference_field_name,
              $element['#delta'],
              $dependee_field_name);
          }

          // Dependent fields.
          $element['subform']['field_collection']['#states'] = [
            'visible' => [
              $selector => ['value' => 'collection'],
            ],
            'required' => [
              $selector => ['value' => 'collection'],
            ],
          ];

          // Dependent fields.
          $element['subform']['field_search_site_url']['#states'] = [
            'visible' => [
              $selector => ['value' => 'external'],
            ],
            'required' => [
              $selector => ['value' => 'external'],
            ],
          ];

          // Dependent fields.
          $element['subform']['field_search_query_param_name']['#states'] = [
            'visible' => [
              $selector => ['value' => 'external'],
            ],
            'required' => [
              $selector => ['value' => 'external'],
            ],
          ];
          break;

        case 'iframe':
          $dependee_field_name = 'field_iframe_height_config';
          $selector = sprintf('input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);

          // Dependent fields.
          $element['subform']['field_verify_iframe_100_confirm']['widget']['value']['#states'] = [
            'required' => [
              $selector => ['value' => '100'],
            ],
          ];
          $element['subform']['field_verify_iframe_100_confirm']['#states'] = [
            'visible' => [
              $selector => ['value' => '100'],
            ],
          ];
          $element['subform']['field_aspect_ratio']['widget']['#states'] = [
            'required' => [
              $selector => ['value' => 'ratio'],
            ],
          ];
          $element['subform']['field_aspect_ratio']['#states'] = [
            'visible' => [
              $selector => ['value' => 'ratio'],
            ],
          ];

          $element['subform']['field_height']['widget'][0]['value']['#states'] = [
            'required' => [
              $selector => ['value' => 'fixed'],
            ],
          ];
          $element['subform']['field_height']['#states'] = [
            'visible' => [
              $selector => ['value' => 'fixed'],
            ],
          ];
          break;
        case 'key_message_section':
          $dependee_field_name = 'field_background_type';
          $selector = sprintf('input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);

          // Dependent fields.
          $element['subform']['field_image']['#states'] = [
            'visible' => [
              $selector => ['value' => 'image'],
            ],
            'required' => [
              $selector => ['value' => 'image'],
            ],
          ];

          $element['subform']['field_section_background_color']['#states'] = [
            'visible' => [
              $selector => ['value' => 'color'],
            ],
            'required' => [
              $selector => ['value' => 'color'],
            ],
          ];

          $element['subform']['field_section_text_overlay_color']['#states'] = [
            'visible' => [
              $selector => ['value' => 'image'],
            ],

          ];
          break;

      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function mass_fields_entity_presave(EntityInterface $entity) {
  if ($entity instanceof Node || $entity instanceof Paragraph) {
    // Get the URL replacement service.
    $urlReplacementService = \Drupal::service('mass_fields.url_replacement_service');

    foreach ($entity->getFields() as $field) {
      $fieldType = $field->getFieldDefinition()->getType();
      if (in_array($fieldType, ['text_long', 'text_with_summary', 'string_long'])) {
        foreach ($field as $item) {
          $processed = $urlReplacementService->processText($item->value);
          if ($processed['changed']) {
            $item->value = $processed['text'];
          }
        }
      }
    }
  }
}
