<?php

/**
 * @file
 * Contains scheduler_media.module.
 */

use Drupal\scheduler_media\EntityTypeInfo;
use Drupal\scheduler_media\EntityOperations;
use Drupal\scheduler_media\ContentPreprocess;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\media\Entity\MediaType;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Adds base field info to an entity type.
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *   Entity type for adding base fields to.
 *
 * @return \Drupal\Core\Field\BaseFieldDefinition[]
 *   New fields added by scheduler_media.
 */
function scheduler_media_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'media') {
    $fields['publish_state'] = BaseFieldDefinition::create('list_string')
      ->setSetting('allowed_values_function', '_scheduler_content_moderation_integration_states_values')
      ->setLabel(t('Publish state'))
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayOptions('form', [
        'type' => 'scheduler_moderation',
        'weight' => 30,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', FALSE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->addConstraint('SchedulerMediaPublishState');

    $fields['unpublish_state'] = BaseFieldDefinition::create('list_string')
      ->setSetting('allowed_values_function', '_scheduler_content_moderation_integration_states_values')
      ->setLabel(t('Unpublish state'))
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayOptions('form', [
        'type' => 'scheduler_moderation',
        'weight' => 30,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', FALSE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->addConstraint('SchedulerMediaUnpublishState');

    $fields['publish_on'] = BaseFieldDefinition::create('timestamp')
      ->setLabel(t('Publish on'))
      ->setDisplayOptions('form', [
        'type' => 'datetime_timestamp_no_default',
        'weight' => 30,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->addConstraint('SchedulerMediaPublishOn');

    $fields['unpublish_on'] = BaseFieldDefinition::create('timestamp')
      ->setLabel(t('Unpublish on'))
      ->setDisplayOptions('form', [
        'type' => 'datetime_timestamp_no_default',
        'weight' => 30,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->addConstraint('SchedulerMediaUnpublishOn');

    return $fields;
  }
}

/**
 * Implements hook_entity_presave().
 */
function scheduler_media_entity_presave(EntityInterface $entity) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->entityPresave($entity);
}

/**
 * Implements hook_form_alter().
 */
function scheduler_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->formAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function scheduler_media_preprocess_media(&$variables) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ContentPreprocess::class)
    ->preprocessMedia($variables);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function scheduler_media_entity_extra_field_info() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->entityExtraFieldInfo();
}

/**
 * Implements hook_entity_view().
 */
function scheduler_media_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->entityView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_cron().
 */
function scheduler_media_cron() {
  // Use drupal_static so that any function can find out if we are running
  // Scheduler cron. Set the default value to FALSE, then turn on the flag.
  // @see scheduler_cron_is_running()
  $scheduler_cron = &drupal_static(__FUNCTION__, FALSE);
  $scheduler_cron = TRUE;

  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
  $scheduler_manager = \Drupal::service('scheduler_media.manager');
  $scheduler_manager->publish();
  $scheduler_manager->unpublish();

  // Scheduler 7.x provided hook_scheduler_api() which has been replaced by
  // event dispatching in 8.x. Display a warning in the log if any of these
  // hooks still exist, so that admins and developers are informed.
  foreach (Drupal::moduleHandler()->getImplementations('scheduler_media_api') as $module) {
    \Drupal::logger('scheduler_media')->warning('Function %function has not been executed. In Drupal 8, implementations of hook_scheduler_api() should be replaced by Scheduler event listeners.', [
      '%function' => $module . '_scheduler_api',
    ]);
  }

  // Reset the static scheduler_cron flag.
  drupal_static_reset(__FUNCTION__);
}

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * This function exposes publish_on and unpublish_on as mappable targets to the
 * Feeds module.
 *
 * @todo Port to Drupal 8.
 *
 * @see https://www.drupal.org/media/2651354
 */
function scheduler_media_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  $config = \Drupal::config('scheduler_media.settings');

  // Scheduler module only works on medias.
  if ($entity_type == 'media') {
    $publishing_enabled = $entity_type->getThirdPartySetting('scheduler_media', 'publish_enable', $config->get('default_publish_enable'));
    $unpublishing_enabled = $entity_type->getThirdPartySetting('scheduler_media', 'unpublish_enable', $config->get('default_unpublish_enable'));

    if ($publishing_enabled) {
      $targets['publish_on'] = [
        'name' => t('Scheduler: publish on'),
        'description' => t('The date when the Scheduler module will publish the media.'),
        'callback' => 'scheduler_media_feeds_set_target',
      ];
    }
    if ($unpublishing_enabled) {
      $targets['unpublish_on'] = [
        'name' => t('Scheduler: unpublish on'),
        'description' => t('The date when the Scheduler module will unpublish the media.'),
        'callback' => 'scheduler_media_feeds_set_target',
      ];
    }
  }
}

/**
 * Mapping callback for the Feeds module.
 *
 * @todo Port to Drupal 8.
 *
 * @see https://www.drupal.org/media/2651354
 */
function scheduler_media_feeds_set_target($source, $entity, $target, $value, $mapping) {
  // We expect a string or integer, but can accomodate an array, by taking the
  // first item. Use trim() so that a string of blanks is reduced to empty.
  $value = is_array($value) ? trim(reset($value)) : trim($value);

  // Convert input from parser to timestamp form. If $value is empty or blank
  // then strtotime() must not be used, otherwise it returns the current time.
  if (!empty($value) && !is_numeric($value)) {
    if (!$timestamp = strtotime($value)) {
      throw new FeedsValidationException(
        // Throw an exception if the date format was not recognized.
        t('Value %value for @source could not be converted to a valid %target date.', [
          '@source' => $mapping['source'],
          '%value' => $value,
          '%target' => $target,
        ])
      );
    }
  }
  else {
    $timestamp = $value;
  }

  // If the timestamp is valid then use it to set the target field in the media.
  if (is_numeric($timestamp) && $timestamp > 0) {
    $entity->$target = $timestamp;
  }
}

/**
 * Returns all content types for which scheduler_media has been enabled.
 *
 * @param string $action
 *   The action that needs to be checked. Can be 'publish' or 'unpublish'.
 *
 * @return \Drupal\media\MediaTypeInterface[]
 *   Array of NodeTypeInterface objects
 */
function _scheduler_media_get_scheduler_media_enabled_media_types($action) {
  $config = \Drupal::config('scheduler_media.settings');
  $media_types = MediaType::loadMultiple();
  return array_filter($media_types, function ($bundle) use ($action, $config) {
    /* @var \Drupal\media\MediaTypeInterface $bundle */
    return $bundle->getThirdPartySetting('scheduler_media', $action . '_enable', $config->get('default_' . $action . '_enable'));
  });
}
