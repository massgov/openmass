<?php

/**
 * @file
 * Contains mayflower.module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\mayflower\Prepare\Molecules;
use Drupal\mayflower\Twig\MayflowerLoader;

/**
 * Implements hook_theme().
 */
function mayflower_theme() {
  return [
    'callout_links' => [
      'variables' => ['calloutLinks' => NULL],
    ],
    'contact_us' => [
      'variables' => ['contactUs' => NULL],
    ],
    'ajax_pattern' => [
      'variables' => ['ajaxPattern' => NULL],
    ],
    // @todo Remove these after some reasonable length of time has passed.
    'action_seq_list' => [
      'variables' => ['actionSeqLists' => NULL],
    ],
    'steps_ordered' => [
      'variables' => ['stepsOrdered' => NULL],
    ],
    'image_promos' => [
      'variables' => ['imagePromos' => NULL],
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 *
 * Add the mayflower/global library from the artifacts installation.
 */
function mayflower_library_info_build() {
  $artifacts = mayflower_get_path();
  $libraries = [];
  $libraries['global'] = [
    'version' => '1.0.0',
    'js' => [
      "/$artifacts/assets/js/vendor-generated.js" => [
        'minified' => TRUE,
        'weight' => -20,
      ],
      "/$artifacts/assets/js/index-generated.js" => [
        'minified' => TRUE,
      ],
    ],
    'css' => [
      'theme' => [
        "/$artifacts/assets/css/index-generated.css" => [],
      ],
    ],
    'dependencies' => [
      'mayflower/init',
      'mayflower/modernizr',
    ],
  ];
  return $libraries;
}

/**
 * Implements hook_js_settings_build().
 *
 * Add the path to mayflower artifacts as a cached drupalSetting.
 */
function mayflower_js_settings_build(array &$settings, AttachedAssetsInterface $assets) {
  if (array_key_exists('mayflower', $settings)) {

    $artifacts = mayflower_get_path();
    foreach (MayflowerLoader::NAMESPACES as $namespace => $subdir) {
      $namespacePaths["@$namespace"] = \Drupal::service('file_url_generator')->generateString(sprintf('%s/twig/%s/', $artifacts, $subdir));
    }
    $settings['mayflower'] = [
      'namespaces' => $namespacePaths,
      'assets' => \Drupal::service('file_url_generator')->generateString(sprintf('%s/assets', $artifacts)),
    ];
  }
}

/**
 * Returns the path to the mayflower artifacts library root.
 *
 * @return string
 *   The path to the mayflower artifacts directory.
 */
function mayflower_get_path() {
  // Allow the use of a development mayflower artifacts directory.  We skip this
  // check in Acquia environments to avoid the file existence check to runtime.
  if (!isset($_ENV['AH_SITE_ENVIRONMENT']) && is_dir('libraries/mayflower-dev')) {
    return 'libraries/mayflower-dev';
  }
  return 'libraries/mayflower-artifacts';
}

/**
 * Prepares variables for image template.
 *
 * Default template: atoms/09-media/image.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: An ImageItem object.
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *   - image_style: An optional image style.
 *   - url: An optional \Drupal\Core\Url object.
 */
function mayflower_preprocess_image(array &$variables) {
  $variables['image']['src'] = $variables['uri'];
  $variables['image']['alt'] = $variables['alt'];
  $variables['image']['height'] = $variables['height'];
  $variables['image']['width'] = $variables['width'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see patterns/molecules/contact-us.twig
 */
function mayflower_preprocess_contact_us(&$variables) {
  if (!in_array($variables['elements']['#view_mode'], [
    'contact_groups_only',
    'contact_list',
    'contact_summary',
    'contact_us',
    'contact_us_guide_page',
    'sidebar',
    'map',
  ])) {
    $node = $variables['elements']['#node'];

    $options = ['display_title' => TRUE];

    if (!empty($variables['elements']['#level'])) {
      $options['level'] = $variables['elements']['#level'];
      unset($variables['elements']['#level']);
    }

    // Sets the variable structure required for action-seq-list.twig.
    $variables = [
      'theme_hook_original' => $variables['theme_hook_original'],
      'contactUs' => Molecules::prepareContactUs($node, $options),
    ];
  }
}

/**
 * Implements hook_preprocess_html().
 */
function mayflower_preprocess_html(&$variables) {
  // NOTE: Drupal stores timestamps in UTC and renders them in whatever timezone setting the site or user has set.
  // No rendering is involved when Drupal returns jsonapi data, which we use to fetch alerts, so the alerts timestamps are always in UTC.
  // Therefore we expose the site's configured timezone to JS layer so alerts timestamp can be adjusted from UTC to desired offset.
  $dateTimeZoneMassGov = new DateTimeZone(date_default_timezone_get());
  $dateTimeMassGov = new DateTime("now", $dateTimeZoneMassGov);
  $offsetInSeconds = $dateTimeMassGov->getOffset();
  $prefix = ($offsetInSeconds < 0) ? '-' : '+';
  $offsetAbsoluteSeconds = abs($offsetInSeconds);
  $formattedOffset = sprintf("$prefix%02d:%02d", ($offsetAbsoluteSeconds / 3600), ($offsetAbsoluteSeconds / 60 % 60));

  $variables['#attached']['drupalSettings']['mayflower']['utcOffsetString'] = $formattedOffset;
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 */
function mayflower_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['data-block-id'])) {
    $block = Block::load($variables['attributes']['data-block-id']);
    if ($block) {
      array_unshift($suggestions, 'menu__' . str_replace('-', '_', $block->id()));
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function mayflower_preprocess_block(array &$variables) {
  if (!empty($variables['elements']['#id'])) {
    $variables['content']['#attributes']['data-block-id'] = $variables['elements']['#id'];
    $variables['sealImage'] = \Drupal::service('file_url_generator')->generateAbsoluteString(mayflower_get_path() . '/assets/images/logo/stateseal.png');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function mayflower_preprocess_page(array &$variables) {
  $header_mixed_urls = \Drupal::config('mass_utility.settings')->get('header_mixed_urls');
  // Allow match with /node/nid or path alias.
  $current_path = \Drupal::service('path.current')->getPath();
  $current_uri = \Drupal::request()->getRequestUri();

  // Check if Uri or Path matches.
  $path_matcher = \Drupal::service('path.matcher');
  if ($path_matcher->matchPath($current_uri, $header_mixed_urls) || $path_matcher->matchPath($current_path, $header_mixed_urls)) {
    $variables['header_version_mixed'] = TRUE;
  }
  elseif ((\Drupal::service('path.matcher')->isFrontPage()) && (strpos($header_mixed_urls, '<front>') !== FALSE)) {
    $variables['header_version_mixed'] = TRUE;
  }
  else {
    $variables['header_version_mixed'] = FALSE;
  }
}
