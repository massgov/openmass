<?php

/**
 * @file
 * Module file for mass_caching.
 */

use Drupal\file\FileInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\media\MediaInterface;
use Drupal\path_alias\PathAliasInterface;
use Drupal\redirect\Entity\Redirect;

/**
 * Acquia Purger and Akamai need conditional disable, so we use plugin alter.
 *
 * This alter is added by a patch to purge module. See
 * https://www.drupal.org/project/purge/issues/2757155#comment-14335663.
 *
 * @param array $definitions
 *   All plugin definitions.
 */
function mass_caching_purge_purgers_alter(array &$definitions): void {
  // Start with disabled for both purgers.
  $akamai = $acquia_purge = FALSE;

  $env = getenv('AH_SITE_ENVIRONMENT');
  if ($env) {
    // We are in an Acquia env.
    $acquia_purge = TRUE;
    if (in_array($env, ['test', 'prod'])) {
      $akamai = TRUE;
    }
  }

  foreach (['akamai', 'acquia_purge'] as $name) {
    // The double dollar sign is deliberate - It refers to one of the bool variables above.
    // We need to run queue invalidations during testing so that tests pass like AutomatedPurgingTest.
    if (!$$name && isset($definitions[$name]) && !defined('PHPUNIT_COMPOSER_INSTALL')) {
      // To disable a purger, make it capable of nothing.
      $definitions[$name]['types'] = [];
    }
  }
}

/**
 * Implements hook_file_insert().
 *
 * Purge the file's path when a file is created.
 */
function mass_caching_file_insert(FileInterface $file) {
  if (_mass_caching_uri_is_private($file)) {
    return;
  }
  // Must purge the file on all domains/schemes, so we
  // use a path purge here, which is converted to a url.
  $absolute = file_create_url($file->getFileUri());
  $relative = file_url_transform_relative($absolute);
  \Drupal::service('manual_purger')->purgePath($relative);
}

/**
 * Implements hook_file_update().
 *
 * Purge the file's path when a file is updated.
 */
function mass_caching_file_update(FileInterface $file) {
  if (_mass_caching_uri_is_private($file)) {
    return;
  }
  // Must purge the file on all domains/schemes, so we
  // use a path purge here, which is converted to a url.
  $absolute = file_create_url($file->getFileUri());
  $relative = file_url_transform_relative($absolute);
  \Drupal::service('manual_purger')->purgePath($relative);
}

/**
 * Implements hook_file_delete().
 *
 * Purge the file's path when a file is deleted.
 */
function mass_caching_file_delete(FileInterface $file) {
  if (_mass_caching_uri_is_private($file)) {
    return;
  }
  // Must purge the file on all domains/schemes, so we
  // use a path purge here, which is converted to a url.
  $absolute = file_create_url($file->getFileUri());
  $relative = file_url_transform_relative($absolute);
  \Drupal::service('manual_purger')->purgePath($relative);
}

/**
 * Implements hook_file_move().
 *
 * Purge the file's path when a file is created.
 */
function mass_caching_file_move(FileInterface $file, FileInterface $source) {
  if (_mass_caching_uri_is_private($file)) {
    return;
  }
  // Must purge the file on all domains/schemes, so we
  // use a path purge here, which is converted to a url.
  $absolute = file_create_url($file->getFileUri());
  $relative = file_url_transform_relative($absolute);
  \Drupal::service('manual_purger')->purgePath($relative);
}

/**
 * Implements hook_path_alias_insert().
 *
 * Purges new aliases as they are created.  Without this, it's possible
 * to create content that lives at a URL that's already cached with a 404.
 * We choose to implement this at the path level so we can avoid clearing
 * paths for any content that isn't aliased. Technically, this leaves a gap
 * in our purging where the internal path (/node/123) could be stuck with a
 * 404, but it's extremely unlikely that this will happen or matter if it does.
 */
function mass_caching_path_alias_insert(PathAliasInterface $path) {
  \Drupal::service('manual_purger')->purgePath($path->getAlias());
}

/**
 * Implements hook_path_alias_update().
 *
 * Purges aliases when they change.
 *
 * @see \mass_caching_path_alias_insert()
 */
function mass_caching_path_alias_update(PathAliasInterface $path) {
  if ($path->getAlias() !== $path->original->getAlias()) {
    \Drupal::service('manual_purger')->purgePath($path->getAlias());
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Push our hook_entity_update() and hook_entity_insert() implementations to
 * after pathauto's in order to ensure that media have aliased URLs before we
 * attempt to clear them.
 */
function mass_caching_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_update' || $hook === 'entity_insert') {
    $group = $implementations['mass_caching'];
    unset($implementations['mass_caching']);
    $implementations['mass_caching'] = $group;
  }
}

/**
 * Implements hook_entity_update().
 *
 * Purge media's download path and redirect's source URL when the entity is updated. This is implemented
 * as a hook_entity_update() rather than hook_ENTITY_TYPE_update because we need it to
 * run after pathauto's hook_entity_update().
 */
function mass_caching_entity_update(EntityInterface $entity) {
  switch ($entity->getEntityTypeId()) {
    case 'media':
      mass_caching_purge_media($entity);
      break;

    case 'redirect':
      mass_caching_purge_redirect($entity);
      break;
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Purge media's download path and redirect's source URL when an entity is created. This is implemented
 * as a hook_entity_insert() rather than hook_ENTITY_TYPE_insert because we need it to
 * run after pathauto's hook_entity_update().
 */
function mass_caching_entity_insert(EntityInterface $entity) {
  switch ($entity->getEntityTypeId()) {
    case 'media':
      mass_caching_purge_media($entity);
      break;

    case 'redirect':
      mass_caching_purge_redirect($entity);
      break;

  }
}

/**
 * Purge paths for media entities.
 *
 * @param \Drupal\media\MediaInterface $entity
 *   A media entity.
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function mass_caching_purge_media(MediaInterface $entity) {
  $purger = \Drupal::service('manual_purger');
  $paths[] = '/media/' . $entity->id() . '/download';
  $paths[] = $entity->toUrl()->toString() . '/download';
  // array_unique() because the entity provided URL for unaliased media
  // will be the same as /media/123/download.
  foreach (array_unique($paths) as $path) {
    $purger->purgePath($path);
  }
}

/**
 * Purge source path for redirect entities.
 *
 * @param \Drupal\redirect\Entity\Redirect $entity
 *   A redirect entity.
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function mass_caching_purge_redirect(Redirect $entity) {
  $purger = \Drupal::service('manual_purger');
  $path = $entity->getSourceUrl();
  $purger->purgePath($path);
}

/**
 * Determine whether a file uri is private.
 *
 * @param Drupal\file\FileInterface $file
 *   A file entity.
 *
 * @return bool
 *   TRUE if the uri is private FALSE if it is anything else.
 */
function _mass_caching_uri_is_private(FileInterface $file) {
  $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
  $destination_scheme = $stream_wrapper_manager::getScheme($file->getFileUri());
  return $destination_scheme === 'private';
}
