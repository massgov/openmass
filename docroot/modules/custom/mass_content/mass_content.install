<?php

/**
 * @file
 * Uninstall config.
 */

use Drupal\Core\Database\Database;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\pathauto\PathautoState;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Migrate action content from old contacts field to new contacts field.
 */
function mass_content_update_8001(&$sandbox) {

  $node_storage = \Drupal::service('entity_type.manager')->getStorage('node');

  // Get all actions that have contact content.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'action')
    ->exists('field_action_contacts');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    $subhead_added = FALSE;

    foreach ($node->field_action_contacts as $old_contact_id) {
      $old_contact = Paragraph::load($old_contact_id->target_id);
      // Keep track of the new paragraph ids.
      $new_contacts = [];
      // Migrate address.
      if ($old_contact->field_address) {
        $new_address = Paragraph::create([
          'type' => 'contact_info',
          'field_address' => [
            "value" => $old_contact->field_address->value,
            "format" => $old_contact->field_address->format,
          ],
          'field_type' => [
            "value" => 'mail',
          ],
        ]);
        $new_address->save();
        $new_contacts[] = [
          'target_id' => $new_address->id(),
          'target_revision_id' => $new_address->getRevisionId(),
        ];
      }
      // Migrate email.
      if ($old_contact->field_email) {
        $new_email = Paragraph::create([
          'type' => 'contact_info',
          'field_email' => [
            "value" => $old_contact->field_email->value,
          ],
          'field_type' => [
            "value" => 'email',
          ],
        ]);
        $new_email->save();
        $new_contacts[] = [
          'target_id' => $new_email->id(),
          'target_revision_id' => $new_email->getRevisionId(),
        ];
      }
      // Migrate fax.
      if ($old_contact->field_fax) {
        $new_fax = Paragraph::create([
          'type' => 'contact_info',
          'field_phone' => [
            "value" => $old_contact->field_fax->value,
          ],
          'field_type' => [
            "value" => 'fax',
          ],
        ]);
        $new_fax->save();
        $new_contacts[] = [
          'target_id' => $new_fax->id(),
          'target_revision_id' => $new_fax->getRevisionId(),
        ];
      }
      // Migrate phone.
      if ($old_contact->field_phone) {
        $new_phone = Paragraph::create([
          'type' => 'contact_info',
          'field_phone' => [
            "value" => $old_contact->field_phone->value,
          ],
          'field_type' => [
            "value" => 'phone',
          ],
        ]);
        $new_phone->save();
        $new_contacts[] = [
          'target_id' => $new_phone->id(),
          'target_revision_id' => $new_phone->getRevisionId(),
        ];
      }
      // Migrate website.
      if ($old_contact->field_link) {
        $new_link = Paragraph::create([
          'type' => 'contact_info',
          'field_link' => [
            "title" => $old_contact->field_link->title,
            "uri" => $old_contact->field_link->uri,
          ],
          'field_type' => [
            "value" => 'online',
          ],
        ]);
        $new_link->save();
        $new_contacts[] = [
          'target_id' => $new_link->id(),
          'target_revision_id' => $new_link->getRevisionId(),
        ];
      }

      // Bundle contact info into group.
      $new_contact_group = Paragraph::create([
        'type' => 'contact_group',
        'field_title' => [
          "value" => $old_contact->field_name->value,
        ],
        'field_contact_info' => $new_contacts,
      ]);
      $new_contact_group->save();
      $new_contact_group_id = [
        'target_id' => $new_contact_group->id(),
        'target_revision_id' => $new_contact_group->getRevisionId(),
      ];

      // If we haven't added a subhead to the node yet, do that.
      if (!$subhead_added) {
        $subhead_added = TRUE;

        $subhead = Paragraph::create([
          'type' => 'subhead',
          'field_title' => [
            'value' => 'Additional Contacts',
          ],
        ]);

        $subhead->save();
        $subhead_id = [
          'target_id' => $subhead->id(),
          'target_revision_id' => $subhead->getRevisionId(),
        ];

        $node->field_action_sidebar->appendItem($subhead_id);
      }

      // Add new contact group to the node.
      $node->field_action_sidebar->appendItem($new_contact_group_id);
      $node->save();
    }
  }

  // Delete the field_action_contacts field.
  $properties = [
    'entity_type' => 'node',
    'bundle' => 'action',
    'field_name' => 'field_action_contacts',
  ];
  $field = \Drupal::service('entity_type.manager')->getStorage('field_config')->loadByProperties($properties);
  $field = reset($field);
  $field->delete();

}

/**
 * Migrate action content from old step icon field list to term ref.
 */
function mass_content_update_8002(&$sandbox) {

  $node_storage = \Drupal::service('entity_type.manager')->getStorage('node');

  // Get all actions that have details.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'action')
    ->exists('field_action_details');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {

    foreach ($node->field_action_details as $detail_id) {
      $detail = Paragraph::load($detail_id->target_id);
      // Update only the action_steps.
      if ($detail->getType() == 'action_step') {
        // As long as the step has no icon term.
        if (empty($detail->field_para_icon_term->target_id)) {
          // Get icon term from the icon list.
          $icons = taxonomy_term_load_multiple_by_name($detail->field_icon->value, 'icons');
          $icon = current(array_keys($icons));
          $detail->field_para_icon_term->target_id = $icon;
          $detail->save();
        }
      }
    }
  }
}

/**
 * Update Action paths.
 */
function mass_content_update_8003(&$sandbox) {

  $node_storage = \Drupal::service('entity_type.manager')->getStorage('node');

  // Update action paths.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'action');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    \Drupal::service('pathauto.generator')->updateEntityAlias($node, 'update');
  }

  // Update action menu links.
  $results = \Drupal::entityQuery('menu_link_content')
    ->condition('link.uri', '/actions/', 'CONTAINS')
    ->execute();
  $menu_links = MenuLinkContent::loadMultiple($results);

  foreach ($menu_links as $menu_link) {
    $new_link = $menu_link->link->uri;
    $new_link = str_replace('/actions/', '/', $new_link);
    $menu_link->link->uri = $new_link;
    $menu_link->save();
  }
}

/**
 * Create Subtopic paths.
 */
function mass_content_update_8004(&$sandbox) {

  $node_storage = \Drupal::service('entity_type.manager')->getStorage('node');

  // Create subtopics paths.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'subtopic');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {

    $node->path->pathauto = PathautoState::CREATE;
    $node->save();
  }
}

/**
 * Unpublish Subtopics.
 */
function mass_content_update_8005(&$sandbox) {

  $node_storage = \Drupal::service('entity_type.manager')->getStorage('node');

  // Unpublish all subtopics.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'subtopic');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    $node->moderation_state->target_id = 'archived';
    $node->save();
  }
}

/**
 * Remove 1up/2up stacked bands.
 */
function mass_content_update_8006(&$sandbox) {
  $content_type = \Drupal::service('entity_type.manager')->getStorage('node_type')->load('1up_stacked_band');
  $content_type->delete();

  $content_type = \Drupal::service('entity_type.manager')->getStorage('node_type')->load('2up_stacked_band');
  $content_type->delete();
}

/**
 * Create Funnel or Endpoint taxonomy terms.
 */
function mass_content_update_8007() {
  // Load the vocabulary to get the the vocabulary ID.
  $vocabulary = Vocabulary::load('funnel_or_endpoint');

  if (!empty($vocabulary)) {
    // Add an array of term names that we want to create.
    $terms = [
      'Funnel',
      'Endpoint',
    ];

    // Create taxonomy terms.
    foreach ($terms as $term_name) {
      Term::create([
        'name' => $term_name,
        'vid' => $vocabulary->id(),
      ])->save();
    }
  }
}

/**
 * Update Stacked Layout paths.
 */
function mass_content_update_8008(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'stacked_layout');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    \Drupal::service('pathauto.generator')->updateEntityAlias($node, 'update');
  }
}

/**
 * Create base taxonomy terms.
 */
function mass_content_update_8009() {
  // Languages Terms.
  $languages = [
    'af_NA' => 'Afrikaans (Namibia)',
    'af_ZA' => 'Afrikaans (South Africa)',
    'af' => 'Afrikaans',
    'ak_GH' => 'Akan (Ghana)',
    'ak' => 'Akan',
    'sq_AL' => 'Albanian (Albania)',
    'sq' => 'Albanian',
    'am_ET' => 'Amharic (Ethiopia)',
    'am' => 'Amharic',
    'ar_DZ' => 'Arabic (Algeria)',
    'ar_BH' => 'Arabic (Bahrain)',
    'ar_EG' => 'Arabic (Egypt)',
    'ar_IQ' => 'Arabic (Iraq)',
    'ar_JO' => 'Arabic (Jordan)',
    'ar_KW' => 'Arabic (Kuwait)',
    'ar_LB' => 'Arabic (Lebanon)',
    'ar_LY' => 'Arabic (Libya)',
    'ar_MA' => 'Arabic (Morocco)',
    'ar_OM' => 'Arabic (Oman)',
    'ar_QA' => 'Arabic (Qatar)',
    'ar_SA' => 'Arabic (Saudi Arabia)',
    'ar_SD' => 'Arabic (Sudan)',
    'ar_SY' => 'Arabic (Syria)',
    'ar_TN' => 'Arabic (Tunisia)',
    'ar_AE' => 'Arabic (United Arab Emirates)',
    'ar_YE' => 'Arabic (Yemen)',
    'ar' => 'Arabic',
    'hy_AM' => 'Armenian (Armenia)',
    'hy' => 'Armenian',
    'as_IN' => 'Assamese (India)',
    'as' => 'Assamese',
    'asa_TZ' => 'Asu (Tanzania)',
    'asa' => 'Asu',
    'az_Cyrl' => 'Azerbaijani (Cyrillic)',
    'az_Cyrl_AZ' => 'Azerbaijani (Cyrillic, Azerbaijan)',
    'az_Latn' => 'Azerbaijani (Latin)',
    'az_Latn_AZ' => 'Azerbaijani (Latin, Azerbaijan)',
    'az' => 'Azerbaijani',
    'bm_ML' => 'Bambara (Mali)',
    'bm' => 'Bambara',
    'eu_ES' => 'Basque (Spain)',
    'eu' => 'Basque',
    'be_BY' => 'Belarusian (Belarus)',
    'be' => 'Belarusian',
    'bem_ZM' => 'Bemba (Zambia)',
    'bem' => 'Bemba',
    'bez_TZ' => 'Bena (Tanzania)',
    'bez' => 'Bena',
    'bn_BD' => 'Bengali (Bangladesh)',
    'bn_IN' => 'Bengali (India)',
    'bn' => 'Bengali',
    'bs_BA' => 'Bosnian (Bosnia and Herzegovina)',
    'bs' => 'Bosnian',
    'bg_BG' => 'Bulgarian (Bulgaria)',
    'bg' => 'Bulgarian',
    'my_MM' => 'Burmese (Myanmar [Burma])',
    'my' => 'Burmese',
    'ca_ES' => 'Catalan (Spain)',
    'ca' => 'Catalan',
    'tzm_Latn' => 'Central Morocco Tamazight (Latin)',
    'tzm_Latn_MA' => 'Central Morocco Tamazight (Latin, Morocco)',
    'tzm' => 'Central Morocco Tamazight',
    'chr_US' => 'Cherokee (United States)',
    'chr' => 'Cherokee',
    'cgg_UG' => 'Chiga (Uganda)',
    'cgg' => 'Chiga',
    'zh_Hans' => 'Chinese (Simplified Han)',
    'zh_Hans_CN' => 'Chinese (Simplified Han, China)',
    'zh_Hans_HK' => 'Chinese (Simplified Han, Hong Kong SAR China)',
    'zh_Hans_MO' => 'Chinese (Simplified Han, Macau SAR China)',
    'zh_Hans_SG' => 'Chinese (Simplified Han, Singapore)',
    'zh_Hant' => 'Chinese (Traditional Han)',
    'zh_Hant_HK' => 'Chinese (Traditional Han, Hong Kong SAR China)',
    'zh_Hant_MO' => 'Chinese (Traditional Han, Macau SAR China)',
    'zh_Hant_TW' => 'Chinese (Traditional Han, Taiwan)',
    'zh' => 'Chinese',
    'kw_GB' => 'Cornish (United Kingdom)',
    'kw' => 'Cornish',
    'hr_HR' => 'Croatian (Croatia)',
    'hr' => 'Croatian',
    'cs_CZ' => 'Czech (Czech Republic)',
    'cs' => 'Czech',
    'da_DK' => 'Danish (Denmark)',
    'da' => 'Danish',
    'nl_BE' => 'Dutch (Belgium)',
    'nl_NL' => 'Dutch (Netherlands)',
    'nl' => 'Dutch',
    'ebu_KE' => 'Embu (Kenya)',
    'ebu' => 'Embu',
    'en_AS' => 'English (American Samoa)',
    'en_AU' => 'English (Australia)',
    'en_BE' => 'English (Belgium)',
    'en_BZ' => 'English (Belize)',
    'en_BW' => 'English (Botswana)',
    'en_CA' => 'English (Canada)',
    'en_GU' => 'English (Guam)',
    'en_HK' => 'English (Hong Kong SAR China)',
    'en_IN' => 'English (India)',
    'en_IE' => 'English (Ireland)',
    'en_JM' => 'English (Jamaica)',
    'en_MT' => 'English (Malta)',
    'en_MH' => 'English (Marshall Islands)',
    'en_MU' => 'English (Mauritius)',
    'en_NA' => 'English (Namibia)',
    'en_NZ' => 'English (New Zealand)',
    'en_MP' => 'English (Northern Mariana Islands)',
    'en_PK' => 'English (Pakistan)',
    'en_PH' => 'English (Philippines)',
    'en_SG' => 'English (Singapore)',
    'en_ZA' => 'English (South Africa)',
    'en_TT' => 'English (Trinidad and Tobago)',
    'en_UM' => 'English (U.S. Minor Outlying Islands)',
    'en_VI' => 'English (U.S. Virgin Islands)',
    'en_GB' => 'English (United Kingdom)',
    'en_US' => 'English (United States)',
    'en_ZW' => 'English (Zimbabwe)',
    'en' => 'English',
    'eo' => 'Esperanto',
    'et_EE' => 'Estonian (Estonia)',
    'et' => 'Estonian',
    'ee_GH' => 'Ewe (Ghana)',
    'ee_TG' => 'Ewe (Togo)',
    'ee' => 'Ewe',
    'fo_FO' => 'Faroese (Faroe Islands)',
    'fo' => 'Faroese',
    'fil_PH' => 'Filipino (Philippines)',
    'fil' => 'Filipino',
    'fi_FI' => 'Finnish (Finland)',
    'fi' => 'Finnish',
    'fr_BE' => 'French (Belgium)',
    'fr_BJ' => 'French (Benin)',
    'fr_BF' => 'French (Burkina Faso)',
    'fr_BI' => 'French (Burundi)',
    'fr_CM' => 'French (Cameroon)',
    'fr_CA' => 'French (Canada)',
    'fr_CF' => 'French (Central African Republic)',
    'fr_TD' => 'French (Chad)',
    'fr_KM' => 'French (Comoros)',
    'fr_CG' => 'French (Congo - Brazzaville)',
    'fr_CD' => 'French (Congo - Kinshasa)',
    'fr_CI' => "French (Côte d'Ivoire)",
    'fr_DJ' => 'French (Djibouti)',
    'fr_GQ' => 'French (Equatorial Guinea)',
    'fr_FR' => 'French (France)',
    'fr_GA' => 'French (Gabon)',
    'fr_GP' => 'French (Guadeloupe)',
    'fr_GN' => 'French (Guinea)',
    'fr_LU' => 'French (Luxembourg)',
    'fr_MG' => 'French (Madagascar)',
    'fr_ML' => 'French (Mali)',
    'fr_MQ' => 'French (Martinique)',
    'fr_MC' => 'French (Monaco)',
    'fr_NE' => 'French (Niger)',
    'fr_RW' => 'French (Rwanda)',
    'fr_RE' => 'French (Réunion)',
    'fr_BL' => 'French (Saint Barthélemy)',
    'fr_MF' => 'French (Saint Martin)',
    'fr_SN' => 'French (Senegal)',
    'fr_CH' => 'French (Switzerland)',
    'fr_TG' => 'French (Togo)',
    'fr' => 'French',
    'ff_SN' => 'Fulah (Senegal)',
    'ff' => 'Fulah',
    'gl_ES' => 'Galician (Spain)',
    'gl' => 'Galician',
    'lg_UG' => 'Ganda (Uganda)',
    'lg' => 'Ganda',
    'ka_GE' => 'Georgian (Georgia)',
    'ka' => 'Georgian',
    'de_AT' => 'German (Austria)',
    'de_BE' => 'German (Belgium)',
    'de_DE' => 'German (Germany)',
    'de_LI' => 'German (Liechtenstein)',
    'de_LU' => 'German (Luxembourg)',
    'de_CH' => 'German (Switzerland)',
    'de' => 'German',
    'el_CY' => 'Greek (Cyprus)',
    'el_GR' => 'Greek (Greece)',
    'el' => 'Greek',
    'gu_IN' => 'Gujarati (India)',
    'gu' => 'Gujarati',
    'guz_KE' => 'Gusii (Kenya)',
    'guz' => 'Gusii',
    'ha_Latn' => 'Hausa (Latin)',
    'ha_Latn_GH' => 'Hausa (Latin, Ghana)',
    'ha_Latn_NE' => 'Hausa (Latin, Niger)',
    'ha_Latn_NG' => 'Hausa (Latin, Nigeria)',
    'ha' => 'Hausa',
    'haw_US' => 'Hawaiian (United States)',
    'haw' => 'Hawaiian',
    'he_IL' => 'Hebrew (Israel)',
    'he' => 'Hebrew',
    'hi_IN' => 'Hindi (India)',
    'hi' => 'Hindi',
    'hu_HU' => 'Hungarian (Hungary)',
    'hu' => 'Hungarian',
    'is_IS' => 'Icelandic (Iceland)',
    'is' => 'Icelandic',
    'ig_NG' => 'Igbo (Nigeria)',
    'ig' => 'Igbo',
    'id_ID' => 'Indonesian (Indonesia)',
    'id' => 'Indonesian',
    'ga_IE' => 'Irish (Ireland)',
    'ga' => 'Irish',
    'it_IT' => 'Italian (Italy)',
    'it_CH' => 'Italian (Switzerland)',
    'it' => 'Italian',
    'ja_JP' => 'Japanese (Japan)',
    'ja' => 'Japanese',
    'kea_CV' => 'Kabuverdianu (Cape Verde)',
    'kea' => 'Kabuverdianu',
    'kab_DZ' => 'Kabyle (Algeria)',
    'kab' => 'Kabyle',
    'kl_GL' => 'Kalaallisut (Greenland)',
    'kl' => 'Kalaallisut',
    'kln_KE' => 'Kalenjin (Kenya)',
    'kln' => 'Kalenjin',
    'kam_KE' => 'Kamba (Kenya)',
    'kam' => 'Kamba',
    'kn_IN' => 'Kannada (India)',
    'kn' => 'Kannada',
    'kk_Cyrl' => 'Kazakh (Cyrillic)',
    'kk_Cyrl_KZ' => 'Kazakh (Cyrillic, Kazakhstan)',
    'kk' => 'Kazakh',
    'km_KH' => 'Khmer (Cambodia)',
    'km' => 'Khmer',
    'ki_KE' => 'Kikuyu (Kenya)',
    'ki' => 'Kikuyu',
    'rw_RW' => 'Kinyarwanda (Rwanda)',
    'rw' => 'Kinyarwanda',
    'kok_IN' => 'Konkani (India)',
    'kok' => 'Konkani',
    'ko_KR' => 'Korean (South Korea)',
    'ko' => 'Korean',
    'khq_ML' => 'Koyra Chiini (Mali)',
    'khq' => 'Koyra Chiini',
    'ses_ML' => 'Koyraboro Senni (Mali)',
    'ses' => 'Koyraboro Senni',
    'lag_TZ' => 'Langi (Tanzania)',
    'lag' => 'Langi',
    'lv_LV' => 'Latvian (Latvia)',
    'lv' => 'Latvian',
    'lt_LT' => 'Lithuanian (Lithuania)',
    'lt' => 'Lithuanian',
    'luo_KE' => 'Luo (Kenya)',
    'luo' => 'Luo',
    'luy_KE' => 'Luyia (Kenya)',
    'luy' => 'Luyia',
    'mk_MK' => 'Macedonian (Macedonia)',
    'mk' => 'Macedonian',
    'jmc_TZ' => 'Machame (Tanzania)',
    'jmc' => 'Machame',
    'kde_TZ' => 'Makonde (Tanzania)',
    'kde' => 'Makonde',
    'mg_MG' => 'Malagasy (Madagascar)',
    'mg' => 'Malagasy',
    'ms_BN' => 'Malay (Brunei)',
    'ms_MY' => 'Malay (Malaysia)',
    'ms' => 'Malay',
    'ml_IN' => 'Malayalam (India)',
    'ml' => 'Malayalam',
    'mt_MT' => 'Maltese (Malta)',
    'mt' => 'Maltese',
    'gv_GB' => 'Manx (United Kingdom)',
    'gv' => 'Manx',
    'mr_IN' => 'Marathi (India)',
    'mr' => 'Marathi',
    'mas_KE' => 'Masai (Kenya)',
    'mas_TZ' => 'Masai (Tanzania)',
    'mas' => 'Masai',
    'mer_KE' => 'Meru (Kenya)',
    'mer' => 'Meru',
    'mfe_MU' => 'Morisyen (Mauritius)',
    'mfe' => 'Morisyen',
    'naq_NA' => 'Nama (Namibia)',
    'naq' => 'Nama',
    'ne_IN' => 'Nepali (India)',
    'ne_NP' => 'Nepali (Nepal)',
    'ne' => 'Nepali',
    'nd_ZW' => 'North Ndebele (Zimbabwe)',
    'nd' => 'North Ndebele',
    'nb_NO' => 'Norwegian Bokmål (Norway)',
    'nb' => 'Norwegian Bokmål',
    'nn_NO' => 'Norwegian Nynorsk (Norway)',
    'nn' => 'Norwegian Nynorsk',
    'nyn_UG' => 'Nyankole (Uganda)',
    'nyn' => 'Nyankole',
    'or_IN' => 'Oriya (India)',
    'or' => 'Oriya',
    'om_ET' => 'Oromo (Ethiopia)',
    'om_KE' => 'Oromo (Kenya)',
    'om' => 'Oromo',
    'ps_AF' => 'Pashto (Afghanistan)',
    'ps' => 'Pashto',
    'fa_AF' => 'Persian (Afghanistan)',
    'fa_IR' => 'Persian (Iran)',
    'fa' => 'Persian',
    'pl_PL' => 'Polish (Poland)',
    'pl' => 'Polish',
    'pt_BR' => 'Portuguese (Brazil)',
    'pt_GW' => 'Portuguese (Guinea-Bissau)',
    'pt_MZ' => 'Portuguese (Mozambique)',
    'pt_PT' => 'Portuguese (Portugal)',
    'pt' => 'Portuguese',
    'pa_Arab' => 'Punjabi (Arabic)',
    'pa_Arab_PK' => 'Punjabi (Arabic, Pakistan)',
    'pa_Guru' => 'Punjabi (Gurmukhi)',
    'pa_Guru_IN' => 'Punjabi (Gurmukhi, India)',
    'pa' => 'Punjabi',
    'ro_MD' => 'Romanian (Moldova)',
    'ro_RO' => 'Romanian (Romania)',
    'ro' => 'Romanian',
    'rm_CH' => 'Romansh (Switzerland)',
    'rm' => 'Romansh',
    'rof_TZ' => 'Rombo (Tanzania)',
    'rof' => 'Rombo',
    'ru_MD' => 'Russian (Moldova)',
    'ru_RU' => 'Russian (Russia)',
    'ru_UA' => 'Russian (Ukraine)',
    'ru' => 'Russian',
    'rwk_TZ' => 'Rwa (Tanzania)',
    'rwk' => 'Rwa',
    'saq_KE' => 'Samburu (Kenya)',
    'saq' => 'Samburu',
    'sg_CF' => 'Sango (Central African Republic)',
    'sg' => 'Sango',
    'seh_MZ' => 'Sena (Mozambique)',
    'seh' => 'Sena',
    'sr_Cyrl' => 'Serbian (Cyrillic)',
    'sr_Cyrl_BA' => 'Serbian (Cyrillic, Bosnia and Herzegovina)',
    'sr_Cyrl_ME' => 'Serbian (Cyrillic, Montenegro)',
    'sr_Cyrl_RS' => 'Serbian (Cyrillic, Serbia)',
    'sr_Latn' => 'Serbian (Latin)',
    'sr_Latn_BA' => 'Serbian (Latin, Bosnia and Herzegovina)',
    'sr_Latn_ME' => 'Serbian (Latin, Montenegro)',
    'sr_Latn_RS' => 'Serbian (Latin, Serbia)',
    'sr' => 'Serbian',
    'sn_ZW' => 'Shona (Zimbabwe)',
    'sn' => 'Shona',
    'ii_CN' => 'Sichuan Yi (China)',
    'ii' => 'Sichuan Yi',
    'si_LK' => 'Sinhala (Sri Lanka)',
    'si' => 'Sinhala',
    'sk_SK' => 'Slovak (Slovakia)',
    'sk' => 'Slovak',
    'sl_SI' => 'Slovenian (Slovenia)',
    'sl' => 'Slovenian',
    'xog_UG' => 'Soga (Uganda)',
    'xog' => 'Soga',
    'so_DJ' => 'Somali (Djibouti)',
    'so_ET' => 'Somali (Ethiopia)',
    'so_KE' => 'Somali (Kenya)',
    'so_SO' => 'Somali (Somalia)',
    'so' => 'Somali',
    'es_AR' => 'Spanish (Argentina)',
    'es_BO' => 'Spanish (Bolivia)',
    'es_CL' => 'Spanish (Chile)',
    'es_CO' => 'Spanish (Colombia)',
    'es_CR' => 'Spanish (Costa Rica)',
    'es_DO' => 'Spanish (Dominican Republic)',
    'es_EC' => 'Spanish (Ecuador)',
    'es_SV' => 'Spanish (El Salvador)',
    'es_GQ' => 'Spanish (Equatorial Guinea)',
    'es_GT' => 'Spanish (Guatemala)',
    'es_HN' => 'Spanish (Honduras)',
    'es_419' => 'Spanish (Latin America)',
    'es_MX' => 'Spanish (Mexico)',
    'es_NI' => 'Spanish (Nicaragua)',
    'es_PA' => 'Spanish (Panama)',
    'es_PY' => 'Spanish (Paraguay)',
    'es_PE' => 'Spanish (Peru)',
    'es_PR' => 'Spanish (Puerto Rico)',
    'es_ES' => 'Spanish (Spain)',
    'es_US' => 'Spanish (United States)',
    'es_UY' => 'Spanish (Uruguay)',
    'es_VE' => 'Spanish (Venezuela)',
    'es' => 'Spanish',
    'sw_KE' => 'Swahili (Kenya)',
    'sw_TZ' => 'Swahili (Tanzania)',
    'sw' => 'Swahili',
    'sv_FI' => 'Swedish (Finland)',
    'sv_SE' => 'Swedish (Sweden)',
    'sv' => 'Swedish',
    'gsw_CH' => 'Swiss German (Switzerland)',
    'gsw' => 'Swiss German',
    'shi_Latn' => 'Tachelhit (Latin)',
    'shi_Latn_MA' => 'Tachelhit (Latin, Morocco)',
    'shi_Tfng' => 'Tachelhit (Tifinagh)',
    'shi_Tfng_MA' => 'Tachelhit (Tifinagh, Morocco)',
    'shi' => 'Tachelhit',
    'dav_KE' => 'Taita (Kenya)',
    'dav' => 'Taita',
    'ta_IN' => 'Tamil (India)',
    'ta_LK' => 'Tamil (Sri Lanka)',
    'ta' => 'Tamil',
    'te_IN' => 'Telugu (India)',
    'te' => 'Telugu',
    'teo_KE' => 'Teso (Kenya)',
    'teo_UG' => 'Teso (Uganda)',
    'teo' => 'Teso',
    'th_TH' => 'Thai (Thailand)',
    'th' => 'Thai',
    'bo_CN' => 'Tibetan (China)',
    'bo_IN' => 'Tibetan (India)',
    'bo' => 'Tibetan',
    'ti_ER' => 'Tigrinya (Eritrea)',
    'ti_ET' => 'Tigrinya (Ethiopia)',
    'ti' => 'Tigrinya',
    'to_TO' => 'Tonga (Tonga)',
    'to' => 'Tonga',
    'tr_TR' => 'Turkish (Turkey)',
    'tr' => 'Turkish',
    'uk_UA' => 'Ukrainian (Ukraine)',
    'uk' => 'Ukrainian',
    'ur_IN' => 'Urdu (India)',
    'ur_PK' => 'Urdu (Pakistan)',
    'ur' => 'Urdu',
    'uz_Arab' => 'Uzbek (Arabic)',
    'uz_Arab_AF' => 'Uzbek (Arabic, Afghanistan)',
    'uz_Cyrl' => 'Uzbek (Cyrillic)',
    'uz_Cyrl_UZ' => 'Uzbek (Cyrillic, Uzbekistan)',
    'uz_Latn' => 'Uzbek (Latin)',
    'uz_Latn_UZ' => 'Uzbek (Latin, Uzbekistan)',
    'uz' => 'Uzbek',
    'vi_VN' => 'Vietnamese (Vietnam)',
    'vi' => 'Vietnamese',
    'vun_TZ' => 'Vunjo (Tanzania)',
    'vun' => 'Vunjo',
    'cy_GB' => 'Welsh (United Kingdom)',
    'cy' => 'Welsh',
    'yo_NG' => 'Yoruba (Nigeria)',
    'yo' => 'Yoruba',
    'zu_ZA' => 'Zulu (South Africa)',
    'zu' => 'Zulu',
  ];

  foreach ($languages as $code => $language) {
    $term = Term::create([
      'parent' => [],
      'name' => $language,
      'description' => [
        'value' => $code,
        'format' => 'full_html',
      ],
      'vid' => 'language',
    ])->save();
  }

  // Content Type Terms.
  $content_types = [
    '536' => 'Communication',
    '541' => 'Completed Form',
    '546' => 'Official Ruling',
    '606' => 'Data',
    '551' => 'Diagram',
    '556' => 'Form',
    '561' => 'Informational',
    '566' => 'Job',
    '571' => 'Map',
    '61' => 'Meeting',
    '576' => 'Planning',
    '51' => 'Procurement',
    '581' => 'Rate',
    '586' => 'Regulation',
    '36' => 'Report',
    '591' => 'Retirement',
    '596' => 'Supporting Doc',
    '601' => 'Voting',
    '71O' => 'ther',
  ];

  foreach ($content_types as $code => $content_type) {
    $term = Term::create([
      'parent' => [],
      'name' => $content_type,
      'description' => [
        'value' => $code,
        'format' => 'full_html',
      ],
      'vid' => 'content_type',
    ])->save();
  }

  // License Terms.
  $licenses = [
    'cc-by' => 'Creative Commons Attribution',
    'cc-by-sa' => 'Creative Commons Attribution Share-Alike',
    'cc-zero' => 'Creative Commons CCZero',
    'cc-nc' => 'Creative Commons Non-Commercial (Any)',
    'cc-by-nc-nd' => 'Attribution NonCommercial NoDerivatives 4.0 International',
    'gfdl' => 'GNU Free Documentation License',
    'odc-by' => 'Open Data Commons Attribution License',
    'odc-odbl' => 'Open Data Commons Open Database License (ODbL)',
    'odc-pddl' => 'Open Data Commons Public Domain Dedication and Licence (PDDL)',
    'uk-ogl' => 'UK Open Government Licence (OGL)',
    'other-at' => 'Other (Attribution)',
    'other-nc' => 'Other (Non-Commercial)',
    'other-closed' => 'Other (Not Open)',
    'other-open' => 'Other (Open)',
    'other-pd' => 'Other (Public Domain)',
    'notspecified' => 'License Not Specified',
  ];

  foreach ($licenses as $code => $license) {
    $term = Term::create([
      'parent' => [],
      'name' => $license,
      'description' => [
        'value' => $code,
        'format' => 'full_html',
      ],
      'vid' => 'license',
    ])->save();
  }
}

/**
 * Enable the dynamic_entity_reference module.
 *
 * A cache clear during deployment could throw an error if this module isn't
 * installed before since configuration has been exported for the field that
 * it implements.
 */
function mass_content_update_8010() {
  $modules = ['dynamic_entity_reference'];
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Fix media entity updates.
 *
 * This fixes the Entity Type settings that did not properly get reset after
 * the switch from media_entity to core media.
 */
function mass_content_update_8011() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $definition_update_manager->getEntityType('media');
  $check = $entity_type->get('originalClass');
  if ($check == NULL) {
    $entity_type->set('revision_metadata_keys',
      [
        'revision_default' => 'revision_default',
        'revision_user' => 'revision_user',
        'revision_created' => 'revision_created',
        'revision_log_message' => 'revision_log_message',
      ]
    );
    $entity_type->set('handlers',
      [
        'storage' => 'Drupal\media\MediaStorage',
        'view_builder' => 'Drupal\Core\Entity\EntityViewBuilder',
        'list_builder' => 'Drupal\media\MediaListBuilder',
        'access' => 'Drupal\media\MediaAccessControlHandler',
        'translation' => 'Drupal\content_translation\ContentTranslationHandler',
        'views_data' => 'Drupal\media\MediaViewsData',
        'inline_form' => '\Drupal\inline_entity_form\Form\EntityInlineForm',
        'moderation' => 'Drupal\content_moderation\Entity\Handler\ModerationHandler',
        'form' => [
          'default' => 'Drupal\media\MediaForm',
          'add' => 'Drupal\media\MediaForm',
          'edit' => 'Drupal\media\MediaForm',
          'delete' => 'Drupal\Core\Entity\ContentEntityDeleteForm',
          'delete-multiple-confirm' => 'Drupal\Core\Entity\Form\DeleteMultipleForm',
        ],
        'route_provider' => [
          'html' => 'Drupal\Core\Entity\Routing\AdminHtmlRouteProvider',
          'moderation' => 'Drupal\content_moderation\Entity\Routing\EntityModerationRouteProvider',
        ],
      ]
    );
    $entity_type->set('originalClass', 'Drupal\media\Entity\Media');
    $definition_update_manager->updateEntityType($entity_type);
  }
}

// @codingStandardsIgnoreStart
/**
 *  This function is commented out because the applyupdates method is depricated.
 *
 * More fixes for media entity.
 *
 * This runs entity updates that did not properly get run after
 * the switch from media_entity to core media.
function mass_content_update_8012() {
  Drupal::entityDefinitionUpdateManager()->applyupdates();
}
 */
// @codingStandardsIgnoreEnd

/**
 * Even more fixes for media entity.
 *
 * Fix target_type setting for the bundle base field on media entity.
 */
function mass_content_update_8013() {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $bundle = $entity_definition_update_manager->getFieldStorageDefinition('bundle', 'media');
  $bundle->setSetting('target_type', 'media_type');
  $entity_definition_update_manager->updateFieldStorageDefinition($bundle);
}

/**
 * Remove archived moderation state from nodes and move them to unpublished.
 */
function mass_content_update_8014() {
  $connection = \Drupal::database();
  $revisions = $connection->update('content_moderation_state_field_revision')
    ->fields([
      'moderation_state' => 'unpublished',
    ])
    ->condition('moderation_state', 'archived', '=')
    ->execute();

  $data = $connection->update('content_moderation_state_field_data')
    ->fields([
      'moderation_state' => 'unpublished',
    ])
    ->condition('moderation_state', 'archived', '=')
    ->execute();
}

/**
 * Remove all legacy redirect content types.
 */
function mass_content_update_8015(&$sandbox) {
  $_ENV['MASS_FLAGGING_BYPASS'] = TRUE;
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'legacy_redirects');
  $query->accessCheck(FALSE);
  if (empty($sandbox)) {
    // Initialize other variables.
    $sandbox['current'] = 0;
    $sandbox['progress'] = 0;
    $count = clone $query;
    $sandbox['max'] = $count->count()->execute();
  }

  $batch_size = 500;

  $nids = $query->condition('nid', $sandbox['current'], '>')
    ->sort('nid')
    ->range(0, $batch_size)
    ->execute();

  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $entities = $storage_handler->loadMultiple($nids);
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      $sandbox['current'] = $entity->id();
      $entity->delete();
      $sandbox['progress']++;
    }
    Drupal::logger('Mass Content')->info('Deleted !count legacy redirect nodes from !max.', ['!count' => $sandbox['progress'], '!max' => $sandbox['max']]);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  if ($sandbox['#finished'] >= 1) {
    return t('Deleted all nodes of Legacy redirects content.');
  }
}

/**
 * Remove all legacy redirect tables.
 */
function mass_content_update_8016(&$sandbox) {
  $tables = [
    'redirect_replacements_onetoone',
    'redirect_replacements_content',
    'redirect_replacements_o2o_debug',
  ];
  foreach ($tables as $table) {
    if (Database::getConnection()->schema()->tableExists($table)) {
      Database::getConnection()->schema()->dropTable($table);
    }
  }
}

/**
 * Remove all link_group paragraphs.
 */
function mass_content_update_8017(&$sandbox) {
  $_ENV['MASS_FLAGGING_BYPASS'] = TRUE;
  $query = \Drupal::entityQuery('paragraph');
  $query->condition('type', 'link_group');
  $query->accessCheck(FALSE);

  if (empty($sandbox)) {
    // Initialize other variables.
    $sandbox['current'] = 0;
    $sandbox['progress'] = 0;
    $count = clone $query;
    $sandbox['max'] = $count->count()->execute();
  }

  $batch_size = 50;

  $pids = $query->condition('id', $sandbox['current'], '>')
    ->sort('id')
    ->range(0, $batch_size)
    ->execute();

  $storage_handler = \Drupal::entityTypeManager()->getStorage('paragraph');
  $entities = $storage_handler->loadMultiple($pids);
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      $sandbox['current'] = $entity->id();
      $entity->delete();
      $sandbox['progress']++;
    }
    Drupal::logger('Mass Content')->info('Deleted !count link_group paragraphs from !max.', ['!count' => $sandbox['progress'], '!max' => $sandbox['max']]);
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  if ($sandbox['#finished'] >= 1) {
    return t('Deleted all link_group paragraphs.');
  }
}
