<?php

/**
 * @file
 * Contains mass_translations.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageDefault;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Language\LanguageManager;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\mass_translations\Controller\TranslationsController;
use Drupal\mayflower\Prepare\Organisms;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_media().
 */
function mass_translations_preprocess_media(&$variables) {
  if (($variables["view_mode"] == 'media_download_link' || $variables["view_mode"] == 'linked_desc' || $variables["view_mode"] == 'manual_desc') && $variables['media']->hasField('field_media_english_version')) {
    _mass_translations_media_helper($variables);
  }
}

/**
 * Helper function to process and build translation links for a media entity.
 */
function _mass_translations_media_helper(array &$variables) {
  $cache_tags = [];
  $media = $variables['media'];
  $languageManager = \Drupal::languageManager();
  $lang_default = $languageManager->getCurrentLanguage();
  $languages = [];
  $media_storage = \Drupal::service('entity_type.manager')
    ->getStorage('media');
  $translations_controller = new TranslationsController($media_storage);
  $current_url = Url::fromRoute('media_entity_download.download', ['media' => $media->id()])
    ->setAbsolute()
    ->toString();
  $lang_codes = $languageManager->getLanguages();

  // Get all the translations for this media.
  $all_translations = $translations_controller->getTranslationLanguages($media, $media_storage, 'field_media_english_version');
  // Replace "x-default" with the default language id.
  $all_translations[$lang_default->getId()] = $all_translations["x-default"];
  unset($all_translations["x-default"]);
  // Sort translations in the same order as languages in the UI.
  $sorted_translations = array_replace($lang_codes, array_flip(array_keys($lang_codes)), $all_translations);
  // Build links for translations.
  foreach ($sorted_translations as $language_id => $translation) {
    if ($translation instanceof MediaInterface) {
      // Skip any translation that cannot be viewed.
      $access = $translation->access('view', NULL, TRUE);
      if (!$access->isAllowed()) {
        continue;
      }

      $name = NULL;
      $predefined = $languageManager->getStandardLanguageList();
      // Get the native name for each language.
      if (isset($predefined[$language_id])) {
        $name = $predefined[$language_id][1];
        $name_en = $predefined[$language_id][0];
      }
      else {
        $name = $name_en = $lang_codes[$language_id]->getName();
      }
      // Build the translation link.
      $url = Url::fromRoute('media_entity_download.download', ['media' => $translation->id()])
        ->setOption('language', $lang_default)
        ->setAbsolute()
        ->toString();
      $cache_tags = array_merge($cache_tags, $translation->getCacheTags(), $access->getCacheTags());
      if ($url != $current_url) {
        $languages[] = [
          "title" => $name,
          "lang_label" => $name_en,
          "url" => $url,
        ];
      }
    }
  }
  if (count($languages) >= 1) {
    $inlineLinks = Organisms::prepareInlineLinksForLanguages($languages, ["ariaLabel" => "Available Translations"]);
    $variables += ["translationLinks" => $inlineLinks];
  }
  // Bubble cache tag to the current render. Based on template_preprocess_pager()
  // Needed until core implements https://www.drupal.org/project/drupal/issues/3028976
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheTags($cache_tags)
    ->applyTo($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_translations_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Generate translation links variables.
  if ($variables["view_mode"] == "full" && $node->hasField('field_english_version')) {
    $cache_tags = [];
    $languageManager = Drupal::languageManager();
    $lang_default = $languageManager->getCurrentLanguage();
    $languages = NULL;
    $node_storage = Drupal::service('entity_type.manager')->getStorage('node');
    $translations_controller = new TranslationsController($node_storage);
    $current_url = Drupal::request()->getUri();
    $lang_codes = $languageManager->getLanguages();

    // Get all the translations for this node.
    $all_translations = $translations_controller->getTranslationLanguages($node, $node_storage, 'field_english_version');
    // Replace "x-default" with the default language id.
    $all_translations[$lang_default->getId()] = $all_translations["x-default"];
    unset($all_translations["x-default"]);
    // Sort translations in the same order as languages in the UI.
    $sorted_translations = array_replace($lang_codes, array_flip(array_keys($lang_codes)), $all_translations);
    // Build links for translations.
    foreach ($sorted_translations as $language_id => $translation) {
      if ($translation instanceof NodeInterface) {
        // Skip any translation that cannot be viewed.
        $access = $translation->access('view', NULL, TRUE);
        if (!$access->isAllowed()) {
          continue;
        }

        $name = NULL;

        $predefined = $languageManager->getStandardLanguageList();
        // Get the native name for each language.
        if (isset($predefined[$language_id])) {
          $name = $predefined[$language_id][1];
          $name_en = $predefined[$language_id][0];
        }
        else {
          $name = $name_en = $lang_codes[$language_id]->getName();
        }
        // Build the translation link.
        $url = Url::fromRoute('entity.node.canonical', ['node' => $translation->id()])
          ->setOption('node', $lang_default)
          ->setAbsolute()
          ->toString();
        $cache_tags = array_merge($cache_tags, $translation->getCacheTags(), $access->getCacheTags());
        $languages[] = ["title" => $name, "lang_label" => $name_en, "url" => ($url != $current_url) ? $url : NULL];
      }
    }

    if (count($languages) > 1) {
      $inlineLinks = Organisms::prepareInlineLinksForLanguages($languages, ["ariaLabel" => "Available Translations"]);
      $variables += ["translationLinks" => $inlineLinks];
    }
    // Bubble cache tag to the current render. Based on template_preprocess_pager()
    // Needed until core implements https://www.drupal.org/project/drupal/issues/3028976
    CacheableMetadata::createFromRenderArray($variables)
      ->addCacheTags($cache_tags)
      ->applyTo($variables);
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Adapted from content_translation.module.
 */
function mass_translations_page_attachments(array &$attachments) {
  $cache = CacheableMetadata::createFromRenderArray($attachments);
  $route_match = Drupal::routeMatch();

  // If the current route has no parameters, return.
  if (!($route = $route_match->getRouteObject()) || !($parameters = $route->getOption('parameters'))) {
    return;
  }

  // Determine if the current route represents an entity.
  foreach ($parameters as $name => $options) {
    if (!isset($options['type']) || strpos($options['type'], 'entity:') !== 0) {
      continue;
    }

    $node_storage = Drupal::service('entity_type.manager')->getStorage('node');
    $translations_controller = new TranslationsController($node_storage);

    $entity = $route_match->getParameter($name);
    if ($entity instanceof NodeInterface && $entity->hasLinkTemplate('canonical')) {
      // Current route represents a content entity. Build hreflang links.
      foreach ($translations_controller->getTranslationLanguages($entity, $node_storage, 'field_english_version') as $language_id => $translation) {
        // Skip any translation that cannot be viewed.
        $access = $translation->access('view', NULL, TRUE);
        $cache->addCacheableDependency($access);
        if (!$access->isAllowed()) {
          continue;
        }

        $language_manager = new LanguageManager(new LanguageDefault([]));
        $url = $translation->toUrl('canonical')
          ->setOption('language', $language_manager->getLanguage('en'))
          ->setAbsolute()
          ->toString();
        $attachments['#attached']['html_head_link'][] = [
          [
            'rel' => 'alternate',
            'hreflang' => $language_id,
            'href' => $url,
          ],
          TRUE,
        ];
      }
    }
    // Since entity was found, no need to iterate further.
    break;
  }
  // Apply updated caching information.
  $cache->applyTo($attachments);
}

/**
 * Implements hook_field_widget_multivalue_form_alter().
 *
 * Hides 'Use existing media' text.
 */
function mass_translations_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
  if (isset($elements['#field_name']) && $elements['#field_name'] == 'field_media_english_version') {
    if (!empty($elements[0]['target_id']['#title'])) {
      $elements[0]['target_id']['#title'] = '';
    }
  }
  // Fixes the "English Version" field help text.
  if (isset($elements['#field_name']) && $elements['#field_name'] == 'field_media_english_version') {
    $elements['#media_help']['#media_list_help'] = 'Start typing the document title or filename.';
    $overview_url = Url::fromUri('internal:/admin/ma-dash/documents');
    if ($overview_url->access()) {
      $elements['#media_help']['#media_list_link'] = t('See the <a href=":list_url" target="_blank">document list</a> (opens a new window) to help locate media.', [':list_url' => $overview_url->toString()]);
    }
    $elements['#media_help']['#allowed_types_help'] = '';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function mass_translations_element_info_alter(array &$info) {
  if (isset($info['language_select'])) {
    if (!isset($info['language_select']['#process'])) {
      $info['language_select']['#process'] = [];
    }
    $info['language_select']['#process'] = array_merge($info['language_select']['#process'], [
      'mass_translations_process_language_select',
    ]);
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function mass_translations_pathauto_alias_alter(&$alias, array &$context) {
  // For nodes, set the context language to undefined to allow aliases to be used in canonical links.
  if ($context['module'] == 'node' && $context['language'] != 'en') {
    $context['language'] = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  }
  else {
    // Set the context pathauto alias language to English to prevent duplicate aliases. This is especially important for documents.
    $context['language'] = 'en';
  }
}

/**
 * Processes a language select list form element.
 *
 * @param array $element
 *   The form element to process.
 *
 * @return array
 *   The processed form element.
 */
function mass_translations_process_language_select(array $element): array {
  $element['#description'] = t('If the language you need is not here, please file a @servicenow_request.',
    [
      '@servicenow_request' => Link::fromTextAndUrl(
        t('ServiceNow request'),
        Url::fromUri('https://massgov.service-now.com/sp?id=sc_cat_item&sys_id=0bb8e784dbec0700f132fb37bf9619fe')
      )->toString(),
    ]
  );

  return $element;
}

/**
 * Implements hook_entity_presave().
 */
function mass_translations_entity_presave(EntityInterface $entity) {
  $supports_english_version = method_exists($entity, 'supportsEnglishFieldName') && $entity->supportsEnglishFieldName();
  if ($supports_english_version && $entity->get('langcode')->value == 'en') {
    // If the Language is English, there isn't a separate English version.
    $entity->set($entity->getEnglishFieldName(), '');
  }

  // Invalidate the English version as that has the list of translation links.
  if ($supports_english_version && $ref = $entity->getEnglishVersion()->getString()) {
    Cache::invalidateTags([$entity->getEntityTypeId() . ':' . $ref]);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function mass_translations_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Our hook_field_widget_multivalue_form_alter() to execute last.
    case 'field_widget_multivalue_form_alter':
      $group = $implementations['mass_translations'];
      unset($implementations['mass_translations']);
      $implementations['mass_translations'] = $group;
      break;
  }
}
