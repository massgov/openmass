<?php

/**
 * @file
 * Contains mass_metatag.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldItemList;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\link\LinkItemInterface;
use Drupal\mass_content\Entity\Bundle\node\NodeBundle;
use Drupal\mayflower\Helper;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\schema_metatag\SchemaMetatagManager;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_token_info().
 */
function mass_metatag_token_info() {
  $info['tokens']['node']['dm_organizations'] = [
    'name' => t('Related organization pages'),
    'description' => t("The organization pages related to the current node."),
    'type' => 'node',
  ];
  $info['tokens']['node']['mass_external_organizations'] = [
    'name' => t('Related external organizations'),
    'description' => t("The external organizations related to the current node."),
    'type' => 'node',
  ];
  $info['tokens']['node']['mass_organizations'] = [
    'name' => t('Related organizations'),
    'description' => t('The organizations related to the current node.'),
    'type' => 'node',
  ];
  $info['tokens']['node']['mass_parent_organizations'] = [
    'name' => t('Parent organizations'),
    'description' => t('The parent organizations related to the current node.'),
    'type' => 'node',
  ];
  $info['tokens']['node']['mass_labels'] = [
    'name' => t('Node labels'),
    'description' => t('The labels related to the current node.'),
    'type' => 'node',
  ];
  $info['tokens']['node']['dm_services'] = [
    'name' => t('Related service pages'),
    'description' => t("The service pages related to the current node."),
    'type' => 'node',
  ];
  $info['tokens']['node']['dm_topics'] = [
    'name' => t('Related topic pages'),
    'description' => t("The topic pages related to the current node."),
    'type' => 'node',
  ];
  $info['tokens']['node']['dm_locations'] = [
    'name' => t('Related location pages'),
    'description' => t("The location pages related to the current node."),
    'type' => 'node',
  ];
  $info['tokens']['string']['mass_urlencode'] = [
    'name' => t('urlencode a string'),
    'description' => t("Run a string through the urlencode function."),
  ];
  $info['tokens']['paragraph']['mass_jsonify_links'] = [
    'name' => t('jsonify links'),
    'description' => t("Create a JSON representation of a set of links contained within paragraphs."),
  ];
  $info['tokens']['node']['mass_related_terms'] = [
    'name' => t('Related taxonomy'),
    'description' => t('The terms related to the current node.'),
    'type' => 'node',
  ];
  $info['tokens']['node']['mass_services_category'] = [
    'name' => t('Services tag'),
    'description' => t('The Services category metatag.'),
    'type' => 'node',
  ];
  $info['tokens']['term']['mass_term_labels'] = [
    'name' => t('Taxonomy term labels'),
    'description' => t('The labels related to the current Taxonomy term.'),
    'type' => 'term',
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function mass_metatag_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'term') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'mass_term_labels':
          $metatag_utils = \Drupal::service('mass_metatag.utilities');
          if (isset($data['term'])) {
            if ($data['term'] instanceof ContentEntityInterface) {
              $term = $data['term'];
            }
          }
          elseif ($collection = \Drupal::routeMatch()->getParameter('collection')) {
            // Get collection terms matching the field_url_name
            $query = Drupal::entityQuery('taxonomy_term');
            $query
              ->condition('vid', 'collections')
              ->condition('field_url_name', $collection)
              ->range(0, 1);

            $res = $query->accessCheck(FALSE)->execute();
            if ($res) {
              $tid = reset($res);
              $term = Term::load($tid);
            }
          }
          if ($term) {
            $labels = $metatag_utils->getAllLabelsFromEntity($term);
            // Remove hyphens from the labels...
            $label_names = [];
            foreach ($labels as $key => $value) {
              $label_names[$key] = str_replace("-", "", $value);
            }

            // Separate the labels with a comma.
            $replacements[$original] = implode(',', $label_names);
          }
          break;
      }
    }
  }
  if ($type == 'node') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'dm_organizations':
          $usage = \Drupal::service('entity_usage.usage');
          if ($result = $usage->listReferencedEntities($data['node'])) {
            if ($result['node']) {
              $nids = array_keys($result['node']);
              $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
              foreach ($nodes as $node) {
                if ($node->bundle() == 'org_page') {
                  $values[] = [
                    'name' => $node->getTitle(),
                    'url' => $node->toUrl('canonical', ['absolute' => TRUE])
                      ->toString(),
                  ];
                  $replacements[$original] = json_encode($values);
                }
              }
            }
          }
          break;

        case 'dm_services':
          $usage = \Drupal::service('entity_usage.usage');
          if ($result = $usage->listReferencedEntities($data['node'])) {
            if ($result['node']) {
              $nids = array_keys($result['node']);
              $nodes = \Drupal::entityTypeManager()
                ->getStorage('node')
                ->loadMultiple($nids);
              foreach ($nodes as $node) {
                if ($node->bundle() == 'service_page') {
                  $values[] = [
                    'name' => $node->getTitle(),
                    'url' => $node->toUrl('canonical', ['absolute' => TRUE])
                      ->toString(),
                  ];
                  $replacements[$original] = json_encode($values);
                }
              }
            }
          }
          break;

        case 'dm_topics':
          $usage = \Drupal::service('entity_usage.usage');
          if ($result = $usage->listReferencedEntities($data['node'])) {
            if ($result['node']) {
              $nids = array_keys($result['node']);
              $nodes = \Drupal::entityTypeManager()
                ->getStorage('node')
                ->loadMultiple($nids);
              foreach ($nodes as $node) {
                if ($node->bundle() == 'topic_page') {
                  $values[] = [
                    'name' => $node->getTitle(),
                    'url' => $node->toUrl('canonical', ['absolute' => TRUE])
                      ->toString(),
                  ];
                  $replacements[$original] = json_encode($values);
                }
              }
            }
          }
          break;

        case 'dm_locations':
          $usage = \Drupal::service('entity_usage.usage');
          if ($result = $usage->listReferencedEntities($data['node'])) {
            if ($result['node']) {
              $nids = array_keys($result['node']);
              $nodes = \Drupal::entityTypeManager()
                ->getStorage('node')
                ->loadMultiple($nids);
              foreach ($nodes as $node) {
                if ($node->bundle() == 'location') {
                  $values[] = [
                    'name' => $node->getTitle(),
                    'url' => $node->toUrl('canonical', ['absolute' => TRUE])
                      ->toString(),
                  ];
                  $replacements[$original] = json_encode($values);
                }
              }
            }
          }
          break;

        case 'dm_child_locations':
          $location_nodes = Helper::getReferencedEntitiesFromSectionField($data['node'], [
            'field_organization_sections',
            'field_section_long_form_content',
            'field_org_ref_locations',
          ]);
          // If there are child locations, link to the Locations listing page.
          if (count($location_nodes)) {
            $org_name = $data['node']->label();
            $values[] = [
              'name' => t('@org_name Locations', ['@org_name' => $org_name]),
              'url' => $data['node']->toUrl('canonical', ['absolute' => TRUE])
                ->toString() . '/locations',
            ];
            $replacements[$original] = json_encode($values);
          }
          break;

        case 'mass_external_organizations':
          /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
          $entity_field_manager = \Drupal::service('entity_field.manager');
          $fields = $entity_field_manager->getFieldDefinitions('node', $data['node']->getType());
          foreach ($fields as $field_name => $field) {
            if ($field->getType() == 'entity_reference_revisions' && $field->getSettings()['target_type'] == 'paragraph') {
              $handler_settings = $field->getSetting('handler_settings');
              // If the field targets 'external_organization' paragraphs, get
              // the name value.
              if (!empty($handler_settings['target_bundles']['external_organization'])) {
                foreach ($data['node']->get($field_name) as $item) {
                  if ($item->entity) {
                    if ($item->entity->hasField('field_external_org_name')) {
                      $values[] = $item->entity->field_external_org_name->value;
                      $replacements[$original] = json_encode($values);
                    }
                  }
                }
              }
            }
          }
          break;

        case 'mass_labels':
          $metatag_utils = \Drupal::service('mass_metatag.utilities');
          if (isset($data['node'])) {
            if ($data['node'] instanceof ContentEntityInterface) {
              $labels = $metatag_utils->getAllLabelsFromEntity($data['node']);
              // Remove hyphens from the labels...
              $label_names = [];
              foreach ($labels as $key => $value) {
                $label_names[$key] = str_replace("-", "", $value);
              }

              // Separate the labels with a comma.
              $replacements[$original] = implode(',', $label_names);
            }
          }
          break;

        case 'mass_organizations':
          if ($data['node'] instanceof NodeBundle) {
            $org_nodes = $data['node']->getOrganizations()->referencedEntities();
            // If we have an org page, also return myself.
            if ($data['node']->bundle() == 'org_page') {
              $org_nodes[] = $data['node'];
            }
            if ($org_nodes) {
              $utilities = \Drupal::service('mass_metatag.utilities');
              $org_slugs = [];
              foreach ($org_nodes as $org) {
                $org_slugs[] = str_replace("-", "", $utilities->slugify(trim($org->label())));
              }

              $org_names = array_unique($org_slugs);
              // Separate the organizations with a comma.
              $replacements[$original] = implode(',', $org_names);
            }
          }
          break;
        case 'mass_parent_organizations':
          /** @var \Drupal\mass_metatag\Service\MassMetatagUtilities $metatag_utils */
          $metatag_utils = \Drupal::service('mass_metatag.utilities');
          $org_names = $metatag_utils->getAllOrgsFromNode($data['node'], TRUE);

          // Remove hyphens from organizations.
          foreach ($org_names as $key => $value) {
            $org_names[$key] = str_replace("-", "", $value);
          }

          $org_names = array_unique($org_names);
          // Separate the organizations with a comma.
          $replacements[$original] = implode(',', $org_names);
          break;
        case 'mass_related_terms':
          $tags = [];

          switch ($data['node']->getType()) {
            case "curated_list":
              $term_ref_name = 'field_list_data_type';
              $term_default = "field_list_datatype_metatag";
              break;

            case "service_page":
              $term_ref_name = 'field_list_data_type';
              $term_default = "field_details_datatype_metatag";
              break;

            default:
              $term_ref_name = 'field_details_data_type';
              $term_default = "field_details_datatype_metatag";
              break;
          }

          if ($data['node']->hasField($term_ref_name) && $data_type = $data['node']->get($term_ref_name)) {
            $items = $data_type->referencedEntities();
            if (!empty($items)) {
              $type_name = $items[0]->get('name')->getString();
              $data_resources = $data['node']->get('field_data_resource_type');
              if (!$data_resources->isEmpty() && strpos($type_name, 'resource') !== FALSE) {
                foreach ($data_resources->referencedEntities() as $k => $resource) {
                  $tags[$k] = $resource->get('field_dataresource_metatag')->getString();
                }
              }
              elseif (!$items[0]->get($term_default)->isEmpty()) {
                $tags[] = $items[0]->get($term_default)->getString();
              }
            }
          }

          $replacements[$original] = implode(',', $tags);
          break;

        case 'mass_services_category':
          $tag = 'services';
          if ($data['node']->hasField('field_data_flag') && $data_flag = $data['node']->get('field_data_flag')) {
            if (!empty($data_flag->getValue())) {
              $tag = 'data';
            }
          }
          $replacements[$original] = $tag;
          break;

      }
    }
  }

  if (array_key_exists('mass_urlencode', $tokens)) {
    foreach ($data as $field) {
      if ($field instanceof FieldItemList) {
        $replacements[$tokens['mass_urlencode']] = urlencode(Helper::formatAddress($field));
      }
    }
  }
  if (array_key_exists('mass_jsonify_links', $tokens)) {
    $values = [];
    foreach ($data as $field) {
      if ($field instanceof FieldItemList) {

        // Each item should be a paragraph. The link data is stored differently
        // for each type of paragraph.
        foreach ($field as $item) {
          $paragraph = $item->entity;
          switch ($paragraph->bundle()) {
            case 'links':
              foreach ($paragraph->field_link_single as $link) {
                if ($link instanceof LinkItemInterface) {
                  $url = $link->getUrl()->setAbsolute();
                  $name = $link->computed_title;
                  // Sometimes the computed_title is a render array, the output
                  // must be a string.
                  if (!is_string($name) && isset($name['#markup'])) {
                    $name = $name['#markup'];
                  }
                  if (empty($name) || !is_string($name)) {
                    if ($entity = Helper::entityFromUrl($url)) {
                      $name = $entity->label();
                    }
                    else {
                      $name = $url->toString();
                    }
                  }
                  $values[] = [
                    'name' => $name,
                    'url' => $url->toString(),
                  ];
                }
              }
              break;

            case 'online_email':
              $email = $paragraph->field_email->value;
              $values[] = ['name' => $email, 'url' => $email];
              break;
          }
        }
      }
    }

    $replacements[$tokens['mass_jsonify_links']] = json_encode($values);
  }
  return $replacements;
}

/**
 * Implements hook_page_attachments().
 */
function mass_metatag_page_attachments(array &$attachments) {
  mass_metatag_dataformat($attachments);
  // Manually add dataset JSON-LD.
  mass_metatag_dataset($attachments);

  // We proceed to add metatags "mg_backend_user_id" and "mg_backend_user_org"
  // only if the current user is a logged in user of our product, and the
  // admin theme is active (which could be both admin routes, and non-frontend
  // non-admin routes.
  if (\Drupal::currentUser()->isAuthenticated() && \Drupal::service('theme.manager')->getActiveTheme()->getName() == 'mass_admin_theme') {
    $user = Drupal::currentUser();
    $user_entity = User::load($user->id());
    $referenced_entities = $user_entity->getOrg()->referencedEntities();
    if (count($referenced_entities) == 1) {
      $user_org_term = array_pop($referenced_entities);
      $slugified_user_org = _mass_metatag_slugify(trim($user_org_term->getName()));
    }

    // We directly put together the render arrays that create
    // "mg_backend_user_id" and "mg_backend_user_org" metatags, instead of -
    // - Creating metatags config entities like so
    //   Link: https://github.com/massgov/mass/blob/60a45018c31d9450d25a73c7f70f10bbbb2a7eb1/docroot/modules/custom/mass_metatag/src/Plugin/metatag/Tag/MassMetatagStakeholderOrg.php.
    // - And then setting their values here
    //   Link: https://mass.local/admin/config/search/metatag
    // Because when we tried that solution approach
    // - Extra work was needed to show those on admin pages at all,
    //   or admin pages only because of how metatag module is designed.
    // - And after we did that work, dynamic cacheability would break
    //   Link: https://circleci.com/gh/massgov/mass/24841.
    $user_metatag_render_array = [
      [
        "#tag" => "meta",
        "#attributes" => [
          "name" => "mg_backend_user_id",
          "content" => $user->id(),
        ],
      ],
      "mg_backend_user_id",
    ];

    $user_org_metatag_render_array = [
      [
        "#tag" => "meta",
        "#attributes" => [
          "name" => "mg_backend_user_org",
          "content" => isset($slugified_user_org) ? $slugified_user_org : "user-org-not-set",
        ],
      ],
      "mg_backend_user_org",
    ];

    $attachments['#attached']['html_head'][] = $user_metatag_render_array;
    $attachments['#attached']['html_head'][] = $user_org_metatag_render_array;
  }

  // Set robots "noindex, follow" on these overflow pages.
  $paths = [
    'need-to-know',
    'tasks',
    'related',
    'resources',
  ];

  $current_path = \Drupal::service('path.current')->getPath();
  $uri_parts = explode('/', $current_path);
  $uri_end = end($uri_parts);
  $noindex_and_follow = FALSE;

  // The /download route is provided via simple_sitemap so don't index the canonical.
  if (\Drupal::routeMatch()->getRouteName() === 'entity.media.canonical') {
    $noindex_and_follow = TRUE;
  }

  if (in_array($uri_end, $paths) && substr_count($current_path, '/') > 1) {
    $noindex_and_follow = TRUE;
  }

  if ($noindex_and_follow) {
    $noindex = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'robots',
        'content' => 'noindex, follow',
      ],
    ];
    $attachments['#attached']['html_head'][] = [$noindex, 'noindex'];
  }
}

/**
 * Add data format metatag if needed.
 *
 * @param array $attachments
 *   A render array.
 */
function mass_metatag_dataformat(array &$attachments) {
  $route_match = Drupal::routeMatch();
  /** @var Drupal\Node\NodeInterface $node */
  if ($route_match->getRouteName() == 'entity.node.canonical' && ($node = $route_match->getParameter('node')) && $node instanceof NodeInterface) {
    if (!$node->hasField('field_data_format') || $node->get('field_data_format')->isEmpty()) {
      // Skip inapplicable nodes.
      return;
    }
  }
  else {
    return;
  }

  $tag = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'mg_encoding_format',
      'content' => str_replace(' ', '', $node->get('field_data_format')->getString()),
    ],
  ];
  $attachments['#attached']['html_head'][] = [$tag, 'mg_encoding_format'];
}

/**
 * Implements hook_datalayer_meta().
 *
 * Add entityField_organizations to dataLayer.
 */
function mass_metatag_datalayer_meta() {
  return [
    'field_organizations',
  ];
}

/**
 * Implements hook_datalayer_alter().
 */
function mass_metatag_datalayer_alter(&$data_layer) {
  if (isset($data_layer['entityIdentifier']) && isset($data_layer['entityType']) && $data_layer['entityType'] === 'node') {
    $node = Node::load($data_layer['entityIdentifier']);
    if ($node) {
      if (isset($node->field_intended_audience)) {
        $data_layer['intended_audience'] = $node->field_intended_audience->value;
      }
      if (isset($node->field_parent) && $orgParentNodeId = $node->field_parent->target_id) {
        $data_layer['org_parent_node_id'] = intval($orgParentNodeId);
      }
      $metatag_utils = \Drupal::service('mass_metatag.utilities');
      $parent_orgs = $metatag_utils->getAllOrgsFromNode($node, TRUE, TRUE);
      if ($parent_orgs) {
        $data_layer['entityField_org_parent'] = $parent_orgs;
      }
    }
  }

  if (isset($data_layer['entityField_organizations'])) {
    $utilities = \Drupal::service('mass_metatag.utilities');
    $ids = explode(', ', $data_layer['entityField_organizations']);
    $first_org = $ids[0];
    if ($node = Node::load($first_org)) {
      if ($node->hasField('field_billing_organization') && !$node->get('field_billing_organization')->isEmpty()) {
        $bill_org_term = $node->get('field_billing_organization')->entity;
        if ($bill_org_term instanceof Term) {
          if ($bill_org_term->hasField('field_billing_account_number') && !$bill_org_term->get('field_billing_account_number')->isEmpty()) {
            $data_layer['bill'] = $bill_org_term->field_billing_account_number->value;
          }
        }
      }
    }
    $organizations = [];
    foreach ($ids as $id) {
      if ($node = Node::load($id)) {
        $organizations[$id] = [
          'title' => $node->getTitle(),
          'uuid' => $node->uuid(),
          'slug' => str_replace("-", "", $utilities->slugify(trim($node->label()))),
        ];
      }
    }
    $data_layer['entityField_organizations'] = $organizations;
  }
}

/**
 * Slugifies a string by making it lowercase and separating words with hyphens.
 *
 * @param string $string
 *   The string to slugify.
 * @param bool $single
 *   If the string being slugified is a single item or multiple items.
 *
 * @return string
 *   A slugified version of the string.
 */
function _mass_metatag_slugify($string, $single = TRUE) {
  // Replace one or more consecutive whitespace characters with a hyphen.
  $without_whitespace = preg_replace('/[\s_]+/', '-', $string);

  if ($single) {
    // Lowercase and remove characters which aren't alphanumeric or hyphens.
    return preg_replace('/[^a-z\d\-]/', '', strtolower($without_whitespace));
  }
  else {
    // Allow commas as well as hyphens.
    return preg_replace('/[^a-z\d\-,]/', '', strtolower($without_whitespace));
  }
}

/**
 * Formats the address string for any address metatags.
 *
 * @param array $address
 *   Address data in the field.
 *
 * @return string
 *   Formatted string.
 */
function _mass_metatag_address_format(array $address) {

  try {
    // Compute the streetAddress value by combining line1 and line2.
    $address_string = $address['address_line1'];
    if (!empty($address['address_line2'])) {
      $address_string .= ' ' . $address['address_line2'];
    }

    $address_string .= ' ' .
      (!empty($address['locality']) ? $address['locality'] . ' ' : '') .
      (!empty($address['administrative_area']) ? $address['administrative_area'] . ' ' : '') .
      (!empty($address['postal_code']) ? $address['postal_code'] : '');
  }
  catch (\Exception $e) {
    $address_string = '';
  }

  return $address_string;
}

/**
 * Gets address data from event nodes.
 *
 * For Event nodes, pull information from 'Unique Address' field or address
 * from Contact Information.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node to test.
 *
 * @return array
 *   Address data or empty array.
 */
function _mass_metatag_addresses(NodeInterface $node) {

  $addresses = [];
  $field_ref = NULL;

  try {
    switch ($node->getAddressType()->getString()) {
      // Unique entered address in the address paragraph.
      case 'unique':
        $ref = $node->get('field_event_ref_unique_address')->entity;
        if ($ref) {
          $field_ref = $ref->get('field_address_address');
        }
        break;

      // Address is a Contact Info entity, which has an address paragraph.
      case 'contact info':
        // Get contact info reference.
        $contact_ref = $node->get('field_event_ref_contact')->entity;
        if ($contact_ref) {
          $address_ref = $contact_ref->get('field_ref_address')->entity;
          if ($address_ref) {
            $field_ref = $address_ref->get('field_address_address');
          }
        }
        break;

      // No address is present so we do nothing.
      default:

    }
    if ($field_ref) {
      $addresses = $field_ref->getValue();
    }
  }
  catch (\Exception $exception) {
    // No action needed.
  }
  return $addresses;

}

/**
 * Implements hook_form_alter().
 */
function mass_metatag_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // List of nodes with the metatag field.
  $metatags_labels = [
    'advisory' => 'field_advisory_metatags',
    'page' => 'field_metatags',
    'binder' => 'field_binder_metatags',
    'campaign_landing' => 'field_campaign_landing_metatags',
    'curated_list' => 'field_curatedlist_metatags',
    'decision' => 'field_decision_metatags',
    'decision_tree' => 'field_decision_tree_metatags',
    'event' => 'field_event_metatags',
    'executive_order' => 'field_executive_order_metatags',
    'form_page' => 'field_metatags',
    'guide_page' => 'field_guide_page_metatags',
    'how_to_page' => 'field_how_to_metatags',
    'info_details' => 'field_infodetails_metatags',
    'location' => 'field_location_metatags',
    'location_details' => 'field_location_details_metatags',
    'news' => 'field_news_metatags',
    'org_page' => 'field_metatags',
    'regulation' => 'field_regulation_metatags',
    'action' => 'field_metatags',
    'rules' => 'field_rules_metatags',
    'service_page' => 'field_service_metatags',
    'service_details' => 'field_service_detail_metatags',
    'topic_page' => 'field_topic_metatags',
  ];

  // Hide the following metatags from the advanced section.
  $subsection_advanced = [
    'geo_placename',
    'geo_position',
    'geo_region',
    'icbm',
    'canonical_url',
    'content_language',
    'shortlink',
    'news_keywords',
    'standout',
    'generator',
    'image_src',
    'original_source',
    'google',
    'referrer',
    'rights',
    'set_cookie',
  ];

  // Find the node that the metatag field is being used.
  $node = $form_state->getFormObject()->getEntity();
  $content_type = $node->getType();

  // Remove the sub-sections from the Metatags - Advanced group.
  if (isset($metatags_labels[$content_type])) {
    foreach ($subsection_advanced as $item) {
      $form[$metatags_labels[$content_type]]['widget'][0]['advanced'][$item]['#access'] = FALSE;
    }
  }

  // We've decided to hide the whole metatag section of the node form except Admins.
  if (isset($metatags_labels[$content_type])) {
    $form[$metatags_labels[$content_type]]['#access'] = Drupal::currentUser()->hasPermission('administer meta tags');
  }
}

/**
 * Implements hook_metatags_attachments_alter().
 */
function mass_metatag_metatags_attachments_alter(array &$metatag_attachments) {
  if (!empty($metatag_attachments['#attached']['html_head'])) {
    $metatags = $metatag_attachments['#attached']['html_head'];

    foreach ($metatags as $tag) {
      // Verify that we are in the news content type.
      if ($tag[1] == "schema_news_article_id") {
        $news = TRUE;
      }

      // Grab the value to replace the other fields with.
      if ($tag[1] == "mass_metatag_body_preview") {
        $value = $tag[0]['#attributes']['content'];
      }
    }

    // If this is a news node and we have a body preview field
    // now we can assign it to our other fields.
    if (isset($news) && isset($value)) {
      $x = 0;
      foreach ($metatags as $tag) {
        if ($tag[1] == "description" || $tag[1] == "twitter_cards_description") {
          $metatag_attachments['#attached']['html_head'][$x][0]['#attributes']['content'] = $value;
        }
        $x++;
      }
    }
  }
}

/**
 * Add a JSON-LD dataset when specified.
 *
 * @param array $attachments
 *   Attachments as per hook_page_attachments().
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function mass_metatag_dataset(array &$attachments) {
  $route_match = Drupal::routeMatch();
  /** @var Drupal\Node\NodeInterface $node */
  if ($route_match->getRouteName() == 'entity.node.canonical' && ($node = $route_match->getParameter('node')) && $node instanceof NodeInterface) {
    if (!$node->hasField('field_data_flag') || $node->get('field_data_flag')->isEmpty()) {
      // Skip inapplicable nodes.
      return;
    }
  }
  else {
    return;
  }

  $creators = [];
  $orgs = $node->get('field_organizations')->referencedEntities();
  foreach ($orgs as $org) {
    $creators[] = [
      '@type' => 'Organization',
      'url' => $org->toUrl()->setAbsolute()->toString(),
      'name' => $org->label(),
    ];
  }

  $description = '';
  if ($node->hasField('field_service_detail_lede')) {
    $description = $node->get('field_service_detail_lede')->getString();
  }
  elseif ($node->hasField('field_curatedlist_lede')) {
    $description = $node->get('field_curatedlist_lede')->getString();
  }
  elseif ($node->hasField('field_short_desc')) {
    $description = $node->get('field_short_desc')->getString();
  }
  elseif ($node->hasField('field_service_lede')) {
    $description = $node->get('field_service_lede')->getString();
  }

  $items = [
    '@context' => 'https://schema.org/',
    '@type' => 'Dataset',
    'name' => $node->label(),
    'description' => $description,
    'creator' => $creators,
    'spatialCoverage' => 'Massachusetts',
    'url' => $node->toUrl()->setAbsolute()->toString(),
  ];
  $jsonld = SchemaMetatagManager::encodeJsonld($items);
  $attachments['#attached']['html_head']['schema_dataset'] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => $jsonld,
      '#attributes' => ['type' => 'application/ld+json'],
    ],
    'mass_schema_dataset',
  ];
}
