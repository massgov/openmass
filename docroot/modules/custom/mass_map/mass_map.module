<?php

/**
 * @file
 * Contains mass_map.module.
 */

use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\mayflower\Helper;
use Drupal\Core\Site\Settings;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function mass_map_theme() {
  $theme['map_page'] = [
    'variables' => [
      'pageHeader' => [],
      'locationListing' => [],
    ],
    'template' => 'map-page',
  ];
  $theme['map_row'] = [
    'variables' => [
      'locationListing' => [],
    ],
    'template' => 'map-row',
  ];
  return $theme;
}

/**
 * Implements hook_page_attachments().
 */
function mass_map_page_attachments(&$page) {
  $match = Drupal::routeMatch();

  if ($match->getRouteName() === 'view.locations.page') {
    $param_node = $match->getParameter('node');
    $node = is_string($param_node) && intval($param_node) ? Node::load($param_node) : $param_node;
    $label = $node && is_a($node, 'Drupal\node\Entity\Node') ? $node->label() : '';
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'mg_title',
          'content' => $label . ' Locations',
        ],
      ],
      'mg_title',
    ];

    // Pass the absolute URL of the current page as mg_url.
    $url = Url::fromRouteMatch($match)
      ->setAbsolute(TRUE);
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'mg_url',
          'content' => $url->toString(),
        ],
      ],
      'mg_url',
    ];
  }
}

/**
 * Implements hook_preprocess_map_page().
 */
function mass_map_preprocess_map_page(&$variables) {
  if (!isset($variables['node'])) {
    $allowed_regions = ['post_content'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mass_map_entity_extra_field_info() {
  $extra = [];

  $extra['node']['location']['display']['extra_contact_info_static_map'] = [
    'label' => t('Extra static map'),
    'description' => t('A copy of the contact information in the contact map view mode'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function mass_map_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $entityTypeManager = \Drupal::entityTypeManager();

  if ($display->getComponent('extra_contact_info_static_map') && !empty($entity->field_ref_contact_info_1->entity)) {
    $builder = $entityTypeManager->getViewBuilder('node');
    $item = $builder->view($entity->field_ref_contact_info_1->entity, 'map');
    $item['#field_name'] = 'extra_contact_info_static_map';
    $build['extra_contact_info_static_map'][] = $item;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_map_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->bundle() === 'contact_information' && !empty($variables['elements']['#view_mode']) && $variables['elements']['#view_mode'] === 'map') {
    $address = $node->field_ref_address->entity;
    $massMap = \Drupal::service('mass_map');
    $variables['static_map_link'] = $massMap->getMapLinkUrl($address->field_address_address);
    $variables['lat'] = $address->field_geofield->lat;
    $variables['lon'] = $address->field_geofield->lon;
    $street_address = Helper::formatAddress($address->field_address_address);
    $variables['street_address'] = $street_address;
    $variables['google_directions'] = 'https://www.google.com/maps/place/' . urlencode($street_address);
    $variables['display_title'] = $node->field_display_title->value;
    $phone = $node->field_ref_phone_number->entity;
    $fax = $node->field_ref_fax_number->entity;
    $links = $node->field_ref_links->entity;
    $contacts = [
      'phone' => $phone && $phone->field_phone ? $phone->field_phone->value : NULL,
      'fax' => $fax && $fax->field_fax ? $fax->field_fax->value : NULL,
      'email' => $links && $links->field_email ? $links->field_email->value : NULL,
    ];
    $variables += $contacts;
  }
}

/**
 * Implements hook_library_info_alter().
 *
 * Build the Google Maps javascript API URL based on a secret API key.
 */
function mass_map_library_info_alter(&$libraries, $extension) {
  if ($extension === 'mass_map' && isset($libraries['google-map-api'])) {
    $url = \Drupal::service('mass_map')
      ->getJavascriptApiUrl(['geometry', 'places', 'geocoder'], 'initGoogleMaps');
    $libraries['google-map-api']['js'][$url] = [
      'scope' => 'header',
      'type' => 'external',
      'attributes' => [
        'defer' => TRUE,
        'async' => TRUE,
      ]
    ];
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * Pass the related locations id to the new view.
 */
function mass_map_views_query_alter(ViewExecutable $view, $query) {
  if ($view->id() == 'locations') {
    $nids = [];
    if ($nid = $view->args[0]) {
      $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $nodeStorage->load($nid);
      if ($node) {
        // Gather location nodes.
        $location_nodes = [];

        // Get Location nodes from Service and Location nodes.
        $fields = ['field_related_locations'];
        foreach ($fields as $field_name) {
          if (Helper::isFieldPopulated($node, $field_name)) {
            $location_nodes += Helper::getReferencedEntitiesFromField($node, $field_name);
          }
        }

        // Get Location nodes from Organization nodes.
        if (Helper::isFieldPopulated($node, 'field_organization_sections')) {
          $location_nodes += Helper::getReferencedEntitiesFromSectionField($node, [
            'field_organization_sections',
            'field_section_long_form_content',
            'field_org_ref_locations',
          ]);
        }

        // Get Location nodes from Service nodes.
        if (Helper::isFieldPopulated($node, 'field_service_sections')) {
          $location_nodes += Helper::getReferencedEntitiesFromSectionField($node, [
            'field_service_sections',
            'field_service_section_content',
            'field_org_ref_locations',
          ]);
        }

        // Populate NIDs for location map.
        if (!empty($location_nodes)) {
          foreach ($location_nodes as $location_node) {
            // Verify and only display locations that have addresses.
            $contact_info_node = $location_node->field_ref_contact_info_1->entity;
            if (!$contact_info_node->field_ref_address->isEmpty()) {
              $nids[] = $location_node->id();
            }
          }
        }
      }
    }

    $params = \Drupal::request()->query;
    $lng = $params->get('lng');
    $lat = $params->get('lat');

    if ($lng && $lat) {
      $geofield = &$query->fields['paragraphs_item_field_data_node__field_ref_address__paragrap'];
      $options = [
        'origin_latitude' => $lat,
        'origin_longitude' => $lng,
        'earth_radius' => 6371,
        'destination_latitude' => 'paragraphs_item_field_data_node__field_ref_address__paragraph__field_geofield.field_geofield_lat',
        'destination_longitude' => 'paragraphs_item_field_data_node__field_ref_address__paragraph__field_geofield.field_geofield_lon',
      ];
      $geofield['field'] = geofield_haversine($options);
    }
    else {
      unset($query->orderby[0]);
    }

    if (!empty($nids)) {
      $query->where[0]['conditions'][] = [
        'field' => 'node_field_data.nid',
        'value' => array_unique($nids),
        'operator' => 'in'
      ];
    }
    else {
      // Make it empty.
      $query->where[0]['conditions'][] = [
        'field' => 'node_field_data.nid',
        'value' => 0,
        'operator' => '='
      ];
    }
  }
}
