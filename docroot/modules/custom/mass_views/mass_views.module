<?php

/**
 * @file
 * Mass views module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_views_pre_view().
 */
function mass_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'content_reports' && $display_id == 'page_orgs') {
    $nids = [];
    // Get nids where field_organizations is empty.
    $query = \Drupal::entityQuery('node')
      ->notExists('field_organizations');
    $nids_empty = $query->execute();

    // Get nids where field_organizations status is unpublished.
    $query = \Drupal::entityQuery('node')
      ->exists('field_organizations')
      ->condition('field_organizations.%delta.entity:node.status', '0', '=');
    $nids_to_check = $query->execute();

    if (!empty($nids_to_check)) {

      // Uses above query to filter out results where one
      // of the organisations in published.
      $query = \Drupal::entityQuery('node')
        ->exists('field_organizations')
        ->condition('nid', array_values($nids_to_check), 'IN')
        ->condition('field_organizations.%delta.entity:node.status', '1', '=');
      $nids = $query->execute();
    }
    // Merge the arrays to pass to the contextual filter.
    $nids_unpublished = array_diff(array_values($nids_to_check), array_values($nids));
    $nids_empty = array_diff(array_values($nids_empty), $nids_unpublished);
    $args_to_pass = array_merge($nids_empty, $nids_unpublished);

    $args[0] = implode('+', $args_to_pass);

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_views_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  if (($view['view']->id() == 'data_listing_all') && ($view['view']->current_display == 'page_all')) {
    // Remove sub topics from the data topic filter.
    if (isset($form['topicid'])) {
      // Loop through the field options.
      foreach ($form['topicid']['#options'] as $key => $value) {
        // If the option starts with a hyphen, it's a sub topic except for the
        // All option.
        if (strpos($value, '-') === 0 and $key !== 'All') {
          // Remove the sub topic from the field options.
          unset($form['topicid']['#options'][$key]);
        }
      }
    }
  }

  // Add the correct collection to the breadcrumb path for Collection Topic
  // pages. The provided token will use the term ID instead of the term name
  // with hyphens, thus providing a broken breadcrumb link.
  if (($view['view']->id() == 'collection_topic') && ($view['view']->current_display == 'page_topic')) {
    // If the breadcrumb is available, update it.
    if (isset($view['view']->header['area'])) {
      // Get the views page arguments.
      $args = $view['view']->args;
      // Replace the placeholder token with the correct argument.
      $breadcrumb_markup = str_replace(
        '{{ raw_arguments.tid }}',
        $args[0],
        $view['view']->header['area']->options['content']['value']
      );
      // Update the value in the view.
      $view['view']->header['area']->options['content']['value'] = $breadcrumb_markup;
    }
  }
}
