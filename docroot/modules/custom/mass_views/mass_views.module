<?php

/**
 * @file
 * Mass views module file.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 */
function mass_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'content_reports' && $display_id == 'page_orgs') {
    $nids = [];
    // Get nids where field_organizations is empty.
    $query = \Drupal::entityQuery('node')
      ->notExists('field_organizations');
    $nids_empty = $query->execute();

    // Get nids where field_organizations status is unpublished.
    $query = \Drupal::entityQuery('node')
      ->exists('field_organizations')
      ->condition('field_organizations.%delta.entity:node.status', '0', '=');
    $nids_to_check = $query->execute();

    if (!empty($nids_to_check)) {

      // Uses above query to filter out results where one
      // of the organisations in published.
      $query = \Drupal::entityQuery('node')
        ->exists('field_organizations')
        ->condition('nid', array_values($nids_to_check), 'IN')
        ->condition('field_organizations.%delta.entity:node.status', '1', '=');
      $nids = $query->execute();
    }
    // Merge the arrays to pass to the contextual filter.
    $nids_unpublished = array_diff(array_values($nids_to_check), array_values($nids));
    $nids_empty = array_diff(array_values($nids_empty), $nids_unpublished);
    $args_to_pass = array_merge($nids_empty, $nids_unpublished);

    $args[0] = implode('+', $args_to_pass);

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_views_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  if ($view['view']->id() === "non_english_documents" && $view['view']->getDisplay()->display['id'] === "page_1") {
    if ($form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']) {
      $form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']['#type'] = 'radios';
      $options = [
        "" => t('Any'),
        "empty" => t('No'),
        "not empty" => t('Yes'),
      ];
      $form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']['#default_value'] = $form_state->getUserInput()['field_media_english_version_target_id_op'] ?? "";
      $form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']['#options'] = $options;
    }
  }

  if ($view['view']->id() == 'data_listing_all' && $view['view']->getDisplay()->getPluginId() == 'page') {
    // Remove sub topics from the data topic filter.
    if (isset($form['topicid'])) {
      // Loop through the field options.
      foreach ($form['topicid']['#options'] as $key => $value) {
        // If the option starts with a hyphen, it's a sub topic except for the
        // All option.
        if (strpos($value, '-') === 0 and $key !== 'All') {
          // Remove the sub topic from the field options.
          unset($form['topicid']['#options'][$key]);
        }
      }
    }
  }

  // Only affect collection views.
  $collection_view_ids = [
    'collection_all',
    'collection_topic',
  ];
  if (in_array($view['view']->id(), $collection_view_ids)
    && $view['view']->getDisplay()->getPluginId() == 'page') {
    // Get the args.
    $args = $view['view']->args;
    // We can assume the first argument is the collection because the view
    // validation has already and we know this is true for both collection
    // views. We have to convert it to a term.
    $collection_url_name = $args[0];
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'field_url_name' => $collection_url_name,
        'vid' => 'collections',
      ]);
    if (!empty($terms)) {
      foreach ($terms as $term) {
        // If the term has a Landing Page field value, let's use that for the
        // first breadcrumb link.
        if ($term->hasField('field_landing_page') && !$term->field_landing_page->isEmpty()) {
          // Retrieve the field value.
          $field_landing_page = $term->get('field_landing_page')->getValue();
          // Create a link from the field value
          // and convert it to a markup string.
          $landing_page_link = Link::fromTextAndUrl(
            $field_landing_page[0]['title'],
            Url::fromUri($field_landing_page[0]['uri'])
          )->toString();
          // Add the li tags.
          $landing_page_li = "<li>$landing_page_link</li>";
          // Set the default search and replace strings for the str_replace().
          $search_string = '<ol>';
          $replace_string = $search_string . $landing_page_li;
          // If there is no ordered list, change the search and replace strings.
          if (strpos($view['view']->header['area']->options['content']['value'], '<ol>') === FALSE) {
            $search_string = '</div>';
            $replace_string = '<ol>' . $landing_page_li . '</ol>' . $search_string;
          }
          // Add the Landing Page link to the breadcrumb markup string.
          $breadcrumb_markup = str_replace(
            $search_string,
            $replace_string,
            $view['view']->header['area']->options['content']['value']
          );
          // Update the value in the view.
          $view['view']->header['area']->options['content']['value'] = $breadcrumb_markup;
        }

        // Add the correct collection to the breadcrumb path for Collection
        // Topic pages. The provided token will use the term ID instead of the
        // term name with hyphens, thus providing a broken breadcrumb link.
        if ($view['view']->id() == 'collection_topic') {
          // If the breadcrumb is available, update it.
          if (isset($view['view']->header['area'])) {
            // Replace the placeholder token with the correct argument.
            $breadcrumb_markup = str_replace(
              '{{ collection.field_url_name }}',
              $args[0],
              $view['view']->header['area']->options['content']['value']
            );
            if ($term->hasField('field_all_collection_breadcrumb')
              && !$term->field_all_collection_breadcrumb->isEmpty()) {
              $field_all_collection_breadcrumb = $term
                ->get('field_all_collection_breadcrumb')
                ->getValue();
              $breadcrumb_markup = str_replace(
                '{{ collection.field_all_collection_breadcrumb }}',
                $field_all_collection_breadcrumb[0]['value'],
                $breadcrumb_markup
              );
            }
            else {
              $breadcrumb_markup = str_replace(
                '{{ collection.field_all_collection_breadcrumb }}',
                $term->label(),
                $breadcrumb_markup
              );
            }
            // Update the value in the view.
            $view['view']->header['area']->options['content']['value'] = $breadcrumb_markup;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function mass_views_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == "report_d2d_redirects" && $view->getDisplay()->display['id'] == 'page_1') {
    foreach ($query->where as $key_group_conditions => &$condition_group) {
      // Call helper function to recursively alter conditions.
      _redirect_recursively_alter_query_conditions($condition_group['conditions'], $query, $key_group_conditions);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function mass_views_entity_update($entity): void {
  mass_views_do_invalidate($entity);
}

/**
 * Implements hook_entity_insert().
 */
function mass_views_entity_insert($entity): void {
  mass_views_do_invalidate($entity);
}

/**
 * Purge any affected collections.
 */
function mass_views_do_invalidate($entity): void {
  if (method_exists($entity, 'getCollection') && $entity->getCollection() && !$entity->getCollection()->isEmpty()) {
    $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
    /** @var \Drupal\taxonomy\Entity\Term $referencedEntity */
    foreach ($entity->getCollection()->referencedEntities() as $referencedEntity) {
      $tags[] = 'taxonomy_term:' . $referencedEntity->id();
      $parents = $storage->loadAllParents($referencedEntity->id());
      foreach ($parents as $parent) {
        $tags[] = 'taxonomy_term:' . $parent->id();
      }
    }
    Cache::invalidateTags($tags);
  }
}
