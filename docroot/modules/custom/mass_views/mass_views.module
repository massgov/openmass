<?php

/**
 * @file
 * Mass views module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_views_pre_view().
 */
function mass_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'content_reports' && $display_id == 'page_orgs') {
    $nids = [];
    // Get nids where field_organizations is empty.
    $query = \Drupal::entityQuery('node')
      ->notExists('field_organizations');
    $nids_empty = $query->execute();

    // Get nids where field_organizations status is unpublished.
    $query = \Drupal::entityQuery('node')
      ->exists('field_organizations')
      ->condition('field_organizations.%delta.entity:node.status', '0', '=');
    $nids_to_check = $query->execute();

    if (!empty($nids_to_check)) {

      // Uses above query to filter out results where one
      // of the organisations in published.
      $query = \Drupal::entityQuery('node')
        ->exists('field_organizations')
        ->condition('nid', array_values($nids_to_check), 'IN')
        ->condition('field_organizations.%delta.entity:node.status', '1', '=');
      $nids = $query->execute();
    }
    // Merge the arrays to pass to the contextual filter.
    $nids_unpublished = array_diff(array_values($nids_to_check), array_values($nids));
    $nids_empty = array_diff(array_values($nids_empty), $nids_unpublished);
    $args_to_pass = array_merge($nids_empty, $nids_unpublished);

    $args[0] = implode('+', $args_to_pass);

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_views_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  if (($view['view']->id() == 'collections')
    && ($view['view']->current_display == 'collection_page')) {
    // Get the collection or topic from the view arguments.
    $args = $view['view']->args;
    $original_args_count = count($args);
    if ($original_args_count > 0) {
      // Get the last argument to alter the topic filter options.
      $last_arg = strtolower(array_pop($args));
      // Skip the last argument if it's all.
      if ($last_arg == 'all') {
        $last_arg = strtolower(array_pop($args));
      }
      // Get the args count again for conditions.
      $remaining_args_count = count($args);
      // Prepare the collection or topic names for term lookup.
      $collection = str_replace('-', ' ', $last_arg);
      $collection = $remaining_args_count == 0  ? $collection : '-' . $collection;
      if (isset($form['topicid'])) {
        // Store the field options for searching.
        $original_field_options = $form['topicid']['#options'];
        // Initialize a new array of collection options.
        $collection_field_options = [];
        // Find the option key that matches the collection argument.
        if ($collection_key = array_search($collection, array_map('strtolower', $original_field_options))) {
          // Loop through the original options until the topic argument key is
          // found.
          while (key($original_field_options) !== $collection_key) {
            next($original_field_options);
          }
          // Advance in the array to the next option, the first topic or sub
          // topic.
          next($original_field_options);
          // Set the needle and offset values based on assumed collection or
          // topic argument.
          $needle = $remaining_args_count == 0 ? '-' : '--';
          $offset = $remaining_args_count == 0 ? 1 : 2;
          // Loop through the topics and build a new options array.
          while (strpos(current($original_field_options), $needle) === 0) {
            // Remove the needle from the option value.
            $option = substr(current($original_field_options), $offset);
            // If there is no remaining hyphen at the beginning of the option
            // value, store the option in the new array.
            if (strpos($option, '-') !== 0) {
              $collection_field_options[key($original_field_options)] = $option;
            }
            next($original_field_options);
          }
          // Replace the field options with only the topics or sub topics
          // provided by the argument, if there are options. Otherwise,
          // remove the filter.
          if (!empty($collection_field_options)) {
            $form['topicid']['#options'] = $collection_field_options;
            // Alter the topic filter based on collection or topic argument.
            if ($remaining_args_count === 0) {
              // @todo: These changes don't seem to apply. Figure out where we
              // can alter these values based on arguments.
//              $form['topicid']['#type'] = 'radios';
//              $form['topicid']['#theme'] = 'bef_radios';
//              unset($form['topicid']['#multiple']);
//              $form['topicid']['#title'] = 'Filter by Topic';
            }
          }
          else {
            unset($form['topicid']);
          }
        }
        else {
          // If the topic argument is not found in the field options, or it's a
          // sub topic, return a 404 error.
          throw new NotFoundHttpException();
        }
      }
    }
  }
}
