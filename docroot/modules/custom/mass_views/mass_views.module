<?php

/**
 * @file
 * Mass views module file.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_views_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Apply select2 recursively.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    _mass_views_apply_select2_to_multiselects($form);
  }

  $view = $form_state->getStorage('view');

  if (($view['view']->id() == 'crawler_pages' && $view['view']->getDisplay()->display['id'] == 'page_1') || ($view['view']->id() == 'crawler_documents' && $view['view']->getDisplay()->display['id'] == 'media_page_list')) {
    $form['crawl-auth'] = [
      '#type' => 'textfield',
      '#title' => t('Crawl auth key'),
    ];
  }
  if ($view['view']->id() === "non_english_documents" && $view['view']->getDisplay()->display['id'] === "page_1") {
    if ($form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']) {
      $form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']['#type'] = 'radios';
      $options = [
        "" => t('Any'),
        "empty" => t('No'),
        "not empty" => t('Yes'),
      ];
      $form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']['#default_value'] = $form_state->getUserInput()['field_media_english_version_target_id_op'] ?? "";
      $form['field_media_english_version_target_id_wrapper']['field_media_english_version_target_id_op']['#options'] = $options;
    }
  }

  if ($view['view']->id() == 'press_releases' && $view['view']->getDisplay()->getPluginId() == 'page') {
    // Remove sub topics from the data topic filter.
    if (isset($form['topicid'])) {
      // Loop through the field options.
      foreach ($form['topicid']['#options'] as $key => $value) {
        // If the option starts with a hyphen, it's a sub topic except for the
        // All option.
        if (strpos($value, '-') === 0 and $key !== 'All') {
          // Remove the sub topic from the field options.
          unset($form['topicid']['#options'][$key]);
        }
      }
    }
  }

  // Only affect collection views.
  $collection_view_ids = [
    'collection_all',
    'collection_topic',
  ];
  if (in_array($view['view']->id(), $collection_view_ids)
    && $view['view']->getDisplay()->getPluginId() == 'page') {
    // Get the args.
    $args = $view['view']->args;
    // We can assume the first argument is the collection because the view
    // validation has already and we know this is true for both collection
    // views. We have to convert it to a term.
    $collection_url_name = $args[0];
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'field_url_name' => $collection_url_name,
        'vid' => 'collections',
      ]);
    if (!empty($terms)) {
      foreach ($terms as $term) {
        // If the term has a Landing Page field value, let's use that for the
        // first breadcrumb link.
        if ($term->hasField('field_landing_page') && !$term->field_landing_page->isEmpty()) {
          // Retrieve the field value.
          $field_landing_page = $term->get('field_landing_page')->getValue();
          // Create a link from the field value
          // and convert it to a markup string.
          $landing_page_link = Link::fromTextAndUrl(
            $field_landing_page[0]['title'],
            Url::fromUri($field_landing_page[0]['uri'])
          )->toString();
          // Add the li tags.
          $landing_page_li = "<li>$landing_page_link</li>";
          // Set the default search and replace strings for the str_replace().
          $search_string = '<ol>';
          $replace_string = $search_string . $landing_page_li;
          // If there is no ordered list, change the search and replace strings.
          if (strpos($view['view']->header['area']->options['content']['value'], '<ol>') === FALSE) {
            $search_string = '</div>';
            $replace_string = '<ol>' . $landing_page_li . '</ol>' . $search_string;
          }
          // Add the Landing Page link to the breadcrumb markup string.
          $breadcrumb_markup = str_replace(
            $search_string,
            $replace_string,
            $view['view']->header['area']->options['content']['value']
          );
          // Update the value in the view.
          $view['view']->header['area']->options['content']['value'] = $breadcrumb_markup;
        }

        // Add the correct collection to the breadcrumb path for Collection
        // Topic pages. The provided token will use the term ID instead of the
        // term name with hyphens, thus providing a broken breadcrumb link.
        if ($view['view']->id() == 'collection_topic') {
          // If the breadcrumb is available, update it.
          if (isset($view['view']->header['area'])) {
            // Replace the placeholder token with the correct argument.
            $breadcrumb_markup = str_replace(
              '{{ collection.field_url_name }}',
              $args[0],
              $view['view']->header['area']->options['content']['value']
            );
            if ($term->hasField('field_all_collection_breadcrumb')
              && !$term->field_all_collection_breadcrumb->isEmpty()) {
              $field_all_collection_breadcrumb = $term
                ->get('field_all_collection_breadcrumb')
                ->getValue();
              $breadcrumb_markup = str_replace(
                '{{ collection.field_all_collection_breadcrumb }}',
                $field_all_collection_breadcrumb[0]['value'],
                $breadcrumb_markup
              );
            }
            else {
              $breadcrumb_markup = str_replace(
                '{{ collection.field_all_collection_breadcrumb }}',
                $term->label(),
                $breadcrumb_markup
              );
            }
            // Update the value in the view.
            $view['view']->header['area']->options['content']['value'] = $breadcrumb_markup;
          }
        }
      }
    }
  }
}

/**
 * Recursively applies select2 to all multiselects in the form structure.
 */
function _mass_views_apply_select2_to_multiselects(array &$elements) {
  foreach ($elements as &$element) {
    if (is_array($element)) {
      // Check for a multiselect.
      if (
        isset($element['#type']) &&
        $element['#type'] === 'select' &&
        !empty($element['#multiple'])
      ) {
        // Change to Select2 element type.
        $element['#type'] = 'select2';

        // Add a placeholder.
        $element['#attributes']['placeholder'] = t('Start typing...');
      }

      // Recurse for nested children (like fieldsets).
      _mass_views_apply_select2_to_multiselects($element);
    }
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function mass_views_preprocess_views_view_field(&$variables) {
  // Get the View and field information.
  $view = $variables['view'];
  $field = $variables['field'];
  $row = $variables['row'];

  // Define configurations for different views and displays.
  $configurations = [
    'crawler_pages' => [
      'page_1' => [
        'field' => 'title',
        'route_parameter' => 'node',
        'route' => 'entity.node.canonical',
        'id_field' => 'node_field_data_node_field_revision_nid',
        'cache_tag' => 'node_list',
      ],
    ],
    'crawler_documents' => [
      'media_page_list' => [
        'field' => 'field_title',
        'route_parameter' => 'media',
        'route' => 'entity.media.canonical',
        'id_field' => 'mid',
        'cache_tag' => 'media_list',
      ],
    ],
  ];

  // Check if the current view and display are configured.
  if (isset($configurations[$view->id()][$view->current_display])) {
    $config = $configurations[$view->id()][$view->current_display];

    // Check if the field matches the configured field.
    if ($field->field == $config['field']) {
      // Add cache contexts for the 'crawl-auth' query parameter.
      $variables['#cache']['contexts'][] = 'url.query_args:crawl-auth';

      // Add additional cache tags to ensure invalidation when necessary.
      $variables['#cache']['tags'][] = $config['cache_tag'];

      // Get the custom filter value from the request.
      $auth_key = \Drupal::request()->query->get('crawl-auth');

      // Get the entity ID from the row data.
      $entity_id = $row->{$config['id_field']};

      // Construct the URL manually.
      $url = Url::fromRoute($config['route'], [$config['route_parameter'] => $entity_id], ['absolute' => TRUE]);
      if (!empty($auth_key)) {
        $url = $url->setOption('query', ['crawl-auth' => $auth_key]);
      }

      // Get the title (label) from the entity.
      $title = $row->_entity->label();

      // Use the Link class to generate the anchor tag.
      $link = Link::fromTextAndUrl($title, $url);

      // Render the link and update the output.
      $variables['output'] = $link->toString();
    }
  }
}

/**
 * Fetches all numeric media IDs from the redirect table.
 *
 * @return array
 *   An array of distinct numeric media IDs.
 */
function _mass_views_helper_get_numeric_media_ids_from_redirect_table() {
  // Get the database connection.
  $database = \Drupal::database();

  // Build the query to extract media IDs from the redirect_redirect__uri column.
  $query = $database->select('redirect', 'r')
    ->distinct();

  // Add the expression to extract media IDs.
  $query->addExpression(
    "REPLACE(REPLACE(SUBSTRING_INDEX(r.redirect_redirect__uri, '/', -1), '/download', ''), 'internal:/media/', '')",
    'media_id'
  );

  // Only process URIs that start with 'internal:/media/'.
  $query->condition('redirect_redirect__uri', 'internal:/media/%', 'LIKE');

  // Execute the query and fetch the results.
  $media_ids = $query->execute()->fetchCol();

  // Filter the result using PHP to only include numeric values.
  $numeric_media_ids = array_filter($media_ids, 'is_numeric');

  // Return the filtered array of numeric media IDs.
  return $numeric_media_ids;
}

/**
 * Implements hook_views_query_alter().
 */
function mass_views_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  if ($view->id() == 'report_orphaned_documents') {

    // Get the numeric media IDs that need to be excluded.
    $media_ids = _mass_views_helper_get_numeric_media_ids_from_redirect_table();

    if (!empty($media_ids)) {
      // Exclude media items that match any of the media IDs in the extracted list.
      $media_ids_list = implode(',', $media_ids);

      // Add a where expression to exclude media items that have a matching redirect.
      $query->addWhereExpression(0, "media_field_data.mid NOT IN ($media_ids_list)");
    }
  }

  if ($view->id() == 'report_orphaned_documents_redirects') {
    // Get the numeric media IDs that need to be excluded.
    $media_ids = _mass_views_helper_get_numeric_media_ids_from_redirect_table();

    if (!empty($media_ids)) {
      // Exclude media items that match any of the media IDs in the extracted list.
      $media_ids_list = implode(',', $media_ids);

      // Add a where expression to include ONLY media items that have a matching redirect.
      $query->addWhereExpression(0, "media_field_data.mid IN ($media_ids_list)");
    }
  }

  // DP-24989: alter the view to custom sort autocomplete results by bundle.
  if ($view->id() == "link_field_autocomplete" && $view->getDisplay()->display['id'] == 'entity_reference') {
    // Add a case statement to the sort criteria.
    $order_case = "CASE
                    WHEN node_field_data.type = 'org_page' THEN 1
                    WHEN node_field_data.type = 'topic_page' THEN 2
                    WHEN node_field_data.type = 'service_page' THEN 3
                    WHEN node_field_data.type = 'how_to_page' THEN 4
                    WHEN node_field_data.type = 'decision_tree' THEN 5
                    WHEN node_field_data.type = 'info_details' THEN 6
                    WHEN node_field_data.type = 'curated_list' THEN 7
                    WHEN node_field_data.type = 'binder' THEN 8
                    WHEN node_field_data.type = 'location_details' THEN 9
                    WHEN node_field_data.type = 'location' THEN 10
                    WHEN node_field_data.type = 'form_page' THEN 11
                    WHEN node_field_data.type = 'guide_page' THEN 12
                    WHEN node_field_data.type = 'campaign_landing' THEN 13
                    WHEN node_field_data.type = 'regulation' THEN 14
                    WHEN node_field_data.type = 'advisory' THEN 15
                    WHEN node_field_data.type = 'decision' THEN 16
                    WHEN node_field_data.type = 'executive_order' THEN 17
                    WHEN node_field_data.type = 'news' THEN 18
                    WHEN node_field_data.type = 'event' THEN 19
                    WHEN node_field_data.type = 'rules' THEN 20
                    WHEN node_field_data.type = 'contact_information' THEN 21
                    WHEN node_field_data.type = 'person' THEN 22
                    ELSE 23
                   END";

    $query->addOrderBy(NULL, $order_case, 'ASC', 'custom_sort');
  }

  if ($view->id() == "report_d2d_redirects" && $view->getDisplay()->display['id'] == 'page_1') {
    // See DP-23382 for more info.
    // The functions used below help to filter the view with the url alias
    // instead of id.
    // Note: THe functions are coming from the patch here
    // https://www.drupal.org/project/redirect/issues/2981544
    if (function_exists('redirect_is_query_alter_required_and_trim_source_path') && function_exists('redirect_add_left_join_to_path_alias_table') && function_exists('redirect_alter_where_clause')) {
      if (redirect_is_query_alter_required_and_trim_source_path($query)) {
        // Call helper function to recursively alter conditions.
        redirect_add_left_join_to_path_alias_table($query);
        redirect_alter_where_clause($query);
      }
    }
  }

  if ($view->id() == 'content_reports' && $view->getDisplay()->display['id'] == 'page_orgs') {
    $nids = [];
    $nids_to_check = [];
    $deleted_nids = [];
    // Get nids where field_organizations is empty.
    $sub_query = \Drupal::entityQuery('node')->accessCheck(FALSE)
      ->notExists('field_organizations');
    $nids_empty = $sub_query->execute();

    // Get nids where field_organizations status is unpublished.
    $sub_query = \Drupal::entityQuery('node')->accessCheck(FALSE)
      ->exists('field_organizations')
      ->condition('field_organizations.%delta.entity:node.status', '0', '=');
    $nids_to_check = $sub_query->execute();

    // Get the nodes which has the value for the field,
    // but the actual entity is deleted..
    $sub_query = \Drupal::entityQuery('node')->accessCheck(FALSE)
      ->exists('field_organizations')
      ->condition('field_organizations.%delta.entity:node.nid', NULL, 'IS NULL');
    $deleted_nids = $sub_query->execute();
    $nids_to_check = array_merge($nids_to_check, $deleted_nids);

    if (!empty($nids_to_check)) {

      // Uses above query to filter out results where one
      // of the organisations in published.
      $sub_query = \Drupal::entityQuery('node')->accessCheck(FALSE)
        ->exists('field_organizations')
        ->condition('nid', array_values($nids_to_check), 'IN')
        ->condition('field_organizations.%delta.entity:node.status', '1', '=');
      $nids = $sub_query->execute();
    }

    // Merge the arrays to pass to the contextual filter.
    $nids_unpublished = array_diff(array_values($nids_to_check), array_values($nids));
    $nids_empty = array_diff(array_values($nids_empty), $nids_unpublished);
    $args_to_pass = array_merge($nids_empty, $nids_unpublished);
    $query->addWhere(0, 'node_field_data.nid', $args_to_pass, 'IN');
  }
}

/**
 * Implements hook_entity_update().
 */
function mass_views_entity_update($entity): void {
  mass_views_do_invalidate($entity);
}

/**
 * Implements hook_entity_insert().
 */
function mass_views_entity_insert($entity): void {
  mass_views_do_invalidate($entity);
}

/**
 * Purge any affected collections.
 */
function mass_views_do_invalidate($entity): void {
  if (method_exists($entity, 'getCollection') && $entity->getCollection() && !$entity->getCollection()->isEmpty()) {
    $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
    /** @var \Drupal\taxonomy\Entity\Term $referencedEntity */
    foreach ($entity->getCollection()->referencedEntities() as $referencedEntity) {
      $tags[] = 'taxonomy_term:' . $referencedEntity->id();
      $parents = $storage->loadAllParents($referencedEntity->id());
      foreach ($parents as $parent) {
        $tags[] = 'taxonomy_term:' . $parent->id();
      }
    }
    Cache::invalidateTags($tags);
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Unset the collections_all view field rendering if we are dealing with media entity.
 */
function mass_views_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'collection_all') {
    foreach ($view->result as $row) {
      // Check if the row entity is a media entity
      if ($row->_entity == NULL && $row->entity_type == 'media') {
        // If the $row is of type media we should unset the fields below, since the
        // views system will try load the entity and access the fields that media entity
        // doesn't have. This is a unique/complex view that is rendering 2 entities node/media
        // (initially overridden here docroot/modules/custom/mass_content/mass_content.module:924)
        foreach ($view->field as $field_id => $field) {
          switch ($field_id) {
            case 'title':
            case 'field_news_lede':
            case 'field_short_desc':
            case 'field_how_to_lede':
              unset($view->field[$field_id]);
              break;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_execute().
 *
 * This function checks if the 'locations' view has no results on the front-end.
 * If no results are found, it triggers a 404 "Page not found" error
 * by throwing a NotFoundHttpException.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view executable object.
 *
 * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
 *   Throws an exception to trigger a 404 response.
 */
function mass_views_views_post_execute(ViewExecutable $view) {
  if ($view->id() == 'locations' && empty($view->result)) {
    // Check if the current page is an admin page.
    if (\Drupal::service('router.admin_context')->isAdminRoute()) {
      // If we are on an admin page, do not trigger a 404.
      return;
    }
    throw new NotFoundHttpException();
  }
}
