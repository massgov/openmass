<?php

/**
 * @file
 * Contains mass_xss.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Implements hook_entity_load().
 *
 * Overwrite entity field values with nasty XSS test strings for all content
 * entities.  This helps us test for XSS vulnerabilities by visiting normal
 * node pages.  If we see an alert, there's a vulnerability, otherwise we're
 * good.
 *
 * We use hook_entity_load() rather than hook_entity_view() because there is
 * no guarantee that entities will be "properly" prepared for view.
 */
function mass_xss_entity_load(array $entities, $entity_type_id) {
  // As a kill switch to stop the madness, add a return here.
  foreach ($entities as $entity) {
    if ($entity instanceof ContentEntityInterface) {
      mass_xss_xssify_entity($entity);
    }
  }
}

/**
 * Return a string that will alert the viewer to a vulnerability.
 */
function mass_xss_str(ContentEntityInterface $entity, FieldDefinitionInterface $field) {
  // Change this string to switch the alerting mode.
  // Video is good because it can't be missed, but alerts give more data
  // about what field the vulnerability's in.
  switch ('behat') {
    case 'behat':
      // Not visible to users - this is useful for Behat testing.
      return sprintf('" /><xss>%s:%s:%s</xss>',
        $entity->getEntityTypeId(),
        $entity->bundle(),
        $field->getName()
      );

    case 'alert':
      // Fires an alert with the field name.
      return sprintf('" /><script>alert("%s:%s:%s")</script>',
        $entity->getEntityTypeId(),
        $entity->bundle(),
        $field->getName()
      );

    case 'video':
      // Embeds an autoplaying video.
      return '" /><script>document.write("<iframe src=\"https://www.youtube.com/embed/DLzxrzFCyOs?autoplay=1\" />")</script>';

  }
}

/**
 * Ensure that a field has at least one value.
 */
function mass_xss_ensure_item(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $field = $entity->get($definition->getName());
  if ($field->count() === 0) {
    $item = NULL;
    // Handle items that will fail drastically or fail to output anything
    // with an empty value.
    switch ($definition->getType()) {
      case 'file':
      case 'image':
        $item = ['target_id' => 56];
        break;
    }
    $field->appendItem($item);
  }

}

/**
 * Pump XSS test strings into every vulnerable field on an entity.
 *
 * When these fields are output, any XSS vulnerability will be exposed.
 */
function mass_xss_xssify_entity(ContentEntityInterface $entity) {

  $definitions = mass_xss_get_target_field_definitions($entity);

  foreach ($definitions as $definition) {
    switch ($definition->getType()) {
      // We're going to assume that the following data types cannot be stored
      // with malicious data.
      case 'boolean':
      case 'created':
      case 'uuid':
      case 'language':
      case 'integer':
      case 'changed':
      case 'timestamp':
      case 'datetime':
      case 'path':
      case 'metatag':
      case 'entity_reference':
      case 'entity_reference_revisions':
      case 'google_map_field':
      case 'daterange':
      case 'geofield':
      case 'map':
      case 'dynamic_entity_reference':
      case 'entity_reference_hierarchy':
        break;

      // These field types are vulnerable:
      case 'string':
      case 'password':
      case 'text':
      case 'string_long':
      case 'list_string':
      case 'text_long':
      case 'email':
      case 'telephone':
      case 'video_embed_field':
      case 'uri':
        mass_xss_ensure_item($entity, $definition);
        /** @var \Drupal\Core\Field\FieldItemInterface $item */
        foreach ($entity->get($definition->getName()) as $item) {
          $item->set('value', mass_xss_str($entity, $definition));
          // Set the format so we don't get false positives.
          if (in_array('format', array_keys($item->getProperties()))) {
            $item->set('format', 'basic_html');
          }
        }
        break;

      case 'text_with_summary':
        mass_xss_ensure_item($entity, $definition);
        foreach ($entity->get($definition->getName()) as $item) {
          $item->set('value', mass_xss_str($entity, $definition));
          $item->set('summary', mass_xss_str($entity, $definition));
          // Set the format so we don't get false positives.
          if (in_array('format', array_keys($item->getProperties()))) {
            $item->set('format', 'basic_html');
          }
        }
        break;

      case 'key_value':
        // ?? Not sure what to do with this field type.
        break;

      case 'file':
        mass_xss_ensure_item($entity, $definition);
        foreach ($entity->get($definition->getName()) as $item) {
          $item->set('description', mass_xss_str($entity, $definition));
        }
        break;

      case 'address':
        mass_xss_ensure_item($entity, $definition);
        foreach ($entity->get($definition->getName()) as $item) {
          $item->set('administrative_area', mass_xss_str($entity, $definition));
          $item->set('locality', mass_xss_str($entity, $definition));
          $item->set('dependent_locality', mass_xss_str($entity, $definition));
          $item->set('postal_code', mass_xss_str($entity, $definition));
          $item->set('sorting_code', mass_xss_str($entity, $definition));
          $item->set('address_line_1', mass_xss_str($entity, $definition));
          $item->set('address_line_2', mass_xss_str($entity, $definition));
          $item->set('organization', mass_xss_str($entity, $definition));
          $item->set('given_name', mass_xss_str($entity, $definition));
          $item->set('additional_name', mass_xss_str($entity, $definition));
          $item->set('family_name', mass_xss_str($entity, $definition));
        }
        break;

      case 'link':
        mass_xss_ensure_item($entity, $definition);
        foreach ($entity->get($definition->getName()) as $item) {
          $item->set('title', mass_xss_str($entity, $definition));
        }
        break;

      case 'image':
        mass_xss_ensure_item($entity, $definition);
        foreach ($entity->get($definition->getName()) as $item) {
          $item->set('title', mass_xss_str($entity, $definition));
          $item->set('alt', mass_xss_str($entity, $definition));
        }
        break;

      default:
        // Warn if we hit a field type we don't know about.
        Drupal::messenger()->addMessage(t('Unknown data type @type', [
          '@type' => $definition->getType(),
        ]));
    }
  }
}

/**
 * Retrieve an array of field definitions we want to process.
 *
 * This filters out a few fields that have "special" functionality.  ie: these
 * fields are string fields, but using XSS strings in them breaks things badly.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity.
 *
 * @return \Drupal\Core\Field\FieldDefinitionInterface[]
 *   The field definitions.
 */
function mass_xss_get_target_field_definitions(ContentEntityInterface $entity) {
  $definitions = $entity->getFieldDefinitions();
  $definitions = array_diff_key($definitions, [
    'rh_action' => '',
    'moderation_state' => '',
  ]);
  if ($entity->getEntityTypeId() == 'paragraph') {
    $definitions = array_diff_key($definitions, [
      'parent_id' => '',
      'parent_type' => '',
      'parent_field_name' => '',
    ]);
  }
  if ($entity->getEntityTypeId() === 'menu_link_content') {
    $definitions = array_diff_key($definitions, [
      'menu_name' => '',
    ]);
  }
  return $definitions;
}
