<?php

/**
 * @file
 * Contains mass_hierarchy.module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatch;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\mass_hierarchy\Form\HierarchyChildrenForm;
use Drupal\mass_hierarchy\MassHierarchyRouteMatch;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\Request;

/**
 * Implements hook_help().
 */
function mass_hierarchy_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    case 'view.change_parents.page_1':
      $output .= '<p><strong>' . t('NOTE: Moving children in bulk is an experimental feature and is currently slow.') . '</strong>';
      $output .= t(' It may take one minute or more before you see an indication that your move starts. In testing, we have seen it take two minutes to change the parent on 25 children. We will evaluate this after release to production to assess performance and to see if we can speed the process.') . '</p>';
      break;

    default:
  }

  // Looking for entity.[bundle].entity_hierarchy_reorder.
  if (
    strpos($route_name, 'entity.') === 0 &&
    strpos(strrev($route_name), strrev('.entity_hierarchy_reorder')) === 0
  ) {
    $sentences = [
      '<b>NOTE:</b> This new feature is experimental. It shows children and descendents of the current page that are published. You can expand children that have children of their own, and you can drag pages to be children of a new parent. You can drag pages left and right to move them up or down in the hierarchy. Please save often because if you navigate away from this tab, any changes will be lost. Report any issues with ServiceNow.',
      'The order of the pages in the hierarchy doesn’t matter and isn’t changed if you move them just up or down - it is only the parent/child relationships that are saved.',
      'Moving a page to a new parent does NOT add a link on the parent to the child. If you need that, you will have to add it manually.',
    ];
    $output = '<p>' . implode('</p><p>', $sentences) . '</p>';
  }

  return $output;
}

/**
 * Builds what bundles are supported to parents of the available bundles.
 */
function mass_hierarchy_get_parent_bundle_info() {
  /** @var Drupal\Core\Entity\EntityTypeBundleInfo */
  $entity_type_bundle_info_service = \Drupal::service('entity_type.bundle.info');
  $bundles = $entity_type_bundle_info_service->getBundleInfo('node');

  /** @var \Drupal\Core\Entity\EntityFieldManager */
  $entity_field_manager_service = \Drupal::getContainer()->get('entity_field.manager');

  foreach ($bundles as $bundle_name => $bundle_info) {
    $field_definitions = $entity_field_manager_service->getFieldDefinitions('node', $bundle_name);
    if (!isset($field_definitions['field_primary_parent'])) {
      continue;
    }
    $info[$bundle_name] = $field_definitions['field_primary_parent']->getSetting('handler_settings')['target_bundles'];
  }
  return $info;
}

/**
 * Implements @see hook_entity_type_build().
 *
 * @see entity_hierarchy_entity_type_build
 */
function mass_hierarchy_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  foreach ($entity_types as $entity_type_id => $entity_type) {
    $entity_types[$entity_type_id]
      ->setFormClass('entity_hierarchy_reorder', HierarchyChildrenForm::class);
  }
}

/**
 * Implements hook_views_pre_view().
 */
function mass_hierarchy_views_pre_view($view) {
  /** @var \Drupal\views\Entity\View $view */
  if ($view->id() != 'change_parents') {
    return;
  }

  $filters = $view->display_handler->getOption('filters');

  if (!isset($filters['type_1'])) {
    return;
  }

  if (!\Drupal::currentUser()->hasPermission('mass_hierarchy - change topic page parent')) {
    return;
  }

  // Include topic pages on the view by unsetting a filter that removes them.
  unset($filters['type_1']);
  $view->display_handler->overrideOption('filters', $filters);
}

/**
 * Deletes revision that are not current on the nested set table.
 */
function mass_hierarchy_delete_other_revisions_from_nested_set_table(Node $node) {
  if ($node->isNew()) {
    return;
  }

  // Loading the node again to get the default revision.
  // For instance, if the node comes from a draft we
  // wont get the revision ID we need.
  $node = Node::load($node->id());
  $nid = $node->id();
  $vid = $node->getRevisionId();

  // Eliminates revisions that are not current on the nested set table.
  $query = Drupal::database()->delete('nested_set_field_primary_parent_node');
  $query->condition('id', $nid);
  $query->condition('revision_id', $vid, '<>');
  $query->execute();
}

/**
 * Implements hook_views_pre_render().
 */
function mass_hierarchy_views_post_render(ViewExecutable $view) {
  /** @var \Drupal\views\Entity\View $view */
  if ($view->id() != 'change_parents') {
    return;
  }

  if (\Drupal::currentUser()->hasPermission('mass_hierarchy - change parent on move children tab')) {
    return;
  }

  // Remove the checkboxes and the ability to submit.
  unset($view->field['views_bulk_operations_bulk_form']);
}

/**
 * Implements hook_form_alter().
 */
function mass_hierarchy_form_alter(&$form, FormState $form_state, $form_id) {
  // Attach an AJAX controlled breadcrumb preview to field_primary_parent.
  if (isset($form['field_primary_parent'])) {
    // Add a container for the breadcrumb preview.
    $form['field_primary_parent']['breadcrumb'] = [
      '#type' => 'container',
      '#weight' => 100,
      "#attributes" => ["class" => "form-item", "id" => "breadcrumb-preview-wrapper"],
    ];
    // Add the #ajax property to the field widget.
    $form['field_primary_parent']['widget'][0]['target_id']['target_id']['#ajax'] = [
      'callback' => '_mass_hierarchy_breadcrumb_ajax',
      'wrapper' => 'breadcrumb-preview-wrapper',
      'event' => 'autocompleteclose',
      'progress' => [
        'type' => 'throbber',
        'message' => t("Rendering breadcrumb preview..."),
      ],
    ];
    // If the field has a default value, render the breadcrumb preview.
    if (isset($form['field_primary_parent']['widget'][0]['target_id']['target_id']['#default_value'])) {
      $node_parent = $form['field_primary_parent']['widget'][0]['target_id']['target_id']['#default_value'];
      $requestStack = \Drupal::service('request_stack');
      $customRouteMatch = new MassHierarchyRouteMatch($requestStack);
      $customRouteMatch->setParameter('parent_node', $node_parent);
      $rendered_block = Drupal::service("entity_hierarchy.breadcrumb")->build($customRouteMatch)->toRenderable();
      $form['field_primary_parent']['breadcrumb']['block'] = $rendered_block;
    }
    // If the field has a new value, render the breadcrumb based on that value.
    if (!empty($form_state->getValue('field_primary_parent'))) {
      $parent_id = $form_state->getValue('field_primary_parent')[0]['target_id']['target_id'];
      if ($parent_id) {
        $node_loaded = Node::load($parent_id);
        $requestStack = \Drupal::service('request_stack');
        $customRouteMatch = new MassHierarchyRouteMatch($requestStack);
        $customRouteMatch->setParameter('parent_node', $node_loaded);
        $rendered_block = Drupal::service("entity_hierarchy.breadcrumb")->build($customRouteMatch)->toRenderable();
        $form['field_primary_parent']['breadcrumb']['block'] = $rendered_block;
      }
    }
  }
}

/**
 * Callback function for the primary parent field widget.
 *
 * @param array $form
 *   The form nested array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return mixed
 *   The breadcrumb block.
 */
function _mass_hierarchy_breadcrumb_ajax(array &$form, FormStateInterface $form_state) {
  // Create a new response.
  $response = new AjaxResponse();
  // Get the field value.
  $parent_id = $form_state->getValue('field_primary_parent')[0]['target_id']['target_id'];
  // Load the referenced node from the field value.
  if ($parent_id) {
    $node_loaded = Node::load($parent_id);
    $requestStack = \Drupal::service('request_stack');
    $customRouteMatch = new MassHierarchyRouteMatch($requestStack);
    $customRouteMatch->setParameter('parent_node', $node_loaded);
    // Create a render array replacement with the new breadcrumb preview block.
    $rendered_block['field_primary_parent']['breadcrumb'] = [
      '#type' => 'container',
      '#weight' => 100,
      "#attributes" => [
        "class" => "form-item",
        "id" => "breadcrumb-preview-wrapper",
      ],
      'block' => Drupal::service("entity_hierarchy.breadcrumb")
        ->build($customRouteMatch)
        ->toRenderable(),
    ];

    // Replace the existing breadcrumb preview element with the new one.
    $response->addCommand(new ReplaceCommand('#breadcrumb-preview-wrapper', $rendered_block));
  }
  return $response;
}

/**
 * Deletes all non-current revisions from the nested_set_field_primary_parent_node table.
 */
function mass_hierarchy_delete_all_non_current_revisions_from_nested_set_table() {
  $res = \Drupal::database()->query(
    'SELECT id, COUNT(*)
    FROM nested_set_field_primary_parent_node
    GROUP BY id
    HAVING COUNT(*) > 1')->fetchAll();

  foreach ($res as $value) {
    $nid = $value->id;
    $node = Node::load($nid);
    if (!$node) {
      continue;
    }
    mass_hierarchy_delete_other_revisions_from_nested_set_table($node);
  }
}

/**
 * Implements hook_cron().
 */
function mass_hierarchy_cron() {
  mass_hierarchy_delete_all_non_current_revisions_from_nested_set_table();
}
