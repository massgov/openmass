<?php

/**
 * @file
 * Primary module hooks for Mass Microsites module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity\Element\EntityAutocomplete;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface;
use Drupal\node\NodeInterface;
use Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookup;
use Drupal\entity_hierarchy_microsite\MenuRebuildProcessor;

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function mass_microsites_node_update(NodeInterface $node) {
  $original = $node->original;

  // Update microsite menu on short title change, if needed.
  if (
    $node->hasField('field_short_title') &&
    $node->get('field_short_title')->value !== $original->get('field_short_title')->value
  ) {
    /** @var ChildOfMicrositeLookup */
    $microsite_lookup = \Drupal::service('entity_hierarchy_microsite.microsite_lookup');

    if ($microsite_lookup->findMicrositesForNodeAndField($node, 'field_primary_parent')) {
      /** @var MenuRebuildProcessor */
      $menu_rebuild_processor = \Drupal::service('entity_hierarchy_microsite.menu_rebuild_processor');
      $menu_rebuild_processor->markRebuildNeeded();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mass_microsites_preprocess_menu(&$variables) {

  if (array_key_exists('menu_name', $variables) && $variables['menu_name'] == 'entity-hierarchy-microsite') {
    $params = \Drupal::routeMatch()->getParameters();

    if ($params->has('node')) {
      $node = $params->get('node');
      $microsite_lookup = \Drupal::service('entity_hierarchy_microsite.microsite_lookup');
      $microsites = $microsite_lookup->findMicrositesForNodeAndField($node, 'field_primary_parent');
      /**
       * @var MicrositeInterface
       */
      $microsite = reset($microsites);

      $home_node = $microsite->getHome();
      $home_title = $home_node->label();
      if ($short_title = $home_node->get('field_short_title')->value) {
        $home_title = $short_title;
      }

      $home_item = [
        "is_expanded" => FALSE,
        "is_collapsed" => FALSE,
        "in_active_trail" => FALSE,
        "title" => $home_title,
        "url" => $microsite->getHome()->toUrl(),
        "below" => [],
        "altClass" => TRUE,
      ];

      // Adds home item to items array, but we're not going to use this for now.
      array_unshift($variables['items'], $home_item);

      // Duplicate and translate menu structure for use with patternlab
      $variables['mainNav'] = [];

      foreach ($variables['items'] as $item) {
        $navitem = [
          "text" => $item['title'],
          "href" => $item['url'],
          "active" => $item['in_active_trail'],
          "altClass" => $item['altClass'] ?? FALSE,
        ];

        if ($item['below']) {
          $navitem['subNav'] = [];
          foreach ($item['below'] as $subitem) {
            $navitem['subNav'][] = [
              "text" => $subitem['title'],
              "href" => $subitem['url'],
            ];
          }
        }

        $variables['mainNav'][] = $navitem;
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function mass_microsites_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.mass_microsites':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Mass Microsites module provides functionality for managing Mass.gov microsites.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function mass_microsites_theme($existing, $type, $theme, $path) {
  return [
    'menu__entity_hierarchy_microsite' => [
      'template' => 'menu--entity-hierarchy-microsite',
      'base hook' => 'menu',
    ],
  ];
}

/**
 * Implements hook_entity_hierarchy_microsite_links_alter().
 *
 * @see entity_hierarchy_microsite.api.php
 */
function mass_microsites_entity_hierarchy_microsite_links_alter(array &$links) {
  foreach ($links as $key => $link) {
    if (
      empty($link['menu_name']) ||
      $link['menu_name'] !== 'entity-hierarchy-microsite'
    ) {
      continue;
    }
    if (
      empty($link['options']['entity']) ||
      (!$node = $link['options']['entity']) ||
      !$node instanceof \Drupal\node\NodeInterface ||
      !$node->hasField('field_short_title')
    ) {
      continue;
    }
    if ($short_title = $node->get('field_short_title')->value) {
      $links[$key]['title'] = $short_title;
    }
  }
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 *
 * Alters the entity_reference_hierarchy_autocomplete widget for the
 * field_primary_parent field in order to add some logic that will show the
 * weight field only when a value is set that is part of a microsite.
 */
function mass_microsites_field_widget_single_element_entity_reference_hierarchy_autocomplete_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $items = $context['items'];
  if (!$items instanceof FieldItemListInterface) {
    return;
  }
  $field_name = $items->getFieldDefinition()->getName();
  if ($field_name !== 'field_primary_parent') {
    return;
  }
  $element['#after_build'][] = '_mass_microsites_field_widget_single_element_entity_reference_hierarchy_autocomplete_form_alter_after_build';
  $element['#attributes']['id'] = 'mass-microsites-field-primary-parent-wrapper';
}

/**
 * #after_build callback for entity_reference_hierarchy_autocomplete widget for
 * the field_primary_parent field. Adds logic that will show the weight field
 * only when a value is set that is part of a microsite.
 *
 * @param array $element
 *   The form API render array for the widget.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return array|void
 *   Render array of the altered form element.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _mass_microsites_field_widget_single_element_entity_reference_hierarchy_autocomplete_form_alter_after_build(array $element, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  // Ignore non-node entities.
  if (!$entity instanceof NodeInterface) {
    return;
  }
  /** @var \Drupal\mass_microsites\ChildOfMicrositeLookup $microsite_lookup */
  $microsite_lookup = \Drupal::service('mass_microsites.microsite_lookup');
  if ($parent_id = $form_state->getValue(['field_primary_parent', '0', 'target_id'])) {
    $parent_id = trim(reset($parent_id));
    if (!is_numeric($parent_id)) {
      $parent_id = trim(EntityAutocomplete::extractEntityIdFromAutocompleteInput($parent_id));
    }
    $parent_id = (int) $parent_id;
  }
  else {
    $parent_id = $entity->get('field_primary_parent')->target_id;
  }
  $element['weight']['#access'] = $parent_id && $microsite_lookup->hasMicrositeForChildNodeParentNid($entity, $parent_id, 'field_primary_parent');
  return $element;
}

/**
 * Implements hook_microsites_mass_hierarchy_breadcrumb_ajax_alter().
 */
function mass_microsites_mass_hierarchy_breadcrumb_ajax_alter(AjaxResponse $response, array &$form, FormStateInterface $form_state) {
  $response->addCommand(new ReplaceCommand('#mass-microsites-field-primary-parent-wrapper', $form['field_primary_parent']['widget'][0]));
}
