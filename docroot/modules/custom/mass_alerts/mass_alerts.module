<?php

/**
 * @file
 * Contains mass_alerts.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\mass_content_moderation\MassModeration;
use Drupal\node\Entity\Node;

const MASS_ALERTS_SCOPE_SITEWIDE = 'site_wide';
const MASS_ALERTS_SCOPE_PAGE = 'specific_target_pages';
const MASS_ALERTS_SCOPE_ORG = 'by_organization';
const MASS_ALERTS_TAG_GLOBAL = 'mass_alerts';
const MASS_ALERTS_TAG_PAGE = 'mass_alerts_page';
const MASS_ALERTS_TAG_ORG = 'mass_alerts_org';
const MASS_ALERTS_TAG_SITEWIDE = 'mass_alerts_sitewide';

/**
 * Get scope for an alert.
 *
 * @param Drupal\node\NodeInterface $node
 *   A node.
 *
 * @return mixed
 *   One of three options.
 */
function mass_alerts_get_scope(NodeInterface $node) {
  return $node->get("field_alert_display")->getString();
}

/**
 * Implements hook_form_FORM_ID_alter() for the FORM_ID() form.
 */
function mass_alerts_form_node_alert_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'mass_alerts_validate_alert_placement';
  $form['#validate'][] = 'mass_alerts_validate_alert_content';
}

/**
 * Implements hook_form_FORM_ID_alter() for the FORM_ID() form.
 */
function mass_alerts_form_node_alert_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'mass_alerts_validate_alert_placement';
  $form['#validate'][] = 'mass_alerts_validate_alert_content';
}

/**
 * Implements hook_form_FORM_ID_alter() for the FORM_ID() form.
 */
function mass_alerts_form_node_sitewide_alert_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'mass_alerts_validate_site_wide_alert_creation';
}

/**
 * Implements hook_form_FORM_ID_alter() for the FORM_ID() form.
 */
function mass_alerts_form_node_sitewide_alert_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'mass_alerts_validate_site_wide_alert_creation';
}

/**
 * Validate that a page specific alert has pages specified.
 *
 * @param array $form
 *   A form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form's state.
 */
function mass_alerts_validate_alert_placement(array &$form, FormStateInterface $form_state) {
  $field_alert_display = $form_state->getValue('field_alert_display');

  // Array of alert display field options and corresponding field name.
  $alert_displays = [
    'specific_target_pages' => 'field_target_page',
    'by_organization' => 'field_target_organization',
  ];

  foreach ($alert_displays as $selection => $field_name) {
    if ($field_alert_display[0]['value'] == $selection) {
      $target_nodes = $form_state->getValue($field_name);
      unset($target_nodes['add_more']);
      foreach ($target_nodes as $node) {
        if ($node['target_id']) {
          // Requirements are satisfied.
          return;
        }
      }
      // If no target_ids were found set error.
      if ($selection == 'specific_target_pages') {
        $form_state->setErrorByName('field_alert_display', t("An 'On specific pages' alert must show on at least one page. Instead of removing all Target pages, please unpublish the alert."));
      }
      else {
        $form_state->setErrorByName('field_alert_display', t("A 'By Organization' alert must show on at least one organization."));
      }
    }
  }
}

/**
 * Validate that an alert that has not hidden content has at least one paragraph.
 *
 * @param array $form
 *   A form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form's state.
 */
function mass_alerts_validate_alert_content(array &$form, FormStateInterface $form_state) {

  $field_alert_hide_message = $form_state->getValue(['field_alert_hide_message', 'value']);

  if (!$field_alert_hide_message) {
    $first = $form_state->getValue(['field_alert', '0']);

    if (!$first) {
      $form_state->setError($form, t('You must add an Alert message'));
    }
  }
}

/**
 * Validates site wide alert creation.
 */
function mass_alerts_validate_site_wide_alert_creation(array &$form, FormStateInterface $form_state) {

  // A maximum of only 1 site wide alert should be publishable at any given time.
  // Only prevent publishing, not drafting.
  $moderationState = $form_state->getValue(['moderation_state', '0', 'value']);
  if ($moderationState === 'published') {
    $entity = $form_state->getFormObject()->getEntity();
    $query = \Drupal::entityQuery('node')
      ->condition('status', NodeInterface::PUBLISHED)
      ->condition('type', 'sitewide_alert');
    // Exclude the current node from our search if it's already been saved.
    if ($entity->id()) {
      $query->condition('nid', $entity->id(), '!=');
    }
    $existing = $query->accessCheck(FALSE)->execute();
    if (count($existing) > 0) {
      if ($existingNode = Node::load(reset($existing))) {
        $link = $existingNode->toLink()->toString();
        $form_state->setError($form, t('This sitewide alert cannot be published because another sitewide alert is currently active: %link. Only one sitewide alert can be active at a time. To publish this alert, please unpublish the existing one first.', ['%link' => $link]));
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function mass_alerts_node_update(EntityInterface $node) {
  // Send notifications on local and Prod environments only.
  if ((!isset($_ENV['AH_SITE_ENVIRONMENT']) || $_ENV['AH_SITE_ENVIRONMENT'] == 'prod')) {
    mass_alerts_sitewide_alert_send_notifications($node);
  }
  mass_alerts_invalidate_tags($node);
}

/**
 * Implements hook_node_insert().
 */
function mass_alerts_node_insert(EntityInterface $node) {
  // Send notifications on local and Prod environments only.
  if ((!isset($_ENV['AH_SITE_ENVIRONMENT']) || $_ENV['AH_SITE_ENVIRONMENT'] == 'prod')) {
    mass_alerts_sitewide_alert_send_notifications($node);
  }
  mass_alerts_invalidate_tags($node);
}

/**
 * Implements hook_entity_operation_alter().
 */
function mass_alerts_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() === "node" && $entity->bundle() === "sitewide_alert") {
    if (!\Drupal::currentUser()->hasPermission('create sitewide_alert content')) {
      $operations = [];
    }
  }
}

/**
 * Implements hook_node_access().
 */
function mass_alerts_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  if ($operation === "update" && $node->bundle() === "sitewide_alert") {
    return AccessResult::forbiddenIf(!$account->hasPermission("create sitewide_alert content"));
  }
}

/**
 * Invalidate specific cache tags based on page or org alert being saved.
 *
 * @param \Drupal\node\NodeInterface $node
 *   A node.
 */
function mass_alerts_invalidate_tags(NodeInterface $node) {
  $tags = [];
  if ($node->bundle() === "sitewide_alert") {
    $tags = [MASS_ALERTS_TAG_SITEWIDE . ':list'];
    Cache::invalidateTags($tags);
  }
  if ($node->bundle() === "alert") {
    // We must clear based on new and old values for org, target pages, etc.
    // It is harmless to invalidate tags multiple times as they get uniqued later.
    $to_check[] = $node;
    if ((!empty($node->original))) {
      $to_check[] = $node->original;
    }
    foreach ($to_check as $node) {
      $scope = mass_alerts_get_scope($node);
      if ($scope == MASS_ALERTS_SCOPE_ORG) {
        $orgs = array_column($node->field_target_organization->getValue(), 'target_id');
        $tags = Cache::buildTags(MASS_ALERTS_TAG_ORG, $orgs);
      }
      elseif ($scope === MASS_ALERTS_SCOPE_PAGE) {
        if (!$node->get('field_target_page')->isEmpty()) {
          $pages = array_column($node->field_target_page->getValue(), 'target_id');
          $tags = Cache::buildTags(MASS_ALERTS_TAG_PAGE, $pages);
        }
      }
      Cache::invalidateTags($tags);
    }
  }
}

/**
 * Implements hook_mail().
 */
function mass_alerts_mail($key, &$message, $params) {
  $options = ['langcode' => $message['langcode']];
  switch ($key) {
    case 'mass_alerts_sitewide':
      $system_site_mail = \Drupal::config('system.site')->get('mail');
      // Ensures email headers match the From field.
      $message['from'] = $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Reply-to'] = $message['headers']['Return-Path'] = $system_site_mail;
      $message['subject'] = t('Sitewide alert on Mass.gov: @title', ['@title' => $params['subject']], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Send notifications to users who are watchers.
 *
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   The node object that is being updated or inserted.
 */
function mass_alerts_sitewide_alert_send_notifications(EntityInterface $node) {
  // Only send notifications after an alert has been published.
  if ($node->bundle() === "sitewide_alert" && !MassModeration::isPrepublish($node)) {
    // Only send notifications if the alert is site-wide.
    $langcode = $node->language()->getId();
    $email_addresses = \Drupal::state()->get('mass_alerts.alert_emails');
    if (!empty($email_addresses)) {
      $message_body = 'A sitewide alert was added or updated on Mass.gov (https://www.mass.gov):' . "\r\n\r\n" . $node->title->value . "\r\n\r\n";
      if ($node->hasField('field_sitewide_alert')) {
        $paragraph = $node->get('field_sitewide_alert')->referencedEntities();
        foreach ($paragraph as $p) {
          if ($p->hasField('field_sitewide_alert_message')) {
            $value[] = $p->get('field_sitewide_alert_message')->value;
          }
        }
        $message_body .= implode("\r\n", $value);
      }
      foreach ($email_addresses as $to_email) {
        \Drupal::service('plugin.manager.mail')->mail('mass_alerts',
          'mass_alerts_sitewide', $to_email, $langcode,
          ['message' => $message_body, 'subject' => $node->title->value]);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function mass_alerts_theme() {
  return [
    'mass_alerts_block' => [
      'variables' => [
        'path' => NULL,
        'type' => '',
        'wait' => TRUE,
      ],
    ],
    'mass_alerts_sitewide' => [
      'variables' => ['emergencyAlerts' => NULL],
    ],
    'mass_alerts_page' => [
      'variables' => ['headerAlerts' => NULL, 'headerTitle' => NULL],
    ],
  ];
}
