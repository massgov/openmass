<?php

namespace Drupal\mass_more_lists\Service;

use Drupal\Core\Pager\PagerManagerInterface;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\Core\StringTranslation\TranslationInterface;
use Drupal\mayflower\Helper;
use Drupal\mayflower\Prepare\Organisms;
use Drupal\node\Entity\Node;

/**
 * Class MassMoreListsListBuilder.
 */
class MassMoreListsListBuilder {

  use StringTranslationTrait;

  /**
   * Integer value used for pager limits.
   *
   * @var int
   */
  protected $pageLimit;

  /**
   * Integer value used for pager limits.
   *
   * @var \Drupal\Core\Pager\PagerManagerInterface
   */
  protected $pagerManager;

  /**
   * Constructs a new MassMoreListsListBuilder object.
   *
   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
   *   Translation service.
   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
   *   Pager Manager from the container.
   * @param int $page_limit
   *   Page limit for paged list results.
   */
  public function __construct(TranslationInterface $string_translation, PagerManagerInterface $pager_manager, $page_limit) {
    $this->stringTranslation = $string_translation;
    $this->pageLimit = $page_limit;
    $this->pagerManager = $pager_manager;
  }

  /**
   * Builds a list of additional resources for service_page nodes.
   *
   * @param \Drupal\node\Entity\Node $node
   *   Node object.
   *
   * @return
   *   Array of list data.
   */
  public function build(Node $node): array {
    // Creates Content Eyebrow and Page Header render arrays.
    $headers = $this->buildHeaders($node);
    $content_eyebrow = $headers['contentEyebrow'];
    $page_header = $headers['pageHeader'];

    // Gets all download links from node.
    $form_downloads = $this->buildFormDownloads($node);
    // Return nothing if download links are missing.
    if (empty($form_downloads['downloadLinks'])) {
      return [];
    }

    // Builds data for results header, paged results, and pager.
    $paged_results = $this->buildPagedResults($form_downloads);
    $results_heading = $paged_results['resultsHeading'];
    $form_downloads = $paged_results['formDownloads'];

    return [
      'contentEyebrow' => $content_eyebrow,
      'pageHeader' => $page_header,
      'resultsHeading' => $results_heading,
      'formDownloads' => $form_downloads,
    ];
  }

  /**
   * Helper method to build content eyebrow and page header data.
   *
   * @param \Drupal\node\Entity\Node $node
   *   Node object.
   *
   * @return array
   *   Array of content eyebrow and page header data.
   */
  protected function buildHeaders(Node $node) {
    // Creates Content Eyebrow render array.
    $link = $node->toLink();
    $content_eyebrow = [
      'headerTags' => [
        'label' => t('Related to:'),
        'taxonomyTerms' => [
          [
            'href' => $link->getUrl()->toString(),
            'text' => $link->getText(),
          ],
        ],
      ],
    ];

    // Creates Page Header render array.
    $link_render_array = $link->toRenderable();
    $link_render_array['#prefix'] = t('For') . ' ';
    $page_header = [
      'title' => $this->t('Additional Resources'),
      'subTitle' => $link_render_array,
    ];

    return [
      'contentEyebrow' => $content_eyebrow,
      'pageHeader' => $page_header,
    ];
  }

  /**
   * Builds list of downloads links from node.
   *
   * @param \Drupal\node\Entity\Node $node
   *   Node object.
   *
   * @return array
   *   Array of downloads links from node.
   */
  public function buildFormDownloads(Node $node) {
    $form_downloads = [];
    if ($node->bundle() == 'service_page') {
      $form_downloads = Organisms::prepareFormDownloads($node, ['maxItems' => NULL]);
    }
    elseif ($node->bundle() == 'service_details') {
      if ($node->hasField('field_service_detail_sections') && !empty($sections = $node->field_service_detail_sections->referencedEntities())) {
        foreach ($sections as $section) {
          $form_downloads = array_merge_recursive($form_downloads, Organisms::prepareFormDownloads($section, ['maxItems' => NULL]));
        }
        // Remove any duplicate download links.
        $form_downloads = Helper::removeArrayDuplicates($form_downloads);
      }
    }
    return $form_downloads;
  }

  /**
   * Helper method to build data for results header, paged results, and pager.
   *
   * @param array $form_downloads
   *   Array of download links generated by Organisms::prepareFormDownloads().
   *
   * @return array
   *   Array of data for results header, paged results, and pager.
   */
  protected function buildPagedResults(array $form_downloads) {
    // Gets total number for use in results header and pager.
    $num_download_links = count($form_downloads['downloadLinks']);

    // Creates pager, which also returns current page value.
    $page = $this->pagerManager->createPager($num_download_links, $this->pageLimit)->getCurrentPage();
    // Calculates pager offset.
    // @see https://api.drupal.org/api/drupal/core%21includes%21pager.inc/function/pager_default_initialize/8.5.x
    $offset = $this->pageLimit * $page;
    // Gets subset of download links for current page.
    $form_downloads['downloadLinks'] = array_slice($form_downloads['downloadLinks'], $offset, $this->pageLimit);

    // Calculates all other necessary pager values.
    // Gets total number of pages required.
    $pager_total = ceil($num_download_links / $this->pageLimit);
    // Adds 1 to current page, since pages are indexed from 0.
    $current_page = $page + 1;
    $is_last_page = ($current_page == $pager_total);
    // Calculates current item range.
    if ($is_last_page) {
      $last_page_count = $num_download_links % $this->pageLimit;
      $current_range_end = $num_download_links;
      $current_range_start = $current_range_end - $last_page_count + 1;
    }
    else {
      $current_range_end = $current_page * $this->pageLimit;
      $current_range_start = $current_range_end - $this->pageLimit + 1;
    }

    // Creates Results Heading render array.
    $results_heading = [
      'numResults' => $current_range_start . 'â€“' . $current_range_end,
      'totalResults' => $num_download_links,
    ];

    return [
      'resultsHeading' => $results_heading,
      'formDownloads' => $form_downloads,
    ];
  }

}
