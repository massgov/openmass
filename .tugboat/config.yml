services:
  # What to call the service hosting the site.
  php:
    # Use PHP 7.x with Apache; this syntax pulls in the latest version of PHP 7
    image: tugboatqa/php:7.4-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to  the preview URL to this service
    default: true

    # Turn off screenshots for all of the defined service URLs.
    # Visual Diffs depend on Screenshots being enabled. If Screenshots
    # are disabled for this Service, Visual Diffs are also disabled.
    # This overrides our defaults, and can also be overridden per-URL
    screenshot:
      enabled: false

    # Wait until the mysql service is done building
    depends: mysql

    # Conduct Lighthouse audits of the these URLs using the default options
    urls:
      - /
      - /media/1268726
      - /audit/qag-binderaudit
      - /qagcampaign-landing-with-image-key-message-header
      - /lists/qag-curatedlist
      - /order/qag-decisionorder
      - /event/qag-eventgeneralfuture-2018-07-25t122000-0400-2050-07-25t122000-0500
      - /forms/qag-formwithfileuploads
      - /guides/qag-guide
      - /how-to/qag-request-help-with-a-computer-problem
      - /info-details/qag-information-details1
      - /info-details/qag-info-detail-with-landing-page-features
      - /news/qag-newspressrelease
      - /orgs/qag-executive-office-of-technology-services-and-security
      - /orgs/qag-test-elected-org-page
      - /regulations/900-CMR-2-qag-regulation-title
      - /service-details/qag-servicedetails
      - /qag-service1
      - /qag-service-page-with-grouped-links
      - /topics/qag-topicpage1

# A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and imagemagick.
        - docker-php-ext-install opcache
        # Needed for image styles.
        - a2enmod headers rewrite
        - apache2ctl graceful

        - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        # https://linuxize.com/post/how-to-install-yarn-on-ubuntu-20-04/
        - echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
        - sudo apt update
        - sudo apt install yarn
        - echo "memory_limit = 512M" >> /usr/local/etc/php/conf.d/my-php.ini

        # Link the document root to the expected path.
        - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"

        # Prep secrets file
        # https://www.baeldung.com/linux/insert-new-line-script-output#using-printf
        - printf "<?php \n\n" >> "${DOCROOT}/sites/default/secrets.settings.php"
        - echo "${SECRETS_GLOBAL}" >> "${DOCROOT}/sites/default/secrets.settings.php"
        - echo "${SECRETS_GOOGLE_MAPS}" >> "${DOCROOT}/sites/default/secrets.settings.php"
        - echo "${SECRETS_MASS_FEEDBACK_LOOP}" >> "${DOCROOT}/sites/default/secrets.settings.php"

        # Create the Drupal private and public files directories.
        - mkdir -p "${DOCROOT}/sites/default/files/private"

        #Install Drush Launcher for a more comfortable terminal experience.
        - wget -O drush.phar https://github.com/drush-ops/drush-launcher/releases/latest/download/drush.phar
        - chmod +x drush.phar
        - sudo mv drush.phar /usr/local/bin/drush

      # Commands that import files, databases, or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        - composer install --optimize-autoloader --no-cache
        - yarn install
        - curl -f -o ${TUGBOAT_ROOT}/drush/sites/self.site.yml -L https://$GITHUB_MASSGOV_BOT_TOKEN@raw.githubusercontent.com/massgov/massgov-internal-docs/master/self.site.yml
        - wget -q --continue $(vendor/bin/drush ma:latest-backup-url prod) --output-document=/tmp/database.sql.gz
        - PATH=${TUGBOAT_ROOT}/vendor/bin:$PATH ${TUGBOAT_ROOT}/scripts/ma-import-backup /tmp/database.sql.gz
        - rm -f /tmp/database.sql.gz
        # Set release for env indicator module
        - drush sset environment_indicator.current_release ${TUGBOAT_GITHUB_HEAD}
        # Set file permissions such that Drupal will not complain.
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        # Hopefully more robust when these dirs are created from scratch.
        - rm -rf vendor docroot/modules/contrib docroot/libraries
        - composer install --no-interaction --optimize-autoloader --no-cache
        - yarn install
        - PATH=${TUGBOAT_ROOT}/vendor/bin:$PATH ${TUGBOAT_ROOT}/scripts/ma-refresh-local --skip-db-prep

  # This 'mysql' key acts as the hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mariadb:10.5

    # A set of commands to run while building this service
    commands:
      init:
        # Increase the allowed packet size to 512MB.
        - mysql -h localhost -e "SET GLOBAL max_allowed_packet=536870912;"
        # Ensure this packet size persists even if MySQL restarts.
        - echo "max_allowed_packet=536870912" >> /etc/mysql/conf.d/tugboat.cnf

