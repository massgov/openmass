version: 2.1
orbs:
  jira: circleci/jira@1.3.1

# YAML anchors/aliases. See;
# - https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
# - https://github.com/circleci/frontend/blob/master/.circleci/config.yml
references:
  # Dynamic hosts mean constantly checking interactively that we mean to connect to an unknown host. We ignore those here.
  no_host_check: &no_host_check
    run: {name: 'Disable StrictHostKeyChecking', command: 'mkdir -p $HOME/.ssh && echo "StrictHostKeyChecking no" > ~/.ssh/config'}

  no_ssh_timeout: &no_ssh_timeout
    run: {name: 'Disable SSH timeout', command: 'echo "ServerAliveInterval 30" >> ~/.ssh/config'}

  restore_composer_cache: &restore_composer_cache
    restore_cache:
      name: Restore Composer Cache
      keys:
        - site-composer-v10-{{ checksum "composer.lock" }}

  save_composer_cache: &save_composer_cache
    save_cache:
      name: Save Composer cache
      key: site-composer-v10-{{ checksum "composer.lock" }}
      paths: [ vendor, docroot/core, docroot/modules/contrib, docroot/themes/contrib ]

  branch_ignore: &branch_ignore
    ignore:
      - /^release\/.*$/
      - /^hotfix\/.*$/
      - /^mayflower\/.*$/
      - master
      - /^mayflower-dev-.*/

executors:
  base:
    parameters:
      instance:
        type: string
        default: massgov/mysql-sanitized:latest
    # https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202107-02
    environment:
      DOCKER_ENV: ci
      DDEV_NONINTERACTIVE: "true"
      DB_IMAGE: << parameters.instance >>

commands:
  ddev_install_run:
    steps:
      - run: curl -LO https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh && bash install_ddev.sh
      - run: echo $DOCKER_API_KEY | docker login -u $DOCKER_USER --password-stdin
      - run: ddev start -y
      - run: ddev describe
  git_configure_user:
    steps:
      - run: git config --global user.email "circleci@example.com"
      - run: git config --global user.name "CircleCI Deployment Bot"
  fetch_drush_aliases:
    parameters:
      destination:
        type: string
        default: "/tmp/code/drush/sites/self.site.yml"
    steps:
      - run: "curl -f -o << parameters.destination >> -L https://$GITHUB_MASSGOV_BOT_TOKEN@raw.githubusercontent.com/massgov/massgov-internal-docs/master/self.site.yml"

# See https://medium.com/labs42/monorepo-with-circleci-conditional-workflows-69e65d3f1bd0
parameters:
  webhook:
    type: boolean
    default: true
  post-trigger:
    type: boolean
    default: false

  # These params for currently used in drush ma:cf-deploy
  ma-cf-deploy:
    type: boolean
    default: false
  # These params for currently used in drush ma:backstop. target is declared later.
  ma-backstop:
    type: boolean
    default: false
  reference:
    type: string
    default: ""
  list:
    type: string
    default: "all"
  viewport:
    type: string
    default: "all"

  # These params for currently used in drush ma:release
  ma-release:
    type: boolean
    default: false
  refresh-db:
    type: string
    default: ""
  skip-maint:
    type: string
    default: ""
  # target also used by ma-cf-deploy, ma-backstop
  target:
    type: string
    default: ""
  git-ref:
    type: string
    default: ""
jobs:
  trigger_workflows:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Trigger workflows
          command: .circleci/circle_trigger.sh

  build:
    working_directory: ~/project/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - checkout
      - *restore_composer_cache
      - run: {name: 'Composer install', command: 'composer install --no-interaction --optimize-autoloader'}
      - *save_composer_cache
      # Same for yarn - https://circleci.com/docs/2.0/yarn/#caching
#      - restore_cache:
#          name: Restore Yarn Package Cache
#          keys:
#            - yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
#            - yarn-packages-{{ .Branch }}
#            - yarn-packages-master
#            - yarn-packages-
      - run:
          name: Install Dependencies
          command: yarn install
#      - save_cache:
#          name: Save Yarn Package Cache
#          key: yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
#          paths:
#            - node_modules/
      - persist_to_workspace:
          root: ..
          paths: [code]

  push_acquia:
    working_directory: ~/project/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - *no_host_check
      - *no_ssh_timeout
      - checkout
      - fetch_drush_aliases:
          destination: ./drush/sites/self.site.yml
      - run: git add -f ./drush/sites/self.site.yml
      - *restore_composer_cache
      - run: { name: 'Composer install', command: 'composer install --no-dev --no-interaction --optimize-autoloader' }
      # Identify the committer i.e. CircleCI deployment bot
      - git_configure_user
      # Prep for push to Acquia Git. Do so while we have a clean build.
      - run: ( find docroot -type d -name .git && find docroot -type f -name .gitmodules ) | xargs rm -rf
      - run: git add -A -f .
      - run: git commit -m "Add vendor code and drush alias."
      # Add a deployment identifier file and push current branch to Acquia's Git repo.
      - run: scripts/stamp-and-deploy

  # Run Danger to check for a changelog file in the PR.
  danger:
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - run:
          #Fail when there is no PR. This helps avoid false positives given by Danger when no PR exists.
          command: '[ -n "$CIRCLE_PULL_REQUEST" ] && DANGER_GITHUB_API_TOKEN=$GITHUB_MASSGOV_BOT_TOKEN yarn danger ci --failOnErrors'

  # Automate the tagging process in GitHub
  tagging_github:
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - *no_host_check
      # Identify the committer i.e. CircleCI deployment bot
      - git_configure_user
      - run: php scripts/tag-github.php

  # Automate the tagging process by using the GitHub then pushing to Acquia repository.
  tagging_acquia:
    docker:
      - image: cimg/php:7.4-node
    steps:
      - *no_host_check
      - checkout
      # Identify the committer i.e. CircleCI deployment bot
      - git_configure_user
      # Push this build to Acquia's master branch, and tag it there.
      - run: scripts/tag-release-deploy

  validate:
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      # Validate .json and check if it is in sync with the .lock file
      - run: composer validate
      # Make sure changelogs are parseable by PHP (since build-changelog.php requires that).
      - run: php scripts/directory-yaml-parse.php
      # Lint javascript
      - run: yarn run eslint --debug --ignore-path '.eslintignore' 'docroot/modules/custom/**/*.js' 'docroot/themes/custom/**/*.js' 'docroot/profiles/custom/**/*.js' 2>&1
      # Check coding standards with php code sniffer. See phpcs.xml
      - run: vendor/bin/phpcs -v -n -s

  test:
    working_directory: /tmp/code
    parameters:
      instance:
        type: string
        default: massgov/mysql-sanitized:latest
      command:
        type: enum
        enum: ['phpunit', 'behat']
    executor:
      name: base
      instance: << parameters.instance >>
    steps:
      - attach_workspace: {at: /tmp}
      - run:
          command: curl -L https://github.com/jwilder/dockerize/releases/download/v0.6.0/dockerize-linux-amd64-v0.6.0.tar.gz | tar -C . -xzv && chmod +x ./dockerize
          name: Install Dockerize
      - run: rm -f docker-compose.backstop.yml docker-compose.portainer.yml
      - ddev_install_run
      - run:
          name: Wait for mysql
          command: ddev exec ./dockerize -wait tcp://dbmass:3306 -timeout 5m
      # Run drush updatedb and cim.
      - run: ddev drush deploy -vvv
      # Get an overview
      - run: ddev drush status
      - run: cat /proc/cpuinfo
      - run: cat /proc/meminfo
      - run: ddev exec mkdir -p output docroot/sites/default/files docroot/sites/simpletest/browser_output
      # Run DTT or Behat test command
      - when:
          condition:
            and:
              - equal: [ behat, << parameters.command >> ]
          steps:
            - run: ddev exec vendor/bin/behat -v --profile=ci --strict --format=junit --out=/var/www/html/output/test-results --format=pretty --out=std
      - when:
          condition:
            and:
              - equal: [ phpunit, << parameters.command >> ]
          steps:
            - run: ddev exec vendor/bin/phpunit docroot/modules/custom --verbose --log-junit output/test-results/dtt/junit.xml
      - run:
          command: ddev logs
          when: always
      - store_test_results:
          path: output/test-results
      - store_test_results:
          path: output/default.xml
      - store_artifacts:
          # Pages saved via 'Then save the html for the page'. @see \FeatureContext::saveHtml.
          path: output
      - store_artifacts:
          # DTT saves page output for all requests.
          path: docroot/sites/simpletest/browser_output

  cloudflare:
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - run: "cd cloudflare && yarn install"
      - run: "cd cloudflare && npm test"

  # Cut the release branch for Wednesday release only
  cut_release_branch:
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - run: echo 'export PATH=/tmp/code/vendor/bin:$PATH' >> $BASH_ENV
      - *no_host_check
      - checkout
      # Identify the committer i.e. CircleCI deployment bot
      - git_configure_user
      # Create a release branch from the develop branch in GitHub.
      - run:
          command: "php scripts/build-changelog.php"

  # Create the mayflower branch for testing the develop branch.
  mayflower_develop_branch:
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - run: echo 'export PATH=/tmp/code/vendor/bin:$PATH' >> $BASH_ENV
      - *no_host_check
      - checkout
      # Identify the committer i.e. CircleCI deployment bot
      - git_configure_user
      # Create a release branch from the develop branch in GitHub.
      - run:
          command: "php scripts/ma-mayflower-develop.php"

  deploy:
    parameters:
      target:
        type: string
      gitRef:
        type: string
        default: $CIRCLE_BRANCH
      skip-maint:
        type: enum
        enum: ["", "--skip-maint"]
        default: ""
      refresh-db:
        type: enum
        enum: ["", "--refresh-db"]
        default: ""
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - *no_host_check
      - *no_ssh_timeout
      - fetch_drush_aliases
      - run:
          command: "vendor/bin/drush ma:deploy -v -y << parameters.skip-maint >> << parameters.refresh-db >> << parameters.target >> << parameters.gitRef >>"
          no_output_timeout: 60m
      - jira/notify:
          environment: << parameters.target >>
          environment_type: development
          job_type: deployment
          token_name: CIRCLE_PERSONAL_TOKEN

  crawl:
    parameters:
      samples:
        type: integer
      target:
        type: string
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - run: echo 'export PATH=/tmp/code/vendor/bin:/tmp/code/node_modules/.bin:$PATH' >> $BASH_ENV
      - *no_host_check
      - *no_ssh_timeout
      - fetch_drush_aliases
      - run: mkdir -p /tmp/results/junit
      - run:
          name: Nightcrawler
          command: nightcrawler --config=./.circleci/nightcrawler/nightcrawler.js crawl --concurrency 1 --json /tmp/results/results.json --junit /tmp/results/junit/crawler.xml --target=<< parameters.target >> --samples=<< parameters.samples >>
          no_output_timeout: 300m
      - store_test_results:
          path: /tmp/results
      - store_artifacts:
          path: /tmp/results

  backstop:
    parameters:
      reference:
        type: string
      target:
        type: string
      list:
        type: string
        default: all
      viewport:
        type: string
        default: all
    working_directory: /home/circleci/code
    docker:
      # Need to use docker image for these steps.
      - image: circleci/python:2.7.14
    steps:
      - checkout
      - setup_remote_docker
      - run: docker-compose up --no-start backstop
      - run: docker cp ./backstop/. "$(docker-compose ps -q backstop)":/src/
      - run: docker-compose run backstop reference --target=<< parameters.reference >> --list=<< parameters.list >> --viewport=<< parameters.viewport >>
      - run: docker-compose run backstop test --target=<< parameters.target >> --list=<< parameters.list >> --viewport=<< parameters.viewport >>
      - run:
          command: docker cp "$(docker-compose ps -q backstop)":/src/. ./backstop/
          when: always
      - store_test_results:
          path: /home/circleci/code/backstop/report
      - store_artifacts:
          path: /home/circleci/code/backstop

  # If you make changes to this job, consider pushing to a tag that's not 'latest'
  # at Docker Hub. That way, your in-progress work does not interfere with build
  # happening in the build_test workflow.
  populate:
    description: "Sanitize a mysql database and push to Docker Hub"
    parameters:
      sanitizeOption:
        type: string
        default: --sanitize
      instance:
        type: string
    working_directory: /home/circleci/code/.circleci/mysql-rebuild
    docker:
      # Use Python since that's needed for docker tools anyway.
      - image: circleci/python:2.7.14
    steps:
      - attach_workspace: {at: /home/circleci}
      - setup_remote_docker
      - fetch_drush_aliases:
          destination: /home/circleci/code/drush/sites/self.site.yml
      - run: docker-compose up -d
      - run: docker cp /home/circleci/code/. "$(docker-compose ps -q drupal)":/var/www
      # @todo Actually perform health check.
      - run:
          name: Wait for mysql
          command: sleep 60
      - run:
          command: docker-compose exec drupal scripts/ma-refresh-local --db-prep-only
          no_output_timeout: 60m
      - run: docker login -u $DOCKER_USER -p $DOCKER_API_KEY
      - run:
          command: docker-compose exec drupal scripts/ma-refresh-local << parameters.sanitizeOption >>
          no_output_timeout: 30m
      - run: docker-compose exec drupal drush cr
      - run: docker-compose stop --timeout 60 mysql
      - run: docker commit $(docker-compose ps -q mysql) << parameters.instance >>
      - run: docker push << parameters.instance >>

  pending_security:
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - attach_workspace: {at: /tmp}
      - ddev_install_run
      - run: "ddev drush pm:security"
      - run: "ddev drush pm:security-php"

  ma-cf-deploy:
    parameters:
      auto-approve:
        type: boolean
        default: false
    working_directory: /tmp/code
    docker:
      - image: cimg/php:7.4-node
    steps:
      - checkout
      - run: curl -L -f -o chamber https://github.com/segmentio/chamber/releases/download/v2.7.5/chamber-v2.7.5-linux-amd64
      - run: chmod +x ./chamber
      - run: |
          mkdir -p /tmp/terraform
          curl -f -L -o /tmp/terraform/terraform.zip https://releases.hashicorp.com/terraform/0.12.31/terraform_0.12.31_linux_amd64.zip
          unzip /tmp/terraform/terraform.zip -d /tmp/terraform/
          mv /tmp/terraform/terraform .
          chmod +x ./terraform
          rm -rf /tmp/terraform
      - run: echo 'export PATH=/tmp/code:$PATH' >> $BASH_ENV
      - when:
          condition: << parameters.auto-approve >>
          steps:
            run: ./scripts/cloudflare-deploy << pipeline.parameters.target >> --auto-approve
      - unless:
          # We expect to fail when this job runs *before* the hold. Keep it green by appending `|| true`.
          # See https://discuss.circleci.com/t/run-all-test-steps-even-if-one-fails/11229/12
          condition: << parameters.auto-approve >>
          steps:
            run: ./scripts/cloudflare-deploy << pipeline.parameters.target >> || true

workflows:
  version: 2
  build_validate:
    when: << pipeline.parameters.webhook >>
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /^release\/.*$/
                - /^hotfix\/.*$/
                - master
                - /^mayflower-dev-.*/
      - validate:
          requires: [build]
          filters:
            branches:
              <<: *branch_ignore
      - trigger_workflows:
          filters:
            branches:
              <<: *branch_ignore

  build_test:
    when: << pipeline.parameters.post-trigger >>
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /^release\/.*$/
                - /^hotfix\/.*$/
                - master
                - /^mayflower-dev-.*/
      - validate:
          requires: [build]
          filters:
            branches:
              <<: *branch_ignore
      - danger:
          requires: [build]
      - push_acquia:
          filters:
            branches:
              <<: *branch_ignore
      - test:
          name: test-phpunit
          command: phpunit
          requires: [build]
          filters:
            branches:
              <<: *branch_ignore
      - test:
          name: test-behat
          command: behat
          requires: [build]
          filters:
            branches:
              <<: *branch_ignore
      - cloudflare:
          requires: [build]
          filters:
            branches:
              <<: *branch_ignore

  # Automation for deploy to CD environment and create a branch with Mayflower and Mass develop branch by using mayflower_develop_branch.
  # This only happens on Thursday night 11 p.m. ETS to allow us to review Mayflower in Drupal on Mondays.
  mayflower_dev_branch:
    jobs:
      - build
      - mayflower_develop_branch:
          requires: [build]
    triggers:
      - schedule:
          cron: "00 04 * * 5"
          filters:
            branches:
              only:
                - develop

  # Automation for deploy to CD environment and create a branch with Mayflower and Mass develop branch by using mayflower_dev branch only.
  deploy_mayflower_cd:
    jobs:
      - build:
          filters:
            branches:
              only: /^mayflower-dev-.*/
      - push_acquia:
          filters:
            branches:
              only: /^mayflower-dev-.*/
      - test:
          name: test-phpunit
          command: phpunit
          requires: [build]
          filters:
            branches:
              only: /^mayflower-dev-.*/
      - test:
          name: test-behat
          command: behat
          requires: [build]
          filters:
            branches:
              only: /^mayflower-dev-.*/
      - deploy:
          name: deploy-cd-refresh-db
          requires:
            - build
            - push_acquia
          refresh-db: "--refresh-db"
          target: cd
          filters:
            branches:
              only: /^mayflower-dev-.*/
      - crawl:
          name: crawl-cd-900
          requires: [deploy-cd-refresh-db]
          samples: 900
          target: cd
          filters:
            branches:
              only: /^mayflower-dev-.*/
      - backstop:
          name: backstop-cd
          requires: [deploy-cd-refresh-db]
          target: cd
          reference: prod
          filters:
            branches:
              only: /^mayflower-dev-.*/

  # This is to automate the creation of the release branch.
  # The cron time needs to be updated every Fall/Spring for daylight saving time.
  release_branch:
    jobs:
      - build
      - cut_release_branch:
          requires: [build]
    triggers:
      - schedule:
          cron: "00 17 * * 2"
          filters:
            branches:
              only:
                - develop

  # This is to automate the release branch only.
  release:
    jobs:
      - build:
          filters:
            branches:
              only: /^release\/.*$/
      - push_acquia:
          filters:
            branches:
              only: /^release\/.*$/
      - test:
          name: test-phpunit
          command: phpunit
          requires: [build]
          filters:
            branches:
              only: /^release\/.*$/
      - test:
          name: test-behat
          command: behat
          requires: [build]
          filters:
            branches:
              only: /^release\/.*$/
      - hold:
          type: approval
          requires:
            - build
            - push_acquia
          filters:
            branches:
              only: /^release\/.*$/
      - deploy:
          name: deploy-test-refresh-db
          requires:
            - hold
          target: test
          refresh-db: "--refresh-db"
          filters:
            branches:
              only: /^release\/.*$/
      - crawl:
          name: crawl-test-700
          requires: [deploy-test-refresh-db]
          target: test
          samples: 700
          filters:
            branches:
              only: /^release\/.*$/
      - backstop:
          name: backstop-test
          requires: [deploy-test-refresh-db]
          target: test
          reference: prod
          filters:
            branches:
              only: /^release\/.*$/

  # This is to automate the hotfix branch only.
  hotfix:
    when: << pipeline.parameters.webhook >>
    jobs:
      - build:
          filters:
            branches:
              only: /^hotfix\/.*$/
      - push_acquia:
          filters:
            branches:
              only: /^hotfix\/.*$/
      - test:
          name: test-phpunit
          command: phpunit
          requires: [build]
          filters:
           branches:
             only: /^hotfix\/.*$/
      - test:
          name: test-behat
          command: behat
          requires: [build]
          filters:
            branches:
              only: /^hotfix\/.*$/
      - hold:
            type: approval
            requires:
              - build
              - push_acquia
            filters:
              branches:
                only: /^hotfix\/.*$/
      - deploy:
          name: deploy-test-no-refresh-db
          requires:
            - hold
          target: test
          filters:
            branches:
              only: /^hotfix\/.*$/
      - crawl:
            name: crawl-test-200
            requires: [deploy-test-no-refresh-db]
            target: test
            samples: 200
            filters:
              branches:
                only: /^hotfix\/.*$/
      - backstop:
            name: backstop-test
            requires: [deploy-test-no-refresh-db]
            target: test
            reference: prod
            filters:
              branches:
                only: /^hotfix\/.*$/

  # This is to automate the mayflower branch only.
  mayflower:
    when: << pipeline.parameters.webhook >>
    jobs:
      - build:
          filters:
            branches:
              only: /^mayflower\/.*$/
      - validate:
          requires: [build]
          filters:
            branches:
              only: /^mayflower\/.*$/
      - danger:
          requires: [build]
          filters:
            branches:
              only: /^mayflower\/.*$/
      - push_acquia:
          filters:
            branches:
              only: /^mayflower\/.*$/
      - test:
          name: test-phpunit
          command: phpunit
          requires: [build]
          filters:
            branches:
              only: /^mayflower\/.*$/
      - test:
          name: test-behat
          command: behat
          requires: [build]
          filters:
            branches:
              only: /^mayflower\/.*$/
      - hold:
          type: approval
          requires:
            - build
            - push_acquia
          filters:
            branches:
              only: /^mayflower\/.*$/
      - deploy:
          name: deploy-test-refresh-db
          requires:
            - hold
          target: test
          refresh-db: "--refresh-db"
          filters:
            branches:
              only: /^mayflower\/.*$/
      - crawl:
          name: crawl-test-500
          requires: [deploy-test-refresh-db]
          target: test
          samples: 500
          filters:
            branches:
              only: /^mayflower\/.*$/
      - backstop:
          name: backstop-test
          requires: [deploy-test-refresh-db]
          target: test
          reference: prod
          filters:
            branches:
              only: /^mayflower\/.*$/

  # This is to tag the release in the GitHub repository
  build_github_tag:
    when: << pipeline.parameters.webhook >>
    jobs:
      - build:
          filters:
            branches:
              only: master
      - push_acquia:
          filters:
            branches:
              only: master
      - test:
          name: test-phpunit
          command: phpunit
          requires: [build]
          filters:
            branches:
              only: master
      - test:
          name: test-behat
          command: behat
          requires: [build]
          filters:
            branches:
              only: master
      - cloudflare:
          requires: [build]
          filters:
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - build
            - push_acquia
          filters:
            branches:
              only: master
      - tagging_github:
          requires:
              - hold
          filters:
            branches:
              only: master

  # This is to tag the release in the Acquia repository.
  # This will deploy the newly created tag to stage environment and production environment with hold/approval for each job.
  build_tag:
    when: << pipeline.parameters.webhook >>
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - tagging_acquia:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - hold_for_stage:
          type: approval
          requires:
            - build
            - tagging_acquia
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - deploy:
          name: deploy-tag-stage-acquia
          requires:
            - build
            - tagging_acquia
            - hold_for_stage
          gitRef: tags/$CIRCLE_TAG
          target: test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - hold_for_prod_maint:
          type: approval
          requires:
            - build
            - tagging_acquia
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - deploy:
          name: deploy-tag-prod-acquia-maint
          requires:
            - build
            - tagging_acquia
            - hold_for_prod_maint
          target: prod
          gitRef: tags/$CIRCLE_TAG
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - hold_for_prod_no_maint:
          type: approval
          requires:
            - build
            - tagging_acquia
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - deploy:
          name: deploy-tag-prod-acquia-no-maint
          requires:
            - build
            - tagging_acquia
            - hold_for_prod_no_maint
          target: prod
          gitRef: tags/$CIRCLE_TAG
          skip-maint: --skip-maint
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - backstop:
          name: backstop-prod-maint
          requires: [deploy-tag-prod-acquia-maint]
          target: prod
          list: post-release
          viewport: desktop
          reference: test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - backstop:
          name: backstop-prod-no-maint
          requires: [deploy-tag-prod-acquia-no-maint]
          target: prod
          reference: test
          list: post-release
          viewport: desktop
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

  # Daily run of test suite using super sanitized DB
  build_test_super:
    jobs:
      - build
      - test:
          name: test-phpunit-super
          command: phpunit
          instance: massgov/mysql-sanitized:super
          requires: [build]
      - test:
          name: test-super-behat
          command: behat
          instance: massgov/mysql-sanitized:super
          requires: [build]
    triggers:
      - schedule:
          cron: "49 20 * * *"
          filters:
            branches:
              only:
                - develop

  # Daily rebuild of our sanitized and super-sanitized mysql data images.
  # The cron time needs to be updated every Fall/Spring for daylight saving time.
  mysql_rebuild:
    jobs:
      - build
      - populate:
          name: massgov.populate --sanitize
          requires: [build]
          sanitizeOption: --sanitize
          instance: massgov/mysql-sanitized:latest
      - populate:
          name: massgov.populate --super-sanitize
          requires: [build]
          sanitizeOption: --super-sanitize
          instance: massgov/mysql-sanitized:super
    triggers:
      - schedule:
          cron: "55 18 * * *"
          filters:
            branches:
              only:
                - develop
                - rollback-mysql-upgrade

  # Usually triggered by drush ma:backstop.
  backstop_ad_hoc:
    when: << pipeline.parameters.ma-backstop >>
    jobs:
      - build
      - backstop:
          requires: [build]
          target: << pipeline.parameters.target >>
          reference: << pipeline.parameters.reference >>
          list: << pipeline.parameters.list >>
          viewport: << pipeline.parameters.viewport >>

  # Usually triggered by drush ma:release.
  deploy_ad_hoc:
    when: << pipeline.parameters.ma-release >>
    jobs:
      - build
      - deploy:
          requires: [build]
          target: << pipeline.parameters.target >>
          gitRef: << pipeline.parameters.git-ref >>
          skip-maint: << pipeline.parameters.skip-maint >>
          refresh-db: << pipeline.parameters.refresh-db >>

  # Usually triggered by drush ma:cf-deploy.
  deploy_cloudflare:
    when: << pipeline.parameters.ma-cf-deploy >>
    jobs:
      - ma-cf-deploy:
          name: view-plan
      - hold:
          type: approval
          requires:
            - view-plan
      - ma-cf-deploy:
          name: apply-plan
          requires: [hold]
          auto-approve: true


# Daily deploy to the CD environment, runs at 11:00PM EST. Except for Thursday night the deploy_mayflower_cd uses the CD environment instead.
  deploy_cd:
    jobs:
      - build
      - deploy:
          name: deploy-cd-refresh-db
          requires: [build]
          target: cd
          refresh-db: "--refresh-db"
      - crawl:
          name: crawl-deploy-900
          requires: [deploy-cd-refresh-db]
          target: cd
          samples: 900
      - backstop:
          requires: [deploy-cd-refresh-db]
          target: cd
          reference: prod
    triggers:
      - schedule:
          cron: "00 04 * * 0,1,2,3,4,6"
          filters:
            branches:
              only:
                - develop

  # Nightly pm:security, runs at 2:00AM EST.
  nightly_pending_security:
    jobs:
      - build
      - pending_security:
          requires: [build]
    triggers:
      - schedule:
          cron: "05 07 * * *"
          filters:
              branches:
                  only:
                      - develop
