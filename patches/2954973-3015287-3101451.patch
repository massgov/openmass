diff --git a/README.txt b/README.txt
index a76dd0d..f394d9b 100644
--- a/README.txt
+++ b/README.txt
@@ -54,6 +54,22 @@ usage of entities on your site.
 Go to the URL /admin/config/entity-usage/batch-update in order to start the
 batch operation.
 
+Tracking via queue
+============
+The module support tracking entity usage via a queue. When the entity usage is
+tracked via a queue, the tracking information will be updated when cron runs.
+This means some references between entities could be missing. Only use this setting
+when you are sure there are no automatic processes using the tracking information
+to update or delete content.
+
+Since this is for advanced users only, this setting is not exposed in the UI.
+This can be enabled through the settings.php by adding the following line:
+
+$config['entity_usage.settings']['queue_tracking'] = TRUE;
+
+You also need to periodically run `drush clean_usage_table` to clean references
+to outdated revisions.
+
 Project page and Online handbook
 ================================
 
diff --git a/drush.services.yml b/drush.services.yml
index cbedcc2..024ff1f 100644
--- a/drush.services.yml
+++ b/drush.services.yml
@@ -4,3 +4,9 @@ services:
     arguments: ['@entity_usage.batch_manager', '@entity_usage.queue_batch_manager', '@entity_type.manager', '@config.factory']
     tags:
       - { name: drush.command }
+
+  entity_usage.clean_usage_table_command:
+    class: \Drupal\entity_usage\Commands\CleanUsageTableCommand
+    arguments: [ '@entity_usage.clean_usage_table' ]
+    tags:
+      - { name: drush.command }
diff --git a/entity_usage.module b/entity_usage.module
index 2dd3f72..3f358cf 100644
--- a/entity_usage.module
+++ b/entity_usage.module
@@ -31,35 +31,80 @@ function entity_usage_help($route_name, RouteMatchInterface $route_match) {
  * Implements hook_entity_insert().
  */
 function entity_usage_entity_insert(EntityInterface $entity) {
-  \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity);
+  if (\Drupal::configFactory()->get('entity_usage.settings')->get('queue_tracking')) {
+    \Drupal::queue('entity_usage_tracker')->createItem([
+      'operation' => 'insert',
+      'entity_type' => $entity->getEntityTypeId(),
+      'entity_id' => $entity->id(),
+    ]);
+  }
+  else {
+    \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity);
+  }
 }
 
 /**
  * Implements hook_entity_update().
  */
 function entity_usage_entity_update(EntityInterface $entity) {
-  \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnEdition($entity);
+  if (\Drupal::configFactory()->get('entity_usage.settings')->get('queue_tracking')) {
+    \Drupal::queue('entity_usage_tracker')->createItem([
+      'operation' => 'update',
+      'entity_type' => $entity->getEntityTypeId(),
+      'entity_id' => $entity->id(),
+    ]);
+  }
+  else {
+    \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnEdition($entity);
+  }
 }
 
 /**
  * Implements hook_entity_predelete().
  */
 function entity_usage_entity_predelete(EntityInterface $entity) {
-  \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnDeletion($entity);
+  if (\Drupal::configFactory()->get('entity_usage.settings')->get('queue_tracking')) {
+    \Drupal::queue('entity_usage_tracker')->createItem([
+      'operation' => 'predelete',
+      'entity_type' => $entity->getEntityTypeId(),
+      'entity_id' => $entity->id(),
+    ]);
+  }
+  else {
+    \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnDeletion($entity);
+  }
 }
 
 /**
  * Implements hook_entity_translation_delete().
  */
 function entity_usage_entity_translation_delete(EntityInterface $translation) {
-  \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnDeletion($translation, 'translation');
+  if (\Drupal::configFactory()->get('entity_usage.settings')->get('queue_tracking')) {
+    \Drupal::queue('entity_usage_tracker')->createItem([
+      'operation' => 'translation_delete',
+      'entity_type' => $translation->getEntityTypeId(),
+      'entity_id' => $translation->id(),
+    ]);
+  }
+  else {
+    \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnDeletion($translation, 'translation');
+  }
 }
 
 /**
  * Implements hook_entity_revision_delete().
  */
 function entity_usage_entity_revision_delete(EntityInterface $entity) {
-  \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnDeletion($entity, 'revision');
+  if (\Drupal::configFactory()->get('entity_usage.settings')->get('queue_tracking')) {
+    \Drupal::queue('entity_usage_tracker')->createItem([
+      'operation' => 'revision_delete',
+      'entity_type' => $entity->getEntityTypeId(),
+      'entity_id' => $entity->id(),
+    ]);
+  }
+  else {
+    \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnDeletion($entity, 'revision');
+  }
 }
 
 /**
diff --git a/entity_usage.services.yml b/entity_usage.services.yml
index f1fe59f..c47ed17 100644
--- a/entity_usage.services.yml
+++ b/entity_usage.services.yml
@@ -19,3 +19,6 @@ services:
     arguments: ['@entity_type.manager', '@config.factory']
     tags:
       - { name: event_subscriber }
+  entity_usage.clean_usage_table:
+    class: Drupal\entity_usage\CleanUsageTable
+    arguments: ['@entity_type.manager', '@database']
diff --git a/src/CleanUsageTable.php b/src/CleanUsageTable.php
new file mode 100644
index 0000000..2afb35f
--- /dev/null
+++ b/src/CleanUsageTable.php
@@ -0,0 +1,112 @@
+<?php
+
+namespace Drupal\entity_usage;
+
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Entity\RevisionableInterface;
+
+/**
+ * Cleans entity usage table from repeated records.
+ */
+class CleanUsageTable {
+
+  /**
+   * Database service.
+   *
+   * @var \Drupal\Core\Database\Connection
+   */
+  private $database;
+
+  /**
+   * Entity Type Manager Service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  private $entityTypeManager;
+
+  /**
+   * Returns a CleanUsageTable object with populated properties.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param \Drupal\Core\Database\Connection $database
+   *
+   * @return void
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database) {
+    $this->entityTypeManager = $entity_type_manager;
+    $this->database = $database;
+  }
+
+  /**
+   * Execute private methods for cleanining.
+   */
+  public function clean() {
+    $this->deleteRecordsWithNonCurrentRevisions();
+    $this->deleteRecordsPointingThemselves();
+  }
+
+  /**
+   * Delete references from other revisions.
+   */
+  private function deleteOtherRevisions($id, $vid, $suffix = '') {
+    $this->database->delete('entity_usage')
+      ->condition('source_id' . $suffix, $id)
+      ->condition('source_vid' . $suffix, $vid, '<>')
+      ->execute();
+  }
+
+  /**
+   * Deletes records where the target is the same as the source.
+   */
+  private function deleteRecordsPointingThemselves() {
+    $this->database->query("
+      DELETE FROM entity_usage
+      WHERE target_id = source_id
+    ")->execute();
+
+    $this->database->query("
+      DELETE FROM entity_usage
+      WHERE target_id_string = source_id_string
+    ")->execute();
+
+  }
+
+  /**
+   * Returns records with repeated entity IDs.
+   */
+  private function getRepeatedRecords($field) {
+    return $this->database->query("
+        SELECT
+          {$field}, source_type, COUNT({$field})
+        FROM entity_usage
+        GROUP BY {$field} HAVING COUNT({$field}) > 1
+    ")->fetchAll();
+  }
+
+  /**
+   * Deletes records with revisions that are not the current one.
+   */
+  private function deleteRecordsWithNonCurrentRevisions() {
+    $res = [];
+    $res[''] = $this->getRepeatedRecords('source_id');
+    $res['_string'] = $this->getRepeatedRecords('source_id_string');
+
+    foreach ($res as $key => $records) {
+
+      foreach ($records as $record) {
+        $source_type = $record->source_type;
+        $source_id = $record->source_id;
+        $storage = $this->entityTypeManager->getStorage($source_type);
+        /** @var \Drupal\Core\Entity\RevisionableInterface */
+        $entity = $storage->load($source_id);
+        if (!($entity instanceof RevisionableInterface)) {
+          continue;
+        }
+        $vid = $entity->getRevisionId();
+        $this->deleteOtherRevisions($source_id, $vid, $key);
+      }
+    }
+  }
+
+}
diff --git a/src/Commands/CleanUsageTableCommand.php b/src/Commands/CleanUsageTableCommand.php
new file mode 100644
index 0000000..cb1ab1e
--- /dev/null
+++ b/src/Commands/CleanUsageTableCommand.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace Drupal\entity_usage\Commands;
+
+use Drush\Commands\DrushCommands;
+
+/**
+ * Exposes the CleanUsageTable service to clean the usage table.
+ */
+class CleanUsageTableCommand extends DrushCommands {
+
+  private $cleanUsageTableService;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct($clean_usage_table) {
+    $this->cleanUsageTableService = $clean_usage_table;
+  }
+
+  /**
+   * Drush command that clean the usage table.
+   *
+   * @command clean_usage_table
+   */
+  public function clean() {
+    $this->cleanUsageTableService->clean();
+  }
+
+}
diff --git a/src/EntityUpdateManager.php b/src/EntityUpdateManager.php
index 2cc0e0d..4aa2ae6 100644
--- a/src/EntityUpdateManager.php
+++ b/src/EntityUpdateManager.php
@@ -16,7 +16,7 @@ class EntityUpdateManager {
   /**
    * The usage track service.
    *
-   * @var \Drupal\entity_usage\EntityUsage
+   * @var \Drupal\entity_usage\EntityUsageInterface
    */
   protected $usageService;
 
@@ -37,14 +37,14 @@ class EntityUpdateManager {
   /**
    * EntityUpdateManager constructor.
    *
-   * @param \Drupal\entity_usage\EntityUsage $usage_service
+   * @param \Drupal\entity_usage\EntityUsageInterface $usage_service
    *   The usage tracking service.
    * @param \Drupal\entity_usage\EntityUsageTrackManager $track_manager
    *   The PluginManager track service.
    * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
    *   The config factory.
    */
-  public function __construct(EntityUsage $usage_service, EntityUsageTrackManager $track_manager, ConfigFactoryInterface $config_factory) {
+  public function __construct(EntityUsageInterface $usage_service, EntityUsageTrackManager $track_manager, ConfigFactoryInterface $config_factory) {
     $this->usageService = $usage_service;
     $this->trackManager = $track_manager;
     $this->config = $config_factory->get('entity_usage.settings');
diff --git a/src/EntityUsageTrackBase.php b/src/EntityUsageTrackBase.php
index 34db9ad..b73659e 100644
--- a/src/EntityUsageTrackBase.php
+++ b/src/EntityUsageTrackBase.php
@@ -2,14 +2,19 @@
 
 namespace Drupal\entity_usage;
 
+use Drupal\Core\Url;
 use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\Core\Path\PathValidatorInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
+use Drupal\Core\StreamWrapper\PublicStream;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -20,7 +25,7 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
   /**
    * The usage tracking service.
    *
-   * @var \Drupal\entity_usage\EntityUsage
+   * @var \Drupal\entity_usage\EntityUsageInterface
    */
   protected $usageService;
 
@@ -45,6 +50,13 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
    */
   protected $config;
 
+  /**
+   * The Database service.
+   *
+   * @var \Drupal\Core\Database\Connection
+   */
+  protected $database;
+
   /**
    * The EntityRepository service.
    *
@@ -52,6 +64,20 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
    */
   protected $entityRepository;
 
+  /**
+   * The Drupal Path Validator service.
+   *
+   * @var \Drupal\Core\Path\PathValidatorInterface
+   */
+  protected $pathValidator;
+
+  /**
+   * The public file directory.
+   *
+   * @var string
+   */
+  protected $publicFileDirectory;
+
   /**
    * Plugin constructor.
    *
@@ -61,7 +87,7 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\entity_usage\EntityUsage $usage_service
+   * @param \Drupal\entity_usage\EntityUsageInterface $usage_service
    *   The usage tracking service.
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
@@ -71,8 +97,14 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
    *   The factory for configuration objects.
    * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
    *   The EntityRepositoryInterface service.
+   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   *   The Drupal Path Validator service.
+   * @param \Drupal\Core\StreamWrapper\PublicStream $public_stream
+   *   The Public Stream service.
+   * @param \Drupal\Core\Database\Connection $database_service
+   *   The Drupal Database service.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityUsage $usage_service, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityRepositoryInterface $entity_repository) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityUsageInterface $usage_service, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityRepositoryInterface $entity_repository, PathValidatorInterface $path_validator, PublicStream $public_stream, Connection $database_service) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->configuration += $this->defaultConfiguration();
     $this->usageService = $usage_service;
@@ -80,6 +112,9 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
     $this->entityFieldManager = $entity_field_manager;
     $this->config = $config_factory->get('entity_usage.settings');
     $this->entityRepository = $entity_repository;
+    $this->pathValidator = $path_validator;
+    $this->publicFileDirectory = $public_stream->getDirectoryPath();
+    $this->database = $database_service;
   }
 
   /**
@@ -94,7 +129,10 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
       $container->get('entity_type.manager'),
       $container->get('entity_field.manager'),
       $container->get('config.factory'),
-      $container->get('entity.repository')
+      $container->get('entity.repository'),
+      $container->get('path.validator'),
+      $container->get('stream_wrapper.public'),
+      $container->get('database')
     );
   }
 
@@ -138,6 +176,18 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
    */
   public function trackOnEntityCreation(EntityInterface $source_entity) {
     $trackable_field_types = $this->getApplicableFieldTypes();
+
+    if ($this->config->get('queue_tracking')) {
+      if ($source_entity instanceof RevisionableInterface) {
+        // Delete records from non-current revision ids.
+        $this->database
+          ->delete('entity_usage')
+          ->condition('source_id', $source_entity->id())
+          ->condition('source_vid', $source_entity->getRevisionId(), '<>')
+          ->execute();
+      }
+    }
+
     $fields = array_keys($this->getReferencingFields($source_entity, $trackable_field_types));
     foreach ($fields as $field_name) {
       if ($source_entity->hasField($field_name) && !$source_entity->{$field_name}->isEmpty()) {
@@ -147,7 +197,7 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
           // need to add a tracking record.
           $target_entities = $this->getTargetEntities($field_item);
           foreach ($target_entities as $target_entity) {
-            list($target_type, $target_id) = explode("|", $target_entity);
+            [$target_type, $target_id] = explode("|", $target_entity);
             $source_vid = ($source_entity instanceof RevisionableInterface && $source_entity->getRevisionId()) ? $source_entity->getRevisionId() : 0;
             $this->usageService->registerUsage($target_id, $target_type, $source_entity->id(), $source_entity->getEntityTypeId(), $source_entity->language()->getId(), $source_vid, $this->pluginId, $field_name);
           }
@@ -202,12 +252,12 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
       $removed_ids = array_diff($original_targets, $current_targets);
 
       foreach ($added_ids as $added_entity) {
-        list($target_type, $target_id) = explode('|', $added_entity);
+        [$target_type, $target_id] = explode('|', $added_entity);
         $source_vid = ($source_entity instanceof RevisionableInterface && $source_entity->getRevisionId()) ? $source_entity->getRevisionId() : 0;
         $this->usageService->registerUsage($target_id, $target_type, $source_entity->id(), $source_entity->getEntityTypeId(), $source_entity->language()->getId(), $source_vid, $this->pluginId, $field_name);
       }
       foreach ($removed_ids as $removed_entity) {
-        list($target_type, $target_id) = explode('|', $removed_entity);
+        [$target_type, $target_id] = explode('|', $removed_entity);
         $source_vid = ($source_entity instanceof RevisionableInterface && $source_entity->getRevisionId()) ? $source_entity->getRevisionId() : 0;
         $this->usageService->registerUsage($target_id, $target_type, $source_entity->id(), $source_entity->getEntityTypeId(), $source_entity->language()->getId(), $source_vid, $this->pluginId, $field_name, 0);
       }
@@ -218,11 +268,13 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
    * {@inheritdoc}
    */
   public function getReferencingFields(EntityInterface $source_entity, array $field_types) {
-    $source_entity_type_id = $source_entity->getEntityTypeId();
+    $referencing_fields_on_bundle = [];
+    if (!($source_entity instanceof FieldableEntityInterface)) {
+      return $referencing_fields_on_bundle;
+    }
 
+    $source_entity_type_id = $source_entity->getEntityTypeId();
     $all_fields_on_bundle = $this->entityFieldManager->getFieldDefinitions($source_entity_type_id, $source_entity->bundle());
-
-    $referencing_fields_on_bundle = [];
     foreach ($all_fields_on_bundle as $field_name => $field) {
       if (in_array($field->getType(), $field_types)) {
         $referencing_fields_on_bundle[$field_name] = $field;
@@ -240,4 +292,140 @@ abstract class EntityUsageTrackBase extends PluginBase implements EntityUsageTra
     return $referencing_fields_on_bundle;
   }
 
+  /**
+   * Process the url to a Url object.
+   *
+   * @param string $url
+   *   A relative or absolute URL string.
+   *
+   * @return \Drupal\Core\Url|false
+   *   The Url object
+   */
+  protected function processUrl($url) {
+    // Strip off the scheme and host, so we only get the path.
+    $site_domains = $this->config->get('site_domains') ?: [];
+    foreach ($site_domains as $site_domain) {
+      $site_domain = rtrim($site_domain, "/");
+      $host_pattern = str_replace('.', '\.', $site_domain) . "/";
+      $host_pattern = "/" . str_replace("/", '\/', $host_pattern) . "/";
+      if (preg_match($host_pattern, $url)) {
+        // Strip off everything that is not the internal path.
+        $url = parse_url($url, PHP_URL_PATH);
+
+        if (preg_match('/^[^\/]+(\/.+)/', $site_domain, $matches)) {
+          $sub_directory = $matches[1];
+          if ($sub_directory && substr($url, 0, strlen($sub_directory)) == $sub_directory) {
+            $url = substr($url, strlen($sub_directory));
+          }
+        }
+
+        break;
+      }
+    }
+
+    return $this->pathValidator()->getUrlIfValidWithoutAccessCheck($url);
+  }
+
+  /**
+   * Try to retrieve an entity from an URL string.
+   *
+   * @param string $url
+   *   A relative or absolute URL string.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface|null
+   *   The entity object that corresponds to the received URL, or NULL if no
+   *   entity could be retrieved.
+   */
+  protected function findEntityByUrlString($url) {
+    if (empty($url)) {
+      return NULL;
+    }
+
+    $entity = NULL;
+
+    $url_object = $this->processUrl($url);
+
+    $public_file_pattern = '{^/?' . $this->publicFileDirectory() . '/}';
+
+    if ($url_object && $url_object->isRouted()) {
+      $entity = $this->findEntityByRoutedUrl($url_object);
+    }
+    elseif (preg_match($public_file_pattern, $url)) {
+      // Check if we can map the link to a public file.
+      $file_uri = preg_replace($public_file_pattern, 'public://', urldecode($url));
+      $files = $this->entityTypeManager->getStorage('file')->loadByProperties(['uri' => $file_uri]);
+      if ($files) {
+        // File entity found.
+        $target_type = 'file';
+        $target_id = array_keys($files)[0];
+
+        if ($target_type && $target_id) {
+          $entity = $this->entityTypeManager->getStorage($target_type)->load($target_id);
+        }
+      }
+    }
+
+    return $entity;
+  }
+
+  /**
+   * Try to retrieve an entity from an URL object.
+   *
+   * @param \Drupal\Core\Url $url
+   *   A URL object.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface|null
+   *   The entity object that corresponds to the URL object, or NULL if no
+   *   entity could be retrieved.
+   */
+  protected function findEntityByRoutedUrl(Url $url) {
+    if (!$url || !$url->isRouted()) {
+      return NULL;
+    }
+
+    $entity = NULL;
+    $target_type = NULL;
+    $target_id = NULL;
+
+    $entity_pattern = '/^entity\.([a-z_]*)\./';
+
+    if (preg_match($entity_pattern, $url->getRouteName(), $matches)) {
+      // Ge the target entity type and ID.
+      if ($target_entity_type = $this->entityTypeManager->getDefinition($matches[1])) {
+        $route_parameters = $url->getRouteParameters();
+        $target_type = $target_entity_type->id();
+        $target_id = $route_parameters[$target_type];
+      }
+    }
+
+    if ($target_type && $target_id) {
+      $entity = $this->entityTypeManager->getStorage($target_type)->load($target_id);
+    }
+
+    return $entity;
+  }
+
+  /**
+   * Returns the path validator service.
+   *
+   * @return \Drupal\Core\Path\PathValidatorInterface
+   *   The path validator.
+   */
+  protected function pathValidator() {
+    return $this->pathValidator;
+  }
+
+  /**
+   * Return the public file directory path.
+   *
+   * @return string
+   *   The public file directory path.
+   */
+  protected function publicFileDirectory() {
+    if (!$this->publicFileDirectory) {
+      $this->publicFileDirectory = \Drupal::service('stream_wrapper.public')->getDirectoryPath();
+    }
+    return $this->publicFileDirectory;
+  }
+
 }
diff --git a/src/Plugin/EntityUsage/Track/HtmlLink.php b/src/Plugin/EntityUsage/Track/HtmlLink.php
index 5b1893b..c0fbf16 100644
--- a/src/Plugin/EntityUsage/Track/HtmlLink.php
+++ b/src/Plugin/EntityUsage/Track/HtmlLink.php
@@ -3,14 +3,6 @@
 namespace Drupal\entity_usage\Plugin\EntityUsage\Track;
 
 use Drupal\Component\Utility\Html;
-use Drupal\Core\Config\ConfigFactoryInterface;
-use Drupal\Core\Entity\EntityFieldManagerInterface;
-use Drupal\Core\Entity\EntityRepositoryInterface;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Drupal\Core\Path\PathValidatorInterface;
-use Drupal\Core\StreamWrapper\StreamWrapperInterface;
-use Drupal\entity_usage\EntityUsage;
-use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Tracks usage of entities referenced from regular HTML Links.
@@ -24,68 +16,6 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  */
 class HtmlLink extends TextFieldEmbedBase {
 
-  /**
-   * The Drupal Path Validator service.
-   *
-   * @var \Drupal\Core\Path\PathValidatorInterface
-   */
-  protected $pathValidator;
-
-  /**
-   * The public file directory.
-   *
-   * @var string
-   */
-  protected $publicFileDirectory;
-
-  /**
-   * Constructs the HtmlLink plugin.
-   *
-   * @param array $configuration
-   *   A configuration array containing information about the plugin instance.
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param mixed $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Drupal\entity_usage\EntityUsage $usage_service
-   *   The usage tracking service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   *   The EntityTypeManager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   *   The EntityFieldManager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   *   The EntityRepositoryInterface service.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
-   *   The Drupal Path Validator service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperInterface $public_stream
-   *   The Public Stream service.
-   */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityUsage $usage_service, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityRepositoryInterface $entity_repository, PathValidatorInterface $path_validator, StreamWrapperInterface $public_stream) {
-    parent::__construct($configuration, $plugin_id, $plugin_definition, $usage_service, $entity_type_manager, $entity_field_manager, $config_factory, $entity_repository);
-    $this->pathValidator = $path_validator;
-    $this->publicFileDirectory = method_exists($public_stream, 'getDirectoryPath') ? $public_stream->getDirectoryPath() : '';
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    return new static(
-      $configuration,
-      $plugin_id,
-      $plugin_definition,
-      $container->get('entity_usage.usage'),
-      $container->get('entity_type.manager'),
-      $container->get('entity_field.manager'),
-      $container->get('config.factory'),
-      $container->get('entity.repository'),
-      $container->get('path.validator'),
-      $container->get('stream_wrapper.public')
-    );
-  }
-
   /**
    * {@inheritdoc}
    */
@@ -102,55 +32,20 @@ class HtmlLink extends TextFieldEmbedBase {
         // Get the href value of the <a> element.
         $href = $element->getAttribute('href');
 
-        // Strip off the scheme and host, so we only get the path.
-        $site_domains = $this->config->get('site_domains') ?: [];
-        foreach ($site_domains as $site_domain) {
-          $host_pattern = '{^https?://' . str_replace('.', '\.', $site_domain) . '/}';
-          if (\preg_match($host_pattern, $href)) {
-            $href = preg_replace($host_pattern, '/', $href);
-            break;
-          }
-        }
-
-        $target_type = $target_id = NULL;
-
-        // Check if the href links to an entity.
-        $url = $this->pathValidator->getUrlIfValidWithoutAccessCheck($href);
-        if ($url && $url->isRouted() && preg_match('/^entity\./', $url->getRouteName())) {
-          // Ge the target entity type and ID.
-          $route_parameters = $url->getRouteParameters();
-          $target_type = array_keys($route_parameters)[0];
-          $target_id = $route_parameters[$target_type];
-        }
-        elseif (\preg_match('{^/?' . $this->publicFileDirectory . '/}', $href)) {
-          // Check if we can map the link to a public file.
-          $file_uri = preg_replace('{^/?' . $this->publicFileDirectory . '/}', 'public://', urldecode($href));
-          $files = $this->entityTypeManager->getStorage('file')->loadByProperties(['uri' => $file_uri]);
-          if ($files) {
-            // File entity found.
-            $target_type = 'file';
-            $target_id = array_keys($files)[0];
-          }
-        }
-
-        if ($target_type && $target_id) {
-          $entity = $this->entityTypeManager->getStorage($target_type)->load($target_id);
-          if ($entity) {
-
-            if ($element->hasAttribute('data-entity-uuid')) {
-              // Normally the Linkit plugin handles when a element has this
-              // attribute, but sometimes users may change the HREF manually and
-              // leave behind the wrong UUID.
-              $data_uuid = $element->getAttribute('data-entity-uuid');
-              // If the UUID is the same as found in HREF, then skip it because
-              // it's LinkIt's job to register this usage.
-              if ($data_uuid == $entity->uuid()) {
-                continue;
-              }
+        $entity = $this->findEntityByUrlString($href);
+        if ($entity) {
+          if ($element->hasAttribute('data-entity-uuid')) {
+            // Normally the Linkit plugin handles when a element has this
+            // attribute, but sometimes users may change the HREF manually and
+            // leave behind the wrong UUID.
+            $data_uuid = $element->getAttribute('data-entity-uuid');
+            // If the UUID is the same as found in HREF, then skip it because
+            // it's LinkIt's job to register this usage.
+            if ($data_uuid === $entity->uuid()) {
+              continue;
             }
-
-            $entities[$entity->uuid()] = $target_type;
           }
+          $entities[$entity->uuid()] = $entity->getEntityTypeId();
         }
       }
       catch (\Exception $e) {
diff --git a/src/Plugin/EntityUsage/Track/LayoutBuilder.php b/src/Plugin/EntityUsage/Track/LayoutBuilder.php
index 906b8d9..d979618 100644
--- a/src/Plugin/EntityUsage/Track/LayoutBuilder.php
+++ b/src/Plugin/EntityUsage/Track/LayoutBuilder.php
@@ -9,10 +9,12 @@ use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldItemInterface;
-use Drupal\entity_usage\EntityUsage;
+use Drupal\entity_usage\EntityUsageInterface;
 use Drupal\entity_usage\EntityUsageTrackBase;
 use Drupal\layout_builder\Plugin\Field\FieldType\LayoutSectionItem;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Path\PathValidatorInterface;
+use Drupal\Core\StreamWrapper\PublicStream;
 
 /**
  * Tracks usage of entities related in Layout Builder layouts.
@@ -42,7 +44,7 @@ class LayoutBuilder extends EntityUsageTrackBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\entity_usage\EntityUsage $usage_service
+   * @param \Drupal\entity_usage\EntityUsageInterface $usage_service
    *   The usage tracking service.
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
@@ -54,9 +56,13 @@ class LayoutBuilder extends EntityUsageTrackBase {
    *   The EntityRepositoryInterface service.
    * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
    *   Block manager.
+   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   *   The Drupal Path Validator service.
+   * @param \Drupal\Core\StreamWrapper\PublicStream $public_stream
+   *   The Public Stream service.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityUsage $usage_service, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityRepositoryInterface $entity_repository, BlockManagerInterface $blockManager) {
-    parent::__construct($configuration, $plugin_id, $plugin_definition, $usage_service, $entity_type_manager, $entity_field_manager, $config_factory, $entity_repository);
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityUsageInterface $usage_service, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityRepositoryInterface $entity_repository, BlockManagerInterface $blockManager, PathValidatorInterface $path_validator, PublicStream $public_stream) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $usage_service, $entity_type_manager, $entity_field_manager, $config_factory, $entity_repository, $path_validator, $public_stream);
     $this->blockManager = $blockManager;
   }
 
@@ -73,7 +79,9 @@ class LayoutBuilder extends EntityUsageTrackBase {
       $container->get('entity_field.manager'),
       $container->get('config.factory'),
       $container->get('entity.repository'),
-      $container->get('plugin.manager.block')
+      $container->get('plugin.manager.block'),
+      $container->get('path.validator'),
+      $container->get('stream_wrapper.public')
     );
   }
 
diff --git a/src/Plugin/EntityUsage/Track/Link.php b/src/Plugin/EntityUsage/Track/Link.php
index 288b618..52836f6 100644
--- a/src/Plugin/EntityUsage/Track/Link.php
+++ b/src/Plugin/EntityUsage/Track/Link.php
@@ -22,28 +22,20 @@ class Link extends EntityUsageTrackBase {
    */
   public function getTargetEntities(FieldItemInterface $link) {
     /** @var \Drupal\link\LinkItemInterface $link */
-    // Check if the link is referencing an entity.
-    $url = $link->getUrl();
-    if (!$url->isRouted() || !preg_match('/^entity\./', $url->getRouteName())) {
-      return [];
+    if ($link->isExternal()) {
+      $url = $link->getUrl()->toString();
+      $entity = $this->findEntityByUrlString($url);
     }
-
-    // Ge the target entity type and ID.
-    $route_parameters = $url->getRouteParameters();
-    $target_type = array_keys($route_parameters)[0];
-    $target_id = $route_parameters[$target_type];
-
-    // Only return a valid result if the target entity exists.
-    try {
-      if (!$this->entityTypeManager->getStorage($target_type)->load($target_id)) {
-        return [];
-      }
+    else {
+      $url = $link->getUrl();
+      $entity = $this->findEntityByRoutedUrl($url);
     }
-    catch (\Exception $exception) {
+
+    if (!$entity) {
       return [];
     }
 
-    return [$target_type . '|' . $target_id];
+    return [$entity->getEntityTypeId() . '|' . $entity->id()];
   }
 
 }
diff --git a/src/Plugin/QueueWorker/EntityUsageTracker.php b/src/Plugin/QueueWorker/EntityUsageTracker.php
new file mode 100644
index 0000000..b41d3c9
--- /dev/null
+++ b/src/Plugin/QueueWorker/EntityUsageTracker.php
@@ -0,0 +1,106 @@
+<?php
+
+namespace Drupal\entity_usage\Plugin\QueueWorker;
+
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Queue\QueueWorkerBase;
+use Drupal\entity_usage\EntityUpdateManager;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Processes the entity usage tracking via a queue.
+ *
+ * @QueueWorker(
+ *   id = "entity_usage_tracker",
+ *   title = @Translation("Entity usage tracker"),
+ *   cron = {"time" = 300}
+ * )
+ */
+class EntityUsageTracker extends QueueWorkerBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * The entity type manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The entity usage update manager.
+   *
+   * @var \Drupal\entity_usage\EntityUpdateManager
+   */
+  protected $entityUsageUpdateManager;
+
+  /**
+   * Constructs a new class instance.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   Entity type manager service.
+   * @param \Drupal\entity_usage\EntityUpdateManager $entity_usage_update_manager
+   *   Entity usage update manager.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityUpdateManager $entity_usage_update_manager) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->entityTypeManager = $entity_type_manager;
+    $this->entityUsageUpdateManager = $entity_usage_update_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('entity_type.manager'),
+      $container->get('entity_usage.entity_update_manager')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function processItem($data) {
+
+    $storage = $this->entityTypeManager->getStorage($data['entity_type']);
+
+    if (!$storage) {
+      return;
+    }
+
+    $entity = $storage->load($data['entity_id']);
+
+    if (!$entity) {
+      return;
+    }
+
+    switch ($data['operation']) {
+      case 'insert':
+      case 'update':
+        $this->entityUsageUpdateManager->trackUpdateOnCreation($entity);
+        break;
+
+      case 'predelete':
+        $this->entityUsageUpdateManager->trackUpdateOnDeletion($entity);
+        break;
+
+      case 'translation_delete':
+        $this->entityUsageUpdateManager->trackUpdateOnDeletion($entity, 'translation');
+        break;
+
+      case 'revision_delete':
+        $this->entityUsageUpdateManager->trackUpdateOnDeletion($entity, 'revision');
+        break;
+    }
+  }
+
+}
diff --git a/tests/src/FunctionalJavascript/IntegrationTest.php b/tests/src/FunctionalJavascript/IntegrationTest.php
index 9c5c781..30d0dd8 100644
--- a/tests/src/FunctionalJavascript/IntegrationTest.php
+++ b/tests/src/FunctionalJavascript/IntegrationTest.php
@@ -434,6 +434,40 @@ class IntegrationTest extends EntityUsageJavascriptTestBase {
     $node2->delete();
     $usage = $usage_service->listSources($node1);
     $this->assertEquals([], $usage);
+
+    // Create Node 3 referencing Node 1 with an absolute URL in the link field.
+    // Whitelist the local hostname so we can test absolute URLs.
+    $current_request = \Drupal::request();
+    $config = \Drupal::configFactory()->getEditable('entity_usage.settings');
+    $config->set('site_domains', [$current_request->getHttpHost() . $current_request->getBasePath()]);
+    $config->save();
+    drupal_flush_all_caches();
+    $this->drupalGet('/node/add/eu_test_ct');
+    $page->fillField('title[0][value]', 'Node 3');
+    $page->fillField('field_link1[0][uri]', $node1->toUrl()->setAbsolute()->toString());
+    $assert_session->waitOnAutocomplete();
+    $page->fillField('field_link1[0][title]', "Linked text");
+    $page->pressButton('Save');
+    $session->wait(500);
+    $this->saveHtmlOutput();
+    $assert_session->pageTextContains('eu_test_ct Node 3 has been created.');
+    $node3 = $this->getLastEntityOfType('node', TRUE);
+    // Check that the usage of Node 1 points to Node 2.
+    $usage = $usage_service->listSources($node1);
+    $expected = [
+      'node' => [
+        $node3->id() => [
+          0 => [
+            'source_langcode' => 'en',
+            'source_vid' => $node3->getRevisionId(),
+            'method' => 'link',
+            'field_name' => 'field_link1',
+            'count' => 1,
+          ],
+        ],
+      ],
+    ];
+    $this->assertEquals($expected, $usage);
   }
 
 }
