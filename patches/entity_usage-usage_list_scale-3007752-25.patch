diff --git a/config/install/entity_usage.settings.yml b/config/install/entity_usage.settings.yml
index 5be2839..8e80ed0 100644
--- a/config/install/entity_usage.settings.yml
+++ b/config/install/entity_usage.settings.yml
@@ -1,3 +1,4 @@
 track_enabled_base_fields: false
 local_task_enabled_entity_types: { }
 usage_controller_items_per_page: 25
+usage_controller_subquery: false
diff --git a/config/schema/entity_usage.schema.yml b/config/schema/entity_usage.schema.yml
index 3c5c894..acc9466 100644
--- a/config/schema/entity_usage.schema.yml
+++ b/config/schema/entity_usage.schema.yml
@@ -47,3 +47,6 @@ entity_usage.settings:
     usage_controller_items_per_page:
       label: Number of items per page on the usage page
       type: integer
+    usage_controller_subquery:
+      type: boolean
+      label: Improve usage page performance for a large number of entities.
diff --git a/entity_usage.install b/entity_usage.install
index 6a83e47..69122e8 100644
--- a/entity_usage.install
+++ b/entity_usage.install
@@ -283,3 +283,14 @@ function entity_usage_update_8205(&$sandbox) {
     $config->set('usage_controller_items_per_page', ListUsageController::ITEMS_PER_PAGE_DEFAULT)->save(TRUE);
   }
 }
+
+/**
+ * Initialize the new "usage_controller_subquery" config value to false.
+ */
+function entity_usage_update_8206(&$sandbox) {
+  $config = \Drupal::configFactory()->getEditable('entity_usage.settings');
+  $usage_controller_subquery = $config->get('usage_controller_subquery');
+  if (empty($usage_controller_subquery)) {
+    $config->set('usage_controller_subquery', FALSE)->save(TRUE);
+  }
+}
diff --git a/entity_usage.routing.yml b/entity_usage.routing.yml
index a56a575..35c55e7 100644
--- a/entity_usage.routing.yml
+++ b/entity_usage.routing.yml
@@ -6,6 +6,14 @@ entity_usage.usage_list:
   requirements:
     _permission: 'access entity usage statistics'
     _custom_access: '\Drupal\entity_usage\Controller\ListUsageController::checkAccess'
+entity_usage.usage_list_subquery:
+  path: '/admin/content/entity-usage-subquery/{entity_type}/{entity_id}'
+  defaults:
+    _controller: 'Drupal\entity_usage\Controller\ListUsageController::listUsagePageSubQuery'
+    _title_callback: 'Drupal\entity_usage\Controller\ListUsageController::getTitle'
+  requirements:
+    _permission: 'access entity usage statistics'
+    _custom_access: '\Drupal\entity_usage\Controller\ListUsageController::checkAccess'
 entity_usage.batch_update:
   path: '/admin/config/entity-usage/batch-update'
   defaults:
diff --git a/src/Controller/ListUsageController.php b/src/Controller/ListUsageController.php
index 038a7fa..01fce55 100644
--- a/src/Controller/ListUsageController.php
+++ b/src/Controller/ListUsageController.php
@@ -11,7 +11,6 @@ use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Language\LanguageInterface;
-use Drupal\Core\Link;
 use Drupal\entity_usage\EntityUsageInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Pager\PagerManagerInterface;
@@ -40,6 +39,11 @@ class ListUsageController extends ControllerBase {
    */
   protected $entityUsage;

+  /**
+   * @var  \Drupal\Core\Entity\EntityInterface
+   */
+  protected $entity;
+
   /**
    * All source rows for this target entity.
    *
@@ -118,6 +122,7 @@ class ListUsageController extends ControllerBase {
    * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
    */
   public function listUsagePage($entity_type, $entity_id) {
+    $this->loadEntity($entity_type, $entity_id);
     $all_rows = $this->getRows($entity_type, $entity_id);
     if (empty($all_rows)) {
       return [
@@ -190,10 +195,149 @@ class ListUsageController extends ControllerBase {
     if (!$entity) {
       return $rows;
     }
+    $all_usages = $this->entityUsage->listSources($this->entity);
+    $this->allRows = $this->prepareRows($all_usages);
+    return $this->allRows;
+  }
+
+  /**
+   * Get rows for a given page.
+   *
+   * @param int $page
+   *   The page number to retrieve.
+   * @param int $num_per_page
+   *   The number of rows we want to have on this page.
+   * @param string $entity_type
+   *   The type of the target entity.
+   * @param int|string $entity_id
+   *   The ID of the target entity.
+   *
+   * @return array
+   *   An indexed array of rows representing the records for a given page.
+   */
+  protected function getPageRows($page, $num_per_page, $entity_type, $entity_id) {
+    $offset = $page * $num_per_page;
+    return array_slice($this->getRows($entity_type, $entity_id), $offset, $num_per_page);
+  }
+
+  /**
+   * Lists the usage of a given entity with sub queries.
+   *
+   * @param string $entity_type
+   *   The entity type.
+   * @param int $entity_id
+   *   The entity ID.
+   *
+   * @return array
+   *   The page build to be rendered.
+   *
+   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   */
+  public function listUsagePageSubQuery($entity_type, $entity_id) {
+    $this->loadEntity($entity_type, $entity_id);
+    $total = $this->getSubQueryRowsCount();
+    if (!$total) {
+      return [
+        '#markup' => $this->t('There are no recorded usages for entity of type: @type with id: @id', ['@type' => $entity_type, '@id' => $entity_id]),
+      ];
+    }
+
+    $header = [
+      $this->t('Entity'),
+      $this->t('Type'),
+      $this->t('Language'),
+      $this->t('Field name'),
+      $this->t('Status'),
+      $this->t('Used in'),
+    ];
+
+    $pager = $this->pagerManager->createPager($total, $this->itemsPerPage);
+    $page = $pager->getCurrentPage();
+    $page_rows = $this->getSubQueryRows($page, $this->itemsPerPage);
+    // If all rows on this page are of entities that have usage on their default
+    // revision, we don't need the "Used in" column.
+    $used_in_previous_revisions = FALSE;
+    foreach ($page_rows as $row) {
+      if ($row[5] == $this->t('Translations or previous revisions')) {
+        $used_in_previous_revisions = TRUE;
+        break;
+      }
+    }
+    if (!$used_in_previous_revisions) {
+      unset($header[5]);
+      array_walk($page_rows, function (&$row, $key) {
+        unset($row[5]);
+      });
+    }
+    $build[] = [
+      '#theme' => 'table',
+      '#rows' => $page_rows,
+      '#header' => $header,
+    ];
+
+    $build[] = [
+      '#type' => 'pager',
+      '#route_name' => '<current>',
+    ];
+
+    return $build;
+  }
+
+  /**
+   * Retrieve total number of unique sources.
+   *
+   * @return int
+   *   Number of unique sources.
+   */
+  protected function getSubQueryRowsCount() {
+    return $this->entityUsage->listUniqueSourcesCount($this->entity);
+  }
+
+  /**
+   * Get all usage rows for a given page.
+   *
+   * @param int $page
+   *   The page number to retrieve.
+   * @param int $num_per_page
+   *   The number of rows we want to have on this page.
+   *
+   * @return array
+   *   An indexed array of rows representing the records for a given page.
+   */
+  protected function getSubQueryRows($page, $num_per_page) {
+    $offset = $page * $num_per_page;
+    $all_usages = $this->entityUsage->listSourcesPage($this->entity, $offset);
+    return $this->prepareRows($all_usages);
+  }
+
+  /**
+   * Set the current entity object.
+   *
+   * @param string $entity_type
+   *   The type of the target entity.
+   * @param int|string $entity_id
+   *   The ID of the target entity.
+   */
+  public function loadEntity($entity_type, $entity_id) {
+    if (!$this->entity) {
+      $this->entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
+    }
+  }
+
+  /**
+   * Prepare usage records.
+   *
+   * @param $usages
+   *   Usage records from the query.
+   *
+   * @return array
+   *   An indexed array of rows representing the records for a given page.
+   */
+  public function prepareRows($usages) {
     $entity_types = $this->entityTypeManager->getDefinitions();
     $languages = $this->languageManager()->getLanguages(LanguageInterface::STATE_ALL);
-    $all_usages = $this->entityUsage->listSources($entity);
-    foreach ($all_usages as $source_type => $ids) {
+    $rows = [];
+    foreach ($usages as $source_type => $ids) {
       $type_storage = $this->entityTypeManager->getStorage($source_type);
       foreach ($ids as $source_id => $records) {
         // We will show a single row per source entity. If the target is not
@@ -238,28 +382,7 @@ class ListUsageController extends ControllerBase {
       }
     }

-    $this->allRows = $rows;
-    return $this->allRows;
-  }
-
-  /**
-   * Get rows for a given page.
-   *
-   * @param int $page
-   *   The page number to retrieve.
-   * @param int $num_per_page
-   *   The number of rows we want to have on this page.
-   * @param string $entity_type
-   *   The type of the target entity.
-   * @param int|string $entity_id
-   *   The ID of the target entity.
-   *
-   * @return array
-   *   An indexed array of rows representing the records for a given page.
-   */
-  protected function getPageRows($page, $num_per_page, $entity_type, $entity_id) {
-    $offset = $page * $num_per_page;
-    return array_slice($this->getRows($entity_type, $entity_id), $offset, $num_per_page);
+    return $rows;
   }

   /**
@@ -274,9 +397,9 @@ class ListUsageController extends ControllerBase {
    *   The title to be used on this page.
    */
   public function getTitle($entity_type, $entity_id) {
-    $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
-    if ($entity) {
-      return $this->t('Entity usage information for %entity_label', ['%entity_label' => $entity->label()]);
+    $this->loadEntity($entity_type, $entity_id);
+    if ($this->entity) {
+      return $this->t('Entity usage information for %entity_label', ['%entity_label' => $this->entity->label()]);
     }
     return $this->t('Entity Usage List');
   }
@@ -399,8 +522,8 @@ class ListUsageController extends ControllerBase {
    *   The access result.
    */
   public function checkAccess($entity_type, $entity_id) {
-    $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
-    if (!$entity || !$entity->access('view')) {
+    $this->loadEntity($entity_type, $entity_id);
+    if (!$this->entity || !$this->entity->access('view')) {
       return AccessResult::forbidden();
     }
     return AccessResult::allowed();
diff --git a/src/Controller/LocalTaskUsageSubQueryController.php b/src/Controller/LocalTaskUsageSubQueryController.php
new file mode 100644
index 0000000..0930f99
--- /dev/null
+++ b/src/Controller/LocalTaskUsageSubQueryController.php
@@ -0,0 +1,68 @@
+<?php
+
+namespace Drupal\entity_usage\Controller;
+
+use Drupal\Core\Routing\RouteMatchInterface;
+
+/**
+ * Controller for our local tasks.
+ */
+class LocalTaskUsageSubQueryController extends ListUsageController {
+
+  /**
+   * Checks access based on whether the user can view the current entity.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *
+   * @return \Drupal\Core\Access\AccessResultInterface
+   *   The access result.
+   */
+  public function checkAccessLocalTask(RouteMatchInterface $route_match) {
+    $entity = $this->getEntityFromRouteMatch($route_match);
+    return parent::checkAccess($entity->getEntityTypeId(), $entity->id());
+  }
+
+  /**
+   * Title page callback.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *
+   * @return string
+   *   The title to be used on this page.
+   */
+  public function getTitleLocalTask(RouteMatchInterface $route_match) {
+    $entity = $this->getEntityFromRouteMatch($route_match);
+    return parent::getTitle($entity->getEntityTypeId(), $entity->id());
+  }
+
+  /**
+   * Lists the usage of a given entity.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *
+   * @return array
+   *   The page build to be rendered.
+   */
+  public function listUsageLocalTask(RouteMatchInterface $route_match) {
+    $entity = $this->getEntityFromRouteMatch($route_match);
+    return parent::listUsagePageSubQuery($entity->getEntityTypeId(), $entity->id());
+  }
+
+  /**
+   * Retrieves entity from route match.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   The route match.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface|null
+   *   The entity object as determined from the passed-in route match.
+   */
+  protected function getEntityFromRouteMatch(RouteMatchInterface $route_match) {
+    $parameter_name = $route_match->getRouteObject()->getOption('_entity_usage_entity_type_id');
+    return $route_match->getParameter($parameter_name);
+  }
+
+}
diff --git a/src/EntityUsage.php b/src/EntityUsage.php
index 4779a67..c5c83ba 100644
--- a/src/EntityUsage.php
+++ b/src/EntityUsage.php
@@ -6,6 +6,7 @@ use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\entity_usage\Controller\ListUsageController;
 use Drupal\entity_usage\Events\Events;
 use Drupal\entity_usage\Events\EntityUsageEvent;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
@@ -249,7 +250,89 @@ class EntityUsage implements EntityUsageInterface {
     }

     $result = $query->execute();
+    return $this->prepareListSources($result, $nest_results);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function listUniqueSourcesCount(EntityInterface $target_entity) {
+    $target_id_column = $this->isInt($target_entity->id()) ? 'target_id' : 'target_id_string';
+    $query = $this->connection->select($this->tableName, 'p');
+    $query->fields('p', [
+      'source_id',
+      'source_type',
+    ]);
+    $query->addExpression("concat(source_type, '-', source_id)", 'type_id_key');
+    $query->condition($target_id_column, $target_entity->id());
+    $query->condition('target_type', $target_entity->getEntityTypeId());
+    $query->condition('count', 0, '>');
+    $query->orderBy('source_type');
+    $query->orderBy('source_id', 'DESC');
+    $query->distinct();
+
+    // Return the unique number of sources.
+    return (int) $query->countQuery()->execute()->fetchField();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function listSourcesPage(EntityInterface $target_entity, $offset, $nest_results = TRUE) {
+    $target_id_column = $this->isInt($target_entity->id()) ? 'target_id' : 'target_id_string';
+
+    // SubQuery for offset results.
+    $sub_query = $this->connection->select($this->tableName, 'p');
+    $sub_query->fields('p', [
+      'source_id',
+      'source_type',
+    ]);
+    $sub_query->addExpression("concat(source_type, '-', source_id)", 'type_id_key');
+    $sub_query->condition($target_id_column, $target_entity->id());
+    $sub_query->condition('target_type', $target_entity->getEntityTypeId());
+    $sub_query->condition('count', 0, '>');
+    $sub_query->orderBy('source_type');
+    $sub_query->orderBy('source_id', 'DESC');
+    $sub_query->distinct();
+
+    // Entities can have string IDs. We support that by using different columns
+    // on each case.
+    $query = $this->connection->select($this->tableName, 'e');
+    $query->fields('e', [
+      'source_id',
+      'source_id_string',
+      'source_type',
+      'source_langcode',
+      'source_vid',
+      'method',
+      'field_name',
+      'count',
+    ]);
+
+    // Set a range and restrict usage records to unique sources.
+    $items_per_page = $this->config->get('usage_controller_items_per_page') ?: ListUsageController::ITEMS_PER_PAGE_DEFAULT;
+    $sub_query->range($offset, $items_per_page);
+    $sub_query_results = $sub_query->execute()->fetchAllAssoc('type_id_key');
+    $sub_query_keys = array_keys($sub_query_results);
+    $query->addExpression("concat(source_type, '-', source_id)", 'type_id_key');
+    $query->where("concat(source_type, '-', source_id) in (:keys[])", [':keys[]' => $sub_query_keys]);
+
+    $query->condition($target_id_column, $target_entity->id());
+    $query->condition('target_type', $target_entity->getEntityTypeId());
+    $query->condition('count', 0, '>');
+    $query->orderBy('source_type');
+    $query->orderBy('source_id', 'DESC');
+    $query->orderBy('source_vid', 'DESC');
+    $query->orderBy('source_langcode');

+    $result = $query->execute();
+    return $this->prepareListSources($result, $nest_results);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function prepareListSources($result, $nest_results) {
     $references = [];
     foreach ($result as $usage) {
       $source_id_value = !empty($usage->source_id) ? (string) $usage->source_id : (string) $usage->source_id_string;
diff --git a/src/EntityUsageInterface.php b/src/EntityUsageInterface.php
index d0a8dc4..45e6e4e 100644
--- a/src/EntityUsageInterface.php
+++ b/src/EntityUsageInterface.php
@@ -98,6 +98,59 @@ interface EntityUsageInterface {
   /**
    * Provide a list of all referencing source entities for a target entity.
    *
+   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   *   A target entity.
+   * @param bool $nest_results
+   *   (optional) Whether the results should be returned in a nested structure.
+   *   Defaults to TRUE.
+   *
+   * @return array|int
+   *   A nested array with usage data. The first level is keyed by the type of
+   *   the source entities, the second by the source id. The value of the second
+   *   level contains all other information like the method used by the source
+   *   to reference the target, the field name and the source language code. If
+   *   $nest_results is FALSE, the returned array will be an indexed array where
+   *   values are arrays containing all DB columns for the records.
+   */
+  public function listSources(EntityInterface $target_entity, $nest_results = TRUE);
+
+  /**
+   * Provide a count of unique referencing source entities for a target entity.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   *   A target entity.
+   *
+   * @return int
+   *   The return value will be the total number of unique sources.
+   */
+  public function listUniqueSourcesCount(EntityInterface $target_entity);
+
+  /**
+   * Provide a list of all referencing source entities for a target entity.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   *   A target entity.
+   * @param int $offset
+   *   (optional) Controls the range of records returned.
+   *   Defaults to NULL.
+   * @param bool $nest_results
+   *   (optional) Whether the results should be returned in a nested structure.
+   *   Defaults to TRUE.
+   *
+   * @return array
+   *   A nested array with usage data. The first level is keyed by the type of
+   *   the source entities, the second by the source id. The value of the second
+   *   level contains all other information like the method used by the source
+   *   to reference the target, the field name and the source language code. If
+   *   $nest_results is FALSE, the returned array will be an indexed array where
+   *   values are arrays containing all DB columns for the records. Offset will
+   *   be the start integer for the query range.
+   */
+  public function listSourcesPage(EntityInterface $target_entity, $offset, $nest_results = TRUE);
+
+  /**
+   * Prepares the list of all referencing source entities.
+   *
    * Examples:
    *  - Return example 1:
    *  [
@@ -135,16 +188,12 @@ interface EntityUsageInterface {
    *    ]
    *  ]
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
-   *   A target entity.
+   * @param \Drupal\Core\Database\StatementWrapper $results
+   *   Query results to be prepared into an array.
    * @param bool $nest_results
-   *   (optional) Whether the results should be returned in a nested structure.
-   *   Defaults to TRUE.
-   * @param int $limit
-   *   (optional) Limit number of results returned. Defaults to 0, which
-   *   will return all sources.
+   *   Whether the results should be returned in a nested structure.
    *
-   * @return ($nest_results is true ? array<string, array<string, array<array{source_langcode: string, source_vid: string, method: string, field_name: string, count: string}>>> : array<array{source_type: string, source_id: string, source_langcode: string, source_vid: string, method: string, field_name: string, count: string}>)
+   * @return array
    *   A nested array with usage data. The first level is keyed by the type of
    *   the source entities, the second by the source id. The value of the second
    *   level contains all other information like the method used by the source
@@ -152,7 +201,7 @@ interface EntityUsageInterface {
    *   $nest_results is FALSE, the returned array will be an indexed array where
    *   values are arrays containing all DB columns for the records.
    */
-  public function listSources(EntityInterface $target_entity, $nest_results = TRUE, int $limit = 0);
+  public function prepareListSources($results, $nest_results);

   /**
    * Provide a list of all referenced target entities for a source entity.
diff --git a/src/Form/EntityUsageSettingsForm.php b/src/Form/EntityUsageSettingsForm.php
index 94faf65..11baa59 100644
--- a/src/Form/EntityUsageSettingsForm.php
+++ b/src/Form/EntityUsageSettingsForm.php
@@ -259,6 +259,12 @@ class EntityUsageSettingsForm extends ConfigFormBase {
       '#min' => 1,
       '#step' => 1,
     ];
+    $form['generic_settings']['usage_controller_subquery'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Improve usage page performance for a large number of entities.'),
+      '#description' => $this->t('If enabled, usage records will be retrieved per page instead of all at once. This is helpful for massive numbers of entities which cause the usage page to break.'),
+      '#default_value' => (bool) $config->get('usage_controller_subquery'),
+    ];

     return parent::buildForm($form, $form_state);
   }
@@ -283,7 +289,8 @@ class EntityUsageSettingsForm extends ConfigFormBase {
       ->set('delete_warning_message_entity_types', array_values(array_filter($form_state->getValue('delete_warning_message_entity_types')['entity_types'])))
       ->set('track_enabled_plugins', array_values(array_filter($form_state->getValue('track_enabled_plugins')['plugins'])))
       ->set('site_domains', $site_domains)
-      ->set('usage_controller_items_per_page', $form_state->getValue('usage_controller_items_per_page'))
+      ->set('usage_controller_items_per_page', (bool) $form_state->getValue('usage_controller_items_per_page'))
+      ->set('usage_controller_subquery', $form_state->getValue('usage_controller_subquery'))
       ->save();

     if ($local_tasks_updated) {
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 761abe0..4c5bc71 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -69,18 +69,34 @@ class RouteSubscriber extends RouteSubscriberBase {
         ],
       ];

-      $route = new Route(
-        $template . '/usage',
-        [
-          '_controller' => '\Drupal\entity_usage\Controller\LocalTaskUsageController::listUsageLocalTask',
-          '_title_callback' => '\Drupal\entity_usage\Controller\LocalTaskUsageController::getTitleLocalTask',
-        ],
-        [
-          '_permission' => 'access entity usage statistics',
-          '_custom_access' => '\Drupal\entity_usage\Controller\LocalTaskUsageController::checkAccessLocalTask',
-        ],
-        $options
-      );
+      if ($this->config->get('entity_usage.settings')->get('usage_controller_subquery')) {
+        $route = new Route(
+          $template . '/usage',
+          [
+            '_controller' => '\Drupal\entity_usage\Controller\LocalTaskUsageSubQueryController::listUsageLocalTask',
+            '_title_callback' => '\Drupal\entity_usage\Controller\LocalTaskUsageSubQueryController::getTitleLocalTask',
+          ],
+          [
+            '_permission' => 'access entity usage statistics',
+            '_custom_access' => '\Drupal\entity_usage\Controller\LocalTaskUsageSubQueryController::checkAccessLocalTask',
+          ],
+          $options
+        );
+      }
+      else {
+        $route = new Route(
+          $template . '/usage',
+          [
+            '_controller' => '\Drupal\entity_usage\Controller\LocalTaskUsageController::listUsageLocalTask',
+            '_title_callback' => '\Drupal\entity_usage\Controller\LocalTaskUsageController::getTitleLocalTask',
+          ],
+          [
+            '_permission' => 'access entity usage statistics',
+            '_custom_access' => '\Drupal\entity_usage\Controller\LocalTaskUsageController::checkAccessLocalTask',
+          ],
+          $options
+        );
+      }

       $collection->add("entity.$entity_type_id.entity_usage", $route);
     }
diff --git a/tests/src/FunctionalJavascript/ListControllerTest.php b/tests/src/FunctionalJavascript/ListControllerTest.php
index 9a18c9f..cd72aab 100644
--- a/tests/src/FunctionalJavascript/ListControllerTest.php
+++ b/tests/src/FunctionalJavascript/ListControllerTest.php
@@ -117,6 +117,43 @@ class ListControllerTest extends EntityUsageJavascriptTestBase {
     $second_row_status = $this->xpath('//table/tbody/tr[2]/td[5]')[0];
     $this->assertEquals('Published', $second_row_status->getText());

+    // Visit the subquery version of the usage page that tracks usage of node 1
+    // and check everything is there.
+    $this->drupalGet("/admin/content/entity-usage-subquery/node/{$node1->id()}");
+    $assert_session->pageTextContains('Entity usage information for Node 1');
+
+    // Check table headers are present.
+    $assert_session->pageTextContains('Entity');
+    $assert_session->pageTextContains('Type');
+    $assert_session->pageTextContains('Language');
+    $assert_session->pageTextContains('Field name');
+    $assert_session->pageTextContains('Status');
+
+    // Make sure that all elements of the table are the expected ones.
+    $first_row_title_link = $assert_session->elementExists('xpath', '//table/tbody/tr[1]/td[1]/a');
+    $this->assertEquals('Node 3', $first_row_title_link->getText());
+    $this->assertStringContainsString($node3->toUrl()->toString(), $first_row_title_link->getAttribute('href'));
+    $first_row_type = $this->xpath('//table/tbody/tr[1]/td[2]')[0];
+    $this->assertEquals('Content', $first_row_type->getText());
+    $first_row_langcode = $this->xpath('//table/tbody/tr[1]/td[3]')[0];
+    $this->assertEquals('English', $first_row_langcode->getText());
+    $first_row_field_label = $this->xpath('//table/tbody/tr[1]/td[4]')[0];
+    $this->assertEquals('Text', $first_row_field_label->getText());
+    $first_row_status = $this->xpath('//table/tbody/tr[1]/td[5]')[0];
+    $this->assertEquals('Published', $first_row_status->getText());
+
+    $second_row_title_link = $assert_session->elementExists('xpath', '//table/tbody/tr[2]/td[1]/a');
+    $this->assertEquals('Node 2', $second_row_title_link->getText());
+    $this->assertStringContainsString($node2->toUrl()->toString(), $second_row_title_link->getAttribute('href'));
+    $second_row_type = $this->xpath('//table/tbody/tr[2]/td[2]')[0];
+    $this->assertEquals('Content', $second_row_type->getText());
+    $second_row_langcode = $this->xpath('//table/tbody/tr[2]/td[3]')[0];
+    $this->assertEquals('English', $second_row_langcode->getText());
+    $second_row_field_label = $this->xpath('//table/tbody/tr[2]/td[4]')[0];
+    $this->assertEquals('Related nodes', $second_row_field_label->getText());
+    $second_row_status = $this->xpath('//table/tbody/tr[2]/td[5]')[0];
+    $this->assertEquals('Published', $second_row_status->getText());
+
     // If we unpublish Node 2 its status is correctly reflected.
     /** @var \Drupal\node\NodeInterface $node2 */
     $node2->setUnpublished()->save();
@@ -124,6 +161,11 @@ class ListControllerTest extends EntityUsageJavascriptTestBase {
     $second_row_status = $this->xpath('//table/tbody/tr[2]/td[5]')[0];
     $this->assertEquals('Unpublished', $second_row_status->getText());

+    // Check the subquery version of the usage page.
+    $this->drupalGet("/admin/content/entity-usage-subquery/node/{$node1->id()}");
+    $second_row_status = $this->xpath('//table/tbody/tr[2]/td[5]')[0];
+    $this->assertEquals('Unpublished', $second_row_status->getText());
+
     // Artificially create some garbage in the database and make sure it doesn't
     // show up on the usage page.
     \Drupal::database()->insert('entity_usage')
@@ -155,6 +197,19 @@ class ListControllerTest extends EntityUsageJavascriptTestBase {
     $assert_session->pageTextNotContains('Used in');
     $assert_session->pageTextNotContains('Translations or previous revisions');

+    // Check the subquery version of the usage page.
+    $this->drupalGet("/admin/content/entity-usage-subquery/node/{$node1->id()}");
+    $assert_session->pageTextContains('Entity usage information for Node 1');
+    $assert_session->elementNotContains('css', 'table', '1234');
+    $assert_session->elementNotContains('css', 'table', 'user');
+    $assert_session->elementNotContains('css', 'table', '5678');
+    $assert_session->elementNotContains('css', 'table', 'field_foo');
+
+    // When all usages are shown on their default revisions, we don't see the
+    // extra column.
+    $assert_session->pageTextNotContains('Used in');
+    $assert_session->pageTextNotContains('Translations or previous revisions');
+
     // If some sources reference our entity in a previous revision, an
     // additional column is shown.
     $node2->field_eu_test_related_nodes = NULL;
@@ -170,6 +225,17 @@ class ListControllerTest extends EntityUsageJavascriptTestBase {
     // Make sure we only have 2 rows (so no previous revision shows up).
     $this->assertEquals(2, count($this->xpath('//table/tbody/tr')));

+    // Check the subquery version of the usage page.
+    $this->drupalGet("/admin/content/entity-usage-subquery/node/{$node1->id()}");
+    $assert_session->pageTextContains('Used in');
+    $second_row_used_in = $this->xpath('//table/tbody/tr[1]/td[6]')[0];
+    $this->assertEquals('Default', $second_row_used_in->getText());
+    $second_row_used_in = $this->xpath('//table/tbody/tr[2]/td[6]')[0];
+    $this->assertEquals('Translations or previous revisions', $second_row_used_in->getText());
+
+    // Make sure we only have 2 rows (so no previous revision shows up).
+    $this->assertEquals(2, count($this->xpath('//table/tbody/tr')));
+
     // Create some additional languages.
     foreach (['es'] as $langcode) {
       ConfigurableLanguage::createFromLangcode($langcode)->save();
@@ -217,10 +283,22 @@ class ListControllerTest extends EntityUsageJavascriptTestBase {
     $this->assertEquals('Translations or previous revisions', $second_row_used_in->getText());
     $this->assertEquals(2, count($this->xpath('//table/tbody/tr')));

+    // Subquery usage now should be the same as before.
+    $this->drupalGet("/admin/content/entity-usage-subquery/node/{$node1->id()}");
+    $assert_session->pageTextContains('Used in');
+    $second_row_used_in = $this->xpath('//table/tbody/tr[1]/td[6]')[0];
+    $this->assertEquals('Default', $second_row_used_in->getText());
+    $second_row_used_in = $this->xpath('//table/tbody/tr[2]/td[6]')[0];
+    $this->assertEquals('Translations or previous revisions', $second_row_used_in->getText());
+    $this->assertEquals(2, count($this->xpath('//table/tbody/tr')));
+
     // Verify that it's possible to control the number of items per page.
     // Initially we have no pager since two rows fit in one page.
     $this->drupalGet("/admin/content/entity-usage/node/{$node1->id()}");
     $assert_session->elementNotExists('css', 'ul.pager__items');
+    // Check the subquery version of the usage page.
+    $this->drupalGet("/admin/content/entity-usage-subquery/node/{$node1->id()}");
+    $assert_session->elementNotExists('css', 'ul.pager__items');
     $this->drupalGet('/admin/config/entity-usage/settings');
     // Set items per page to 1.
     $page->find('css', 'input[name="usage_controller_items_per_page"]')
@@ -240,6 +318,18 @@ class ListControllerTest extends EntityUsageJavascriptTestBase {
     $first_row_title_link = $assert_session->elementExists('xpath', '//table/tbody/tr[1]/td[1]/a');
     $this->assertEquals('Node 2', $first_row_title_link->getText());
     $assert_session->elementNotExists('xpath', '//table/tbody/tr[2]');
+    // Check the subquery version of the usage page.
+    $this->drupalGet("/admin/content/entity-usage-subquery/node/{$node1->id()}");
+    // Pager is there.
+    $pager_element = $assert_session->elementExists('css', 'ul.pager__items');
+    // First node is on the first page, the second node on the next page.
+    $first_row_title_link = $assert_session->elementExists('xpath', '//table/tbody/tr[1]/td[1]/a');
+    $this->assertEquals('Node 3', $first_row_title_link->getText());
+    $assert_session->elementNotExists('xpath', '//table/tbody/tr[2]');
+    $pager_element->find('css', '.pager__item--next a')->click();
+    $first_row_title_link = $assert_session->elementExists('xpath', '//table/tbody/tr[1]/td[1]/a');
+    $this->assertEquals('Node 2', $first_row_title_link->getText());
+    $assert_session->elementNotExists('xpath', '//table/tbody/tr[2]');
   }

 }
