diff --git a/entity_embed.routing.yml b/entity_embed.routing.yml
index 5dd3c30b010eba6801f80fcffc2e1b4b192056ae..fc6df1ae4635592898e072c97ec352bff0f7d1fe 100644
--- a/entity_embed.routing.yml
+++ b/entity_embed.routing.yml
@@ -7,11 +7,11 @@ entity_embed.dialog:
     _embed_button_editor_access: 'TRUE'

 entity_embed.edit_embedded_entity:
-  path: '/entity-embed/edit-embedded/{type}/{uuid}'
+  path: '/entity-embed/edit-embedded/{entity_type}/{uuid}'
   defaults:
     _controller: '\Drupal\entity_embed\Controller\EditEmbeddedEntity::edit'
     _title: 'Edit entity'
   requirements:
     # This controller returns a redirect. We set access to TRUE and let the
-    # redirected-to destination determin access control.
+    # target destination determine final access level.
     _access: 'TRUE'
diff --git a/src/Controller/EditEmbeddedEntity.php b/src/Controller/EditEmbeddedEntity.php
index 8318e31c88a1e183c8a49104781b4bde417cf4d9..964a04c19d81a5764646543a78e041b186af9cf2 100644
--- a/src/Controller/EditEmbeddedEntity.php
+++ b/src/Controller/EditEmbeddedEntity.php
@@ -3,25 +3,83 @@
 namespace Drupal\entity_embed\Controller;

 use Drupal\Core\Controller\ControllerBase;
+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Logger\RfcLogLevel;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\Response;

 class EditEmbeddedEntity extends ControllerBase {

   /**
-   * Redirects to an entity edit form based on its type and uuid.
+   * The entity repository service.
    *
-   * @param string $type
+   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   */
+  protected $entityRepository;
+
+  /**
+   * The logger channel for this module.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   */
+  protected $loggerChannel;
+
+  /**
+   * Constructs a new instance of the class.
+   *
+   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   *   The entity repository service.
+   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   *   The logger channel service.
+   */
+  public function __construct(
+    EntityRepositoryInterface $entityRepository,
+    LoggerChannelInterface $loggerChannel,
+  ) {
+    $this->entityRepository = $entityRepository;
+    $this->loggerChannel = $loggerChannel;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('entity.repository'),
+      $container->get('logger.factory')->get('entity_embed'),
+    );
+  }
+
+  /**
+   * Redirects to an entity based on its type and UUID.
+   *
+   * @param string $entity_type
    *   The entity type.
    * @param string $uuid
    *   The entity uuid.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
-   *   The redirect destination response.
+   * @return \Symfony\Component\HttpFoundation\Response
+   *   Either a regular response or a redirection.
    */
-  public function edit(string $type, string $uuid) {
-    $entity = \Drupal::service('entity.repository')->loadEntityByUuid($type, $uuid);
-    return $this->redirect("entity.$type.edit_form", [$type => $entity->id()]);
-  }
+  public function edit(string $entity_type, string $uuid): Response {
+    $entity = $this->entityRepository->loadEntityByUuid($entity_type, $uuid);

+    // For content entity types that do not declare their expected edit link.
+    foreach (['edit-form', 'canonical'] as $operation_link) {
+      if ($entity->hasLinkTemplate($operation_link)) {
+        return $this->redirect($entity->toUrl($operation_link)->getRouteName(), [$entity_type => $entity->id()]);
+      }
+    }

+    $message = $this->t('The type (%entity_type) of the embedded entity (%entity_label, ID: %entity_id) does not support neither editing nor canonical linking mode.', [
+      '%entity_type' => $entity_type,
+      '%entity_label' => $entity->label(),
+      '%entity_id' => $entity->id(),
+    ]);
+    $this->loggerChannel->log(RfcLogLevel::INFO, $message);
+
+    return new Response($this->t($message->render()), 200);
+  }

 }
