diff --git a/conditional_fields.module b/conditional_fields.module
index 9532f26..64e70fd 100644
--- a/conditional_fields.module
+++ b/conditional_fields.module
@@ -5,13 +5,13 @@
  * Contains conditional_fields.module.
  */
 
+use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\WidgetInterface;
 use Drupal\Core\Url;
-use Drupal\conditional_fields\ConditionalFieldsFormHelper;
 use Drupal\conditional_fields\DependencyHelper;
 
 /**
@@ -96,6 +96,32 @@ function conditional_fields_conditional_fields_alter(&$fields, $entity_type, $bu
   asort($fields);
 }
 
+/**
+ * Gets the paragraph's bundle from a form field.
+ */
+function conditional_fields_get_paragraph_bundle($field, $form) {
+  $closest_parent = [];
+  $last_subform = FALSE;
+
+  // Finds closest subform postition.
+  foreach ($field['#array_parents'] as $index => $parent) {
+    if ($parent === 'subform') {
+      $last_subform = $index;
+    }
+  }
+
+  if (!$last_subform) {
+    return FALSE;
+  }
+
+  // Gets the route to the closest subform.
+  $closest_parent = array_slice($field['#array_parents'], 0, $last_subform);
+  // Gets the paragraph's bundle if any...
+  $bundle = NestedArray::getValue($form, array_merge($closest_parent, ['#paragraph_type']));
+
+  return $bundle && !is_array($bundle) ? $bundle : FALSE;
+}
+
 /**
  * Processes form elements with dependencies.
  *
@@ -144,6 +170,11 @@ function conditional_fields_element_after_build($element, FormStateInterface &$f
         $bundle = $bundle->getPluginId();
       }
 
+      $paragraph_bundle = conditional_fields_get_paragraph_bundle($field, $form);
+      $bundle = $paragraph_bundle ?: $bundle;
+
+      $is_related_to_paragraph = (bool) $paragraph_bundle;
+      $entity_type = $is_related_to_paragraph ? 'paragraph' : $entity_type;
       $dependencies = conditional_fields_load_dependencies($entity_type, $bundle);
 
       if (!$dependencies) {
@@ -151,19 +182,57 @@ function conditional_fields_element_after_build($element, FormStateInterface &$f
       }
 
       $field_name = reset($field['#array_parents']);
+
+      // We get the name of the field inside the the paragraph where the
+      // conditions are being applied, instead of the field name where the
+      // paragraph is.
+      if ($is_related_to_paragraph) {
+        foreach ($field['#array_parents'] as $parent) {
+          if (isset($dependencies['dependents'][$parent])) {
+            $field_name = $parent;
+            break;
+          }
+
+          if (isset($dependencies['dependees'][$parent])) {
+            $field_name = $parent;
+            break;
+          }
+        }
+
+        if ($parent != $field_name || $first_parent == $field_name || !isset($field['#type'])) {
+          return $element;
+        }
+      }
+
+      $paragraph_info = [];
+
+      if ($is_related_to_paragraph) {
+        $paragraph_info['entity_type'] = $entity_type;
+        $paragraph_info['bundle'] = $bundle;
+        $paragraph_info['paragraph_field'] = $first_parent;
+        $paragraph_info['array_parents'] = $element['#array_parents'];
+      }
+
       // Attach dependent.
       if (isset($dependencies['dependents'][$field_name])) {
         foreach ($dependencies['dependents'][$field_name] as $id => $dependency) {
           if (!isset($form['#conditional_fields'][$field_name]['dependees'][$id]) || conditional_fields_is_priority_field($field)) {
-            conditional_fields_attach_dependency($form, $form_state, ['#field_name' => $dependency['dependee']], $field, $dependency['options'], $id);
+            if ($is_related_to_paragraph) {
+              $paragraph_info['field'] = $field_name;
+            }
+            conditional_fields_attach_dependency($form, $form_state, ['#field_name' => $dependency['dependee']], $field, $dependency['options'], $id, $paragraph_info);
           }
         }
       }
 
+      // Attach dependee.
       if (isset($dependencies['dependees'][$field_name])) {
         foreach ($dependencies['dependees'][$field_name] as $id => $dependency) {
           if (!isset($form['#conditional_fields'][$field_name]['dependents'][$id]) || conditional_fields_is_priority_field($field)) {
-            conditional_fields_attach_dependency($form, $form_state, $field, ['#field_name' => $dependency['dependent']], $dependency['options'], $id);
+            if ($is_related_to_paragraph) {
+              $paragraph_info['field'] = $field_name;
+            }
+            conditional_fields_attach_dependency($form, $form_state, $field, ['#field_name' => $dependency['dependent']], $dependency['options'], $id, $paragraph_info);
           }
         }
       }
@@ -177,13 +246,30 @@ function conditional_fields_element_after_build($element, FormStateInterface &$f
  * Loads all dependencies from the database for a given bundle.
  */
 function conditional_fields_load_dependencies($entity_type, $bundle) {
-  static $dependency_helper;
-  if (!isset($dependency_helper)) {
-    $dependency_helper = new DependencyHelper($entity_type, $bundle);
-  }
+  $dependency_helper = new DependencyHelper($entity_type, $bundle);
   return $dependency_helper->getBundleDependencies();
 }
 
+/**
+ * From an array of parents, returns values like field_* and indexes.
+ *
+ * To simplify the relationship between elements, conditional fields and
+ * even error messages. Having only a few specific parents and generate strings
+ * and compare arrays with it makes matching possible despite small differences.
+ */
+function conditional_fields_get_significant_parents(array $parents) {
+  $significant_parents = [];
+  foreach ($parents as $parent) {
+    if (strpos($parent, 'field_')===0) {
+      $significant_parents[] = $parent;
+    }
+    if (is_int($parent) || ctype_digit($parent)) {
+      $significant_parents[] = $parent;
+    }
+  }
+  return $significant_parents;
+}
+
 /**
  * Attaches a single dependency to a form.
  *
@@ -238,7 +324,7 @@ function conditional_fields_load_dependencies($entity_type, $bundle) {
  *   Note that you don't need to manually set all these options, since default
  *   settings are always provided.
  */
-function conditional_fields_attach_dependency(&$form, &$form_state, $dependee, $dependent, $options, $id = 0) {
+function conditional_fields_attach_dependency(&$form, &$form_state, $dependee, $dependent, $options, $id = 0, $paragraph_info = []) {
   module_load_include('inc', 'conditional_fields', 'conditional_fields.api');
   // The absence of the $id parameter identifies a custom dependency.
   if (!$id) {
@@ -267,17 +353,25 @@ function conditional_fields_attach_dependency(&$form, &$form_state, $dependee, $
   // Attach dependee.
   // Use the #array_parents property of the dependee instead of #field_parents
   // since we will need access to the full structure of the widget.
-  if (isset($dependee['#parents'])) {
-    $form['#conditional_fields'][$dependee['#parents'][0]]['parents'] = $dependee['#array_parents'];
-    $form['#conditional_fields'][$dependee['#parents'][0]]['dependents'][$id] = [
+  if (isset($dependee['#array_parents'])) {
+
+    $dependee_index = $dependee['#parents'][0];
+    if ($paragraph_info) {
+      $dependee_index = implode('.', conditional_fields_get_significant_parents($dependee['#parents'])) . '.dependee';
+    }
+
+    // $form['#conditional_fields'][$dependee_index]['id'] = $dependee['#id'];
+    $form['#conditional_fields'][$dependee_index]['is_from_paragraph'] = (bool) $paragraph_info;
+    $form['#conditional_fields'][$dependee_index]['parents'] = $dependee['#array_parents'];
+    $form['#conditional_fields'][$dependee_index]['dependents'][$id] = [
       'dependent' => $dependent['#field_name'],
       'options' => $options,
     ];
   }
 
   // Attach dependent.
-  if (!empty($dependent['#parents'])) {
-    $dependent_parents = $dependent['#parents'];
+  if (!empty($dependent['#array_parents'])) {
+    $dependent_parents = $dependent['#array_parents'];
     // If the field type is Date, we need to remove the last "date" parent key,
     // since it is not part of the $form_state value when we validate it.
     if ($dependent['#type'] == 'date') {
@@ -287,9 +381,30 @@ function conditional_fields_attach_dependency(&$form, &$form_state, $dependee, $
   elseif (isset($dependent['#field_parents'])) {
     $dependent_parents = $dependent['#field_parents'];
   }
+
   if (isset($dependent_parents)) {
-    $form['#conditional_fields'][$dependent['#parents'][0]]['field_parents'] = $dependent_parents;
-    $form['#conditional_fields'][$dependent['#parents'][0]]['dependees'][$id] = [
+    $dependent_index = $dependent['#parents'][0];
+    if ($paragraph_info) {
+
+      $pos = array_search('subform', $dependent_parents, TRUE);
+      if ($pos !== FALSE) {
+        $dependent_parents = array_slice($dependent_parents, 0, $pos + 2);
+      }
+
+      $dependent_index .= '.' . $paragraph_info['field'] . '.' . $dependee['#field_name'] . '.dependent';
+      $dependent_index = implode('.', conditional_fields_get_significant_parents($dependent_parents)) . '.dependent';
+    }
+
+    // This worked to get the value_form when the value_form was an array.
+    if (isset($options['value_form'][0]['value']) && $paragraph_info) {
+      $options['value_form'] = $options['value_form'][0]['value'];
+    }
+
+    // $form['#conditional_fields'][$dependent_index]['id'] = $dependent['#id'];
+    $form['#conditional_fields'][$dependent_index]['is_from_paragraph'] = (bool) $paragraph_info;
+    $form['#conditional_fields'][$dependent_index]['field_parents'] = $dependent_parents;
+    $form['#conditional_fields'][$dependent_index]['array_parents'] = $paragraph_info['array_parents'] ?? [];
+    $form['#conditional_fields'][$dependent_index]['dependees'][$id] = [
       'dependee' => $dependee['#field_name'],
       'options' => $options,
     ];
diff --git a/src/ConditionalFieldsFormHelper.php b/src/ConditionalFieldsFormHelper.php
index 02fee9b..8b795dd 100644
--- a/src/ConditionalFieldsFormHelper.php
+++ b/src/ConditionalFieldsFormHelper.php
@@ -105,10 +105,17 @@ class ConditionalFieldsFormHelper {
       }
       $dependees = $dependent_info['dependees'];
 
-      $dependent_location = array_merge([], [$dependent]);
+      $dependent_location = $dependent_info['is_from_paragraph'] ?
+        $dependent_info['field_parents'] :
+        array_merge([], [$dependent]);
+
       $dependent_form_field = NestedArray::getValue($this->form, $dependent_location);
 
-      $states = $this->processDependeeFields($dependees, $dependent_form_field, $dependent_location, $states);
+      if ($dependent_info['is_from_paragraph']) {
+        $base_name = implode('.', array_slice(explode('.',$dependent), 0, -2));
+      }
+
+      $states = $this->processDependeeFields($dependees, $dependent_form_field, $dependent_location, $states, $base_name ?? '');
 
       if (empty($states)) {
         continue;
@@ -117,8 +124,16 @@ class ConditionalFieldsFormHelper {
       // Save the modified field back into the form.
       NestedArray::setValue($this->form, $dependent_location, $dependent_form_field);
 
+      $states_location = array_merge($dependent_location, ['#states']);
+
+      // Merge states in case there are previous states defined.
+      $new_states = array_merge(
+        NestedArray::getValue($this->form, $states_location) ?? [],
+        $this->mapStates($states)
+      );
+
       // Add the #states property to the dependent field.
-      NestedArray::setValue($this->form, array_merge($dependent_location, ['#states']), $this->mapStates($states));
+      NestedArray::setValue($this->form, $states_location, $new_states);
     }
 
     return $this;
@@ -127,11 +142,15 @@ class ConditionalFieldsFormHelper {
   /**
    * Determine and register dependee field effects.
    */
-  public function processDependeeFields($dependees, &$dependent_form_field = [], $dependent_location = [], $states = []) {
+  public function processDependeeFields($dependees, &$dependent_form_field = [], $dependent_location = [], $states = [], $base_name = '') {
     // Cycle the dependant's dependees.
     foreach ($dependees as $dependency) {
       $dependee = $dependency['dependee'];
 
+      if ($base_name) {
+        $dependee = $base_name. '.' . $dependee . '.dependee';
+      }
+
       if (empty($this->form['#conditional_fields'][$dependee])) {
         continue;
       }
@@ -372,7 +391,15 @@ class ConditionalFieldsFormHelper {
       return;
     }
 
-    $dependent = $form['#conditional_fields'][reset($element['#array_parents'])];
+    $dependent = $form['#conditional_fields'][reset($element['#array_parents'])] ?? FALSE;
+    $conditional_field_key = implode('.', conditional_fields_get_significant_parents($element['#array_parents'])) . '.dependent';
+    $dependent = $dependent ?: $form['#conditional_fields'][$conditional_field_key];
+
+    // @todo if there are not dependents, something might be wrong,
+    // however, this also avoids potential fatal errors.
+    if (!$dependent) {
+      return;
+    }
 
     // Check if this field's dependencies were triggered.
     $triggered = self::evaluateDependencies($dependent, $form, $form_state);
@@ -385,6 +412,7 @@ class ConditionalFieldsFormHelper {
           if (($result && $state == 'visible' && $triggered) || (!$result && $state == '!visible' && !$triggered)) {
             $return = TRUE;
           }
+
           if (($result && $state == 'required' && $triggered) || (!$result && $state == '!required' && !$triggered)) {
             $return = TRUE;
             $key_exists = NULL;
@@ -394,24 +422,36 @@ class ConditionalFieldsFormHelper {
               unset($input_state['add_more']);
             }
             $input_state = (is_null($input_state)) ? [] : $input_state;
-            if (isset($dependent['field_parents'][0])) {
+
+            $subform_key = \array_search('subform', $dependent['field_parents'], TRUE);
+            $field = NULL;
+            if ($subform_key !== FALSE) {
+              $subform_array = NestedArray::getValue($form, array_slice($dependent['field_parents'], 0, $subform_key + 1));
+              $entity_type = $subform_array['#entity_type'];
+              $field_name = $dependent['field_parents'][$subform_key + 1];
+              $field = FieldStorageConfig::loadByName($entity_type, $field_name);
+            } else if (isset($dependent['field_parents'][0])) {
               $field = FieldStorageConfig::loadByName($form['#entity_type'], $dependent['field_parents'][0]);
             }
-            else {
-              $field = NULL;
-            }
+
             if (empty($input_state)) {
               if (isset($element['widget']['#title'])) {
                 $title = $element['widget']['#title'];
               }
               elseif (isset($dependent['field_parents'][0])) {
-                $title = $dependent['field_parents'][0];
+                $title = $subform_key === FALSE ? $dependent['field_parents'][0] : $field_name;
               }
               elseif ($field) {
                 $title = $field->getName();
               }
 
-              $form_state->setError($element, t('%name is required.', ['%name' => $title]));
+              $element_to_set_error = $element['widget'][0]['value'] ?? $element['widget'][0] ?? $element['widget'] ?? $element;
+
+              if (isset($element_to_set_error['#title'])) {
+                $title = $element_to_set_error['#title'];
+              }
+
+              $form_state->setError($element_to_set_error, t('%name is required.', ['%name' => $title]));
             }
           }
         }
@@ -437,14 +477,24 @@ class ConditionalFieldsFormHelper {
     $errors = $form_state->getErrors();
 
     if ($errors) {
-      $error_key = reset($dependent['field_parents']);
+      // If there is a subform as a parent, assume this is a paragraph related.
+      $subform_key = array_search('subform', $dependent['field_parents'], true);
+
+      $error_key = $subform_key === FALSE ?
+        reset($dependent['field_parents']) :
+        implode('][', conditional_fields_get_significant_parents($dependent['field_parents']));
+
       foreach ($errors as $name => $error) {
         // An error triggered by this field might have been set on a descendant
         // element. This also means that so there can be multiple errors on the
         // same field (even though Drupal doesn't support multiple errors on the
         // same element).
+
+        $orig_name = $name;
+        $name = implode('][',conditional_fields_get_significant_parents(explode('][', $name)));
+
         if (strpos((string) $name, $error_key) === 0) {
-          $field_errors[$name] = $error;
+          $field_errors[$orig_name] = $error;
         }
       }
     }
@@ -476,19 +526,31 @@ class ConditionalFieldsFormHelper {
    *   Evaluated dependencies array.
    */
   protected static function evaluateDependencies(array $dependent, array $form, FormStateInterface $form_state, $grouping = TRUE) {
-    $dependencies = $form['#conditional_fields'][reset($dependent['field_parents'])]['dependees'];
+    if ($dependent['is_from_paragraph']) {
+      $significant_parents = conditional_fields_get_significant_parents($dependent['field_parents']);
+      $base_name = implode('.', array_slice($significant_parents, 0, -1));
+      $dependencies = $form['#conditional_fields'][implode('.', $significant_parents). '.dependent']['dependees'];
+    } else {
+      $dependencies = $form['#conditional_fields'][reset($dependent['field_parents'])]['dependees'];
+    }
+
     $evaluated_dependees = [];
 
     foreach ($dependencies as $dependency) {
       // Extract field values from submitted values.
       $dependee = $dependency['dependee'];
+      $dependee_key = $dependee;
+
+      if (isset($base_name)) {
+        $dependee_key = $base_name . '.' . $dependee . '.dependee';
+      }
 
       // Skip any misconfigured conditions.
-      if (empty($form['#conditional_fields'][$dependee]['parents'])) {
+      if (empty($form['#conditional_fields'][$dependee_key]['parents'])) {
         continue;
       }
 
-      $dependee_parents = $form['#conditional_fields'][$dependee]['parents'];
+      $dependee_parents = $form['#conditional_fields'][$dependee_key]['parents'];
 
       // We have the parents of the field, but depending on the entity type and
       // the widget type, they may include additional elements that are actually
@@ -496,7 +558,11 @@ class ConditionalFieldsFormHelper {
       // structure and use the parents only up to that depth.
       $dependee_parents_keys = array_flip($dependee_parents);
       $dependee_parent = NestedArray::getValue($form, array_slice($dependee_parents, 0, $dependee_parents_keys[$dependee]));
-      $values = self::formFieldGetValues($dependee_parent[$dependee], $form_state);
+      $values = self::formFieldGetValuesEasyPath($dependee_parent[$dependee], $form_state);
+
+      if (isset($values[0]['value'])) {
+        $values = $values[0]['value'];
+      }
 
       // Remove the language key.
       if (isset($dependee_parent[$dependee]['#language'], $values[$dependee_parent[$dependee]['#language']])) {
@@ -512,7 +578,7 @@ class ConditionalFieldsFormHelper {
     }
 
     if ($grouping) {
-      return self::evaluateGrouping($evaluated_dependees[reset($dependent['field_parents'])]);
+      return self::evaluateGrouping($evaluated_dependees[reset($dependent['field_parents'])] ?? FALSE);
     }
 
     return $evaluated_dependees;
@@ -555,26 +621,45 @@ class ConditionalFieldsFormHelper {
     $untriggered_dependents_errors = [];
 
     foreach ($form_state->getValue('conditional_fields_untriggered_dependents') as $field) {
-      $parent = [$field['parents'][0]];
-      $dependent = NestedArray::getValue($form, $parent);
-      $field_values_location = self::formFieldGetValues($dependent, $form_state);
+      // When there is a subform, the parent location is different.
+      $subform_location = \array_search('subform', $field['parents'], TRUE);
+      if ($subform_location !== FALSE) {
+        $dependent = NestedArray::getValue($form, $field['parents']);
+        $parents = \conditional_fields_get_significant_parents($field['parents']);
+        $field_name = end($parents);
+        $route_to_parent = array_slice($dependent['#parents'], 0, -1);
+        $field_values_location = NestedArray::getValue($form_state->getValues(), $route_to_parent);
+        $dependent_parents = $dependent['#parents'];
+        $values = $field_values_location[$field_name];
+      } else {
+        $parent = [$field['parents'][0]];
+        $dependent = NestedArray::getValue($form, $parent);
+        $field_values_location = self::formFieldGetValues($dependent, $form_state);
+
+        $route_to_parent = array_slice($dependent['#parents'], 0, -1);
+        $field_values_location = NestedArray::getValue($form_state->getValues(), $route_to_parent);
+
+
+        $dependent_parents = $dependent['#parents'];
+        $field_name = reset($dependent['#array_parents']);
+        $values = $field_values_location[$field_name];
+      }
 
       // If we couldn't find a location for the field's submitted values, let
       // the validation errors pass through to avoid security holes.
-      if (!isset($field_values_location[reset($dependent['#array_parents'])])) {
+      if (!isset($field_values_location[$field_name])) {
         if (!empty($field['errors'])) {
           $untriggered_dependents_errors = array_merge($untriggered_dependents_errors, $field['errors']);
         }
         continue;
       }
-
       // Save the changed array back in place.
       // Do not use form_set_value() since it assumes
       // that the values are located at
       // $form_state['values'][ ... $element['#parents'] ... ], while the
       // documentation of hook_field_widget_form() states that field values are
       // $form_state['values'][ ... $element['#field_parents'] ... ].
-      NestedArray::setValue($form_state['values'], $dependent['#field_parents'], $field_values_location);
+      NestedArray::setValue($form_state->getValues(), $dependent_parents, $values);
 
       if (!empty($field['errors'])) {
         $untriggered_dependents_errors = array_merge($untriggered_dependents_errors, $field['errors']);
@@ -624,6 +709,31 @@ class ConditionalFieldsFormHelper {
     return NestedArray::getValue($form_state->getValues(), $parents);
   }
 
+  /**
+   * Gets a form state value while ignoring if there is a missing parent key.
+   *
+   * This function is made because there is not clear pattern to get a form
+   * value from an element. Using #field_parents or #array_parents or #parents
+   * sometimes the form value is not precisely there, so this function avoids
+   * when parent keys are not found an tries the next parent. Only returns NULL
+   * if there wasn't a single match.
+   */
+  protected static function formFieldGetValuesEasyPath($element, FormStateInterface $form_state) {
+    // Fall back to #parents to support custom dependencies.
+    $parents = !empty($element['#array_parents']) ? $element['#array_parents'] : $element['#parents'];
+
+    $one_key_value_found = FALSE;
+    $fs = $form_state->getValues();
+    foreach ($parents as $parent) {
+      if (isset($fs[$parent])) {
+        $one_key_value_found = TRUE;
+        $fs = $fs[$parent];
+      }
+    }
+
+    return $one_key_value_found ? $fs : NULL;
+  }
+
   /**
    * Evaluate if a dependency meets the requirements to be triggered.
    *
