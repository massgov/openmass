diff --git a/js/entity_reference_tree.js b/js/entity_reference_tree.js
index fc917f0..3b732df 100644
--- a/js/entity_reference_tree.js
+++ b/js/entity_reference_tree.js
@@ -21,6 +21,18 @@
             const entityType = $("#entity-reference-tree-entity-type").val();
             const bundle = $("#entity-reference-tree-entity-bundle").val();
             const token = settings["entity_tree_token_" + fieldEditName];
+
+            const entityReferenceTreeWidget =
+              settings["entityReferenceTreeWidget"] ? (
+                settings["entityReferenceTreeWidget"][fieldEditName] ?
+                  settings["entityReferenceTreeWidget"][fieldEditName] :
+                  []
+              ) : [];
+            const auto_check_ancestors = entityReferenceTreeWidget['auto_check_ancestors'];
+            const auto_uncheck_ancestors = entityReferenceTreeWidget['auto_uncheck_ancestors'];
+            const auto_check_descendants = entityReferenceTreeWidget['auto_check_descendants'];
+            const auto_uncheck_descendants = entityReferenceTreeWidget['auto_uncheck_descendants'];
+
             const idIsString = bundle === "*";
             const limit = parseInt(settings["tree_limit_" + fieldEditName]);
             let selectedNodes;
@@ -97,7 +109,7 @@
               		// No limit.
               		return true;
               	}
-                
+
               },
               plugins: ["search", "changed", "checkbox", "conditionalselect"]
             });
@@ -113,6 +125,38 @@
               const choosedNodes = data.selected;
               const r = [];
 
+              if (data.action == 'select_node') {
+                // Select ancestors when node is selected.
+                if (auto_check_ancestors) {
+                  data.node.parents.forEach((parent) => {
+                    treeContainer.jstree('select_node', parent);
+                  });
+                }
+
+                // Select descendants when node is selected.
+                if (auto_check_descendants) {
+                  data.node.children_d.forEach((child) => {
+                    treeContainer.jstree('select_node', child);
+                  });
+                }
+              }
+
+              if (data.action == 'deselect_node') {
+                // Deselect ancestors when node is deselected.
+                if (auto_uncheck_ancestors) {
+                  data.node.parents.forEach((parent) => {
+                    treeContainer.jstree('deselect_node', parent);
+                  });
+                }
+
+                // Deselect descendants when node is deselected.
+                if (auto_uncheck_descendants) {
+                  data.node.children_d.forEach((child) => {
+                    treeContainer.jstree('deselect_node', child);
+                  });
+                }
+              }
+
               for (let i = 0; i < choosedNodes.length; i++) {
                 const node = data.instance.get_node(choosedNodes[i]);
                 // node text escaping double quote.
diff --git a/src/Plugin/Field/FieldWidget/EntityReferenceTreeWidget.php b/src/Plugin/Field/FieldWidget/EntityReferenceTreeWidget.php
index af8511b..5e5bb93 100644
--- a/src/Plugin/Field/FieldWidget/EntityReferenceTreeWidget.php
+++ b/src/Plugin/Field/FieldWidget/EntityReferenceTreeWidget.php
@@ -99,6 +99,12 @@ class EntityReferenceTreeWidget extends EntityReferenceAutocompleteWidget {
       ],
     ];
 
+    // Widget settings.
+    $settings = $this->getSettings();
+
+    // Pass data to js file.
+    $form['#attached']['drupalSettings']['entityReferenceTreeWidget'][$edit_id] = $settings;
+
     return $arr_element;
   }
 
@@ -122,6 +128,15 @@ class EntityReferenceTreeWidget extends EntityReferenceAutocompleteWidget {
         'label' => '',
         // Dialog title.
         'dialog_title' => '',
+
+        // Auto check.
+        'auto_check_ancestors' => 0,
+        'auto_check_descendants' => 0,
+
+        // Auto uncheck.
+        'auto_uncheck_ancestors' => 0,
+        'auto_uncheck_descendants' => 0,
+
     ] + parent::defaultSettings();
   }
 
@@ -168,6 +183,30 @@ class EntityReferenceTreeWidget extends EntityReferenceAutocompleteWidget {
       '#default_value' => $this->getSetting('dialog_title'),
     ];
 
+    $element['auto_check_ancestors'] = [
+      '#type' => 'checkbox',
+      '#title' => 'Automatically check ancestors when a node is checked.',
+      '#default_value' => $this->getSetting('auto_check_ancestors'),
+   ];
+
+    $element['auto_uncheck_ancestors'] = [
+      '#type' => 'checkbox',
+      '#title' => 'Automatically uncheck ancestors when a node is unchecked.',
+      '#default_value' => $this->getSetting('auto_uncheck_ancestors'),
+    ];
+
+    $element['auto_check_descendants'] = [
+      '#type' => 'checkbox',
+      '#title' => 'Automatically check descendants when a node is checked.',
+      '#default_value' => $this->getSetting('auto_check_descendants'),
+    ];
+
+    $element['auto_uncheck_descendants'] = [
+      '#type' => 'checkbox',
+      '#title' => 'Automatically uncheck descendants when a node is unchecked.',
+      '#default_value' => $this->getSetting('auto_uncheck_descendants'),
+    ];
+
     return $element;
   }
 
@@ -186,7 +225,27 @@ class EntityReferenceTreeWidget extends EntityReferenceAutocompleteWidget {
     if ($label = $this->getSetting('dialog_title')) {
       $summary[] = t('Dialog title: @title', ['@title' => $label]);
     }
-    
+
+    $summary[] = t('Check ancestors when node is checked: @yesno', [
+      '@yesno' => $this->getSetting('auto_check_ancestors') ?
+        $this->t('Yes') : $this->t('No')
+    ]);
+
+    $summary[] = t('Check descendants when node is checked: @yesno', [
+      '@yesno' => $this->getSetting('auto_check_descendants') ?
+        $this->t('Yes') : $this->t('No')
+    ]);
+
+    $summary[] = t('Uncheck ancestors when node is unchecked: @yesno', [
+      '@yesno' => $this->getSetting('auto_uncheck_ancestors') ?
+        $this->t('Yes') : $this->t('No')
+    ]);
+
+    $summary[] = t('Uncheck descendants when node is unchecked: @yesno', [
+      '@yesno' => $this->getSetting('auto_uncheck_descendants') ?
+        $this->t('Yes') : $this->t('No')
+    ]);
+
     return $summary;
   }
 }
