diff --git a/src/Form/HierarchyChildrenForm.php b/src/Form/HierarchyChildrenForm.php
index fc94005..87419e8 100644
--- a/src/Form/HierarchyChildrenForm.php
+++ b/src/Form/HierarchyChildrenForm.php
@@ -4,14 +4,9 @@ namespace Drupal\entity_hierarchy\Form;
 
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Drupal\Core\Entity\EntityManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
-use Drupal\entity_hierarchy\Information\ParentCandidateInterface;
-use Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface;
-use Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory;
-use Drupal\entity_hierarchy\Storage\NestedSetStorageFactory;
 use Drupal\Core\Entity\ContentEntityForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -20,8 +15,6 @@ use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
  * Defines a form for re-ordering children.
  */
 class HierarchyChildrenForm extends ContentEntityForm {
-  const CHILD_ENTITIES_STORAGE = 'child_entities';
-
   /**
    * The hierarchy being displayed.
    *
@@ -84,6 +77,8 @@ class HierarchyChildrenForm extends ContentEntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $cache = (new CacheableMetadata())->addCacheableDependency($this->entity);
 
+    $form['#attached']['library'][] = 'entity_hierarchy/entity_hierarchy.nodetypeform';
+
     /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
     $fields = $this->parentCandidate->getCandidateFields($this->entity);
     if (!$fields) {
@@ -118,22 +113,47 @@ class HierarchyChildrenForm extends ContentEntityForm {
         '#submit' => ['::updateField'],
       ];
     }
+    /** @var \PNX\NestedSet\Node $node */
     /** @var \PNX\NestedSet\Node[] $children */
+    /** @var \PNX\NestedSet\NodeKey $nodeKey */
     /** @var \PNX\NestedSet\NestedSetInterface $storage */
+    $nodeKey = $this->nodeKeyFactory->fromEntity($this->entity);
     $storage = $this->nestedSetStorageFactory->get($fieldName, $this->entity->getEntityTypeId());
-    $children = $storage->findChildren($this->nodeKeyFactory->fromEntity($this->entity));
+    $children = $storage->findDescendants($nodeKey, 2);
+    $node = $storage->getNode($nodeKey);
+
+    // Ensure entity depth does not exceed 9
+    $baseDepth = ($node) ? $node->getDepth() : 0;
+
     $childEntities = $this->entityTreeNodeMapper->loadAndAccessCheckEntitysForTreeNodes($this->entity->getEntityTypeId(), $children, $cache);
-    $form_state->setTemporaryValue(self::CHILD_ENTITIES_STORAGE, $childEntities);
+
     $form['#attached']['library'][] = 'entity_hierarchy/entity_hierarchy.nodetypeform';
     $form['children'] = [
       '#type' => 'table',
-      '#header' => [t('Child'), t('Type'), t('Weight'), t('Operations')],
+      '#header' => [
+        t('Child'),
+        t('Type'),
+        t('Weight'),
+        [
+          'data' => t('Operations'),
+          'colspan' => 3,
+        ],
+      ],
       '#tabledrag' => [
+        [
+          'action' => 'match',
+          'relationship' => 'parent',
+          'group' => 'child-parent',
+          'subgroup' => 'child-parent',
+          'source' => 'child-id',
+          'hidden' => TRUE,
+          'limit' => 100,
+        ],
         [
           'action' => 'order',
           'relationship' => 'sibling',
-          'group' => 'children-order-weight',
-        ],
+          'group' => 'child-weight',
+        ]
       ],
       '#empty' => $this->t('There are no children to reorder'),
     ];
@@ -152,14 +172,49 @@ class HierarchyChildrenForm extends ContentEntityForm {
         continue;
       }
       $child = $node->getId();
+
+      $level = $node->getDepth() - $baseDepth;
+
+      if ($level > 1) {
+        continue;
+      }
+
+      $nextElem = $children[$weight + 1] ?? FALSE;
+      $inc = 1;
+      while ($nextElem && !$childEntities->contains($nextElem)) {
+        $nextElem = $children[$weight + $inc++] ?? FALSE;
+      }
+
+      !$nextElem || ($nextElem->getDepth() <= $node->getDepth())
+        ?: $form['children'][$child]['#attributes']['class'][] = 'hierarchy-row--parent';
+
       $form['children'][$child]['#attributes']['class'][] = 'draggable';
       $form['children'][$child]['#weight'] = $weight;
-      $form['children'][$child]['title'] = $childEntity->toLink()
-        ->toRenderable();
+
+      $form['children'][$child]['#attributes']['class'][] = 'hierarchy-row hierarchy-row--level-' . ($node->getDepth() - $baseDepth - 1);
+      $form['children'][$child]['#attributes']['level'][] = $level;
+
+      $form['children'][$child]['title'] = [
+        [
+          '#theme' => 'indentation',
+          '#size' => $node->getDepth() - $baseDepth - 1,
+        ],
+        [
+          '#markup'=> '
+            <div class="hierarchy-row-controls">
+              <div class="hierarchy-row-controls--expand"></div>
+              <div class="hierarchy-row-controls--collapse"></div>
+            </div>
+          ',
+        ],
+        $childEntity->toLink()->toRenderable(),
+      ];
+
       if (!$bundles) {
         $bundles = $this->entityTypeBundleInfo->getBundleInfo($childEntity->getEntityTypeId());
       }
       $form['children'][$child]['type'] = ['#markup' => $bundles[$childEntity->bundle()]['label']];
+
       $form['children'][$child]['weight'] = [
         '#type' => 'weight',
         '#delta' => 50,
@@ -167,7 +222,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
         '#title_display' => 'invisible',
         '#default_value' => $childEntity->{$fieldName}->weight,
         // Classify the weight element for #tabledrag.
-        '#attributes' => ['class' => ['children-order-weight']],
+        '#attributes' => ['class' => ['child-weight']],
       ];
       // Operations column.
       $form['children'][$child]['operations'] = [
@@ -186,9 +241,19 @@ class HierarchyChildrenForm extends ContentEntityForm {
           'url' => $childEntity->toUrl('delete-form'),
         ];
       }
-    }
 
-    $cache->applyTo($form);
+      $form['children'][$child]['id'] = [
+        '#type' => 'hidden',
+        '#value' => $node->getNodeKey()->getId(),
+        '#attributes' => ['class' => ['child-id']],
+      ];
+
+      $form['children'][$child]['parent'] = [
+        '#type' => 'hidden',
+        '#default_value' => $storage->findParent($node->getNodeKey())->getNodeKey()->getId(),
+        '#attributes' => ['class' => ['child-parent']],
+      ];
+    }
 
     return $form;
   }
@@ -210,7 +275,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
    */
   protected function actions(array $form, FormStateInterface $form_state) {
     $actions = parent::actions($form, $form_state);
-    $actions['submit']['#value'] = $this->t('Update child order');
+    $actions['submit']['#value'] = $this->t('Update children');
     // Don't perform field validation.
     $actions['submit']['#limit_validation_errors'] = [['children'], ['fieldname']];
     unset($actions['delete']);
@@ -221,7 +286,9 @@ class HierarchyChildrenForm extends ContentEntityForm {
     $fields = $this->parentCandidate->getCandidateFields($this->entity);
     $fieldName = $form_state->getValue('fieldname') ?: reset($fields);
     $entityType = $this->entity->getEntityType();
-    if ($entityType->hasHandlerClass('entity_hierarchy') && ($childBundles = $this->parentCandidate->getCandidateBundles($this->entity)) && isset($childBundles[$fieldName])) {
+
+    // Add children buttons not needed.
+    if (FALSE && $entityType->hasHandlerClass('entity_hierarchy') && ($childBundles = $this->parentCandidate->getCandidateBundles($this->entity)) && isset($childBundles[$fieldName])) {
       $handlerClass = $entityType->getHandlerClass('entity_hierarchy');
       /** @var \Drupal\entity_hierarchy\Handler\EntityHierarchyHandlerInterface $handler */
       $handler = new $handlerClass();
@@ -264,30 +331,26 @@ class HierarchyChildrenForm extends ContentEntityForm {
    */
   public function save(array $form, FormStateInterface $form_state) {
     $children = $form_state->getValue('children');
-    $childEntities = $form_state->getTemporaryValue(self::CHILD_ENTITIES_STORAGE);
     $fieldName = $form_state->getValue('fieldname');
     $batch = [
-      'title' => new TranslatableMarkup('Reordering children ...'),
+      'title' => new TranslatableMarkup('Rebuilding tree ...'),
       'operations' => [],
       'finished' => [static::class, 'finished'],
     ];
-    foreach ($childEntities as $node) {
-      $childEntity = $childEntities->offsetGet($node);
-      if (!$childEntity->isDefaultRevision()) {
-        // We don't operate on other than the default revision.
-        continue;
-      }
+    foreach ($children as $child) {
+      $entity = \Drupal::entityTypeManager()
+        ->getStorage($this->entity->getEntityTypeId())
+        ->load($child['id']);
       $batch['operations'][] = [
-        [static::class, 'reorder'],
-        [$fieldName, $childEntity, $children[$node->getId()]['weight']],
+        [static::class, 'rebuildTree'],
+        [$fieldName, $entity, $child['parent'], $child['weight']],
       ];
-
     }
     batch_set($batch);
   }
 
   /**
-   * Reorder batch callback.
+   * Batch callback to rebuild the tree.
    *
    * @param string $fieldName
    *   Field name.
@@ -296,9 +359,13 @@ class HierarchyChildrenForm extends ContentEntityForm {
    * @param int $weight
    *   New weight.
    */
-  public static function reorder($fieldName, ContentEntityInterface $childEntity, $weight) {
-    $childEntity->{$fieldName}->weight = $weight;
-    $childEntity->save();
+  public static function rebuildTree($fieldName, ContentEntityInterface $entity, $parent, $weight) {
+    if ($entity->{$fieldName}->target_id == $parent) {
+      return;
+    }
+    $entity->{$fieldName}->target_id = $parent;
+    $entity->{$fieldName}->weight = $weight;
+    $entity->save();
   }
 
   /**
diff --git a/src/Routing/EntityHierarchyRouteProvider.php b/src/Routing/EntityHierarchyRouteProvider.php
index c2174e1..e1b7b43 100644
--- a/src/Routing/EntityHierarchyRouteProvider.php
+++ b/src/Routing/EntityHierarchyRouteProvider.php
@@ -73,7 +73,7 @@ class EntityHierarchyRouteProvider implements EntityRouteProviderInterface, Enti
       $route
         ->setPath($entity_type->getLinkTemplate('canonical') . '/children')
         ->addDefaults([
-          '_title' => 'Reorder children',
+          '_title' => 'Children',
           '_entity_form' => "$entity_type_id.entity_hierarchy_reorder",
         ])
         ->setRequirement('_entity_access', "{$entity_type_id}.view")
