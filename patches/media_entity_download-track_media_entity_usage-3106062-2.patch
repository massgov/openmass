diff --git a/composer.json b/composer.json
index 38cc2c7312c3f4c570a28df96a0b6638f6733cc7..355d32fb4e81d4373832f37eb3745268fa1298dc 100644
--- a/composer.json
+++ b/composer.json
@@ -10,5 +10,8 @@
     "issues": "https://www.drupal.org/project/issues/media_entity_download",
     "source": "http://cgit.drupalcode.org/media_entity_download"
   },
-  "require": { }
+  "require": { },
+  "require-dev": {
+    "drupal/entity_usage": "^2@beta"
+  }
 }
diff --git a/src/Plugin/EntityUsage/Track/MediaEntityDownloadHtmlLink.php b/src/Plugin/EntityUsage/Track/MediaEntityDownloadHtmlLink.php
new file mode 100644
index 0000000000000000000000000000000000000000..866ba115d9aa05d74de2f93f0c3474155fb2e8d5
--- /dev/null
+++ b/src/Plugin/EntityUsage/Track/MediaEntityDownloadHtmlLink.php
@@ -0,0 +1,74 @@
+<?php
+
+namespace Drupal\media_entity_download\Plugin\EntityUsage\Track;
+
+use Drupal\link\LinkItemInterface;
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\entity_usage\Plugin\EntityUsage\Track\HtmlLink;
+
+/**
+ * Tracks usage of entities referenced from regular HTML Links.
+ *
+ * @EntityUsageTrack(
+ *   id = "media_entity_download_html_link",
+ *   label = @Translation("Media Entity Download HTML links"),
+ *   description = @Translation("Tracks media relationships created with standard links inside formatted text fields."),
+ *   field_types = {"link", "text", "text_long", "text_with_summary"},
+ * )
+ */
+class MediaEntityDownloadHtmlLink extends HtmlLink {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetEntities(FieldItemInterface $item) {
+    if ($item instanceof  LinkItemInterface) {
+      /** @var \Drupal\link\LinkItemInterface $item */
+      if ($item->isExternal()) {
+        $url = $item->getUrl()->toString();
+        $entity = $this->findEntityByUrlString($url);
+      }
+      else {
+        $url = $item->getUrl();
+        $entity = $this->findEntityByRoutedUrl($url);
+      }
+
+      if (!$entity) {
+        return [];
+      }
+
+      return [$entity->getEntityTypeId() . '|' . $entity->id()];
+    }
+    else {
+      return parent::getTargetEntities($item);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function findEntityByRoutedUrl($url) {
+    if (!$url || !$url->isRouted()) {
+      return NULL;
+    }
+
+    $entity = NULL;
+
+    $target_id = NULL;
+    $target_type = 'media';
+
+    $entity_pattern = '/^media_entity_download\.download$/';
+
+    if (preg_match($entity_pattern, $url->getRouteName(), $matches)) {
+      $route_parameters = $url->getRouteParameters();
+      $target_id = $route_parameters[$target_type];
+    }
+
+    if ($target_type && $target_id) {
+      $entity = $this->entityTypeManager->getStorage($target_type)->load($target_id);
+    }
+
+    return $entity;
+  }
+
+}
diff --git a/tests/src/Functional/MediaEntityDownloadHtmlLinkTest.php b/tests/src/Functional/MediaEntityDownloadHtmlLinkTest.php
new file mode 100644
index 0000000000000000000000000000000000000000..79359346ce85474042c4b3ff56f67a07739d16e6
--- /dev/null
+++ b/tests/src/Functional/MediaEntityDownloadHtmlLinkTest.php
@@ -0,0 +1,259 @@
+<?php
+
+namespace Drupal\Tests\entity_media_download\FunctionalJavascript;
+
+use Drupal\node\Entity\Node;
+use Drupal\file\Entity\File;
+use Drupal\media\Entity\Media;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\Tests\BrowserTestBase;
+use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
+use Drupal\Tests\entity_usage\Traits\EntityUsageLastEntityQueryTrait;
+
+/**
+ * Test to make sure entity_usage module can correctly track
+ * media_entity_download link.
+ *
+ * @group media_entity_download
+ */
+class MediaEntityDownloadHtmlLinkTest extends BrowserTestBase {
+
+  use MediaTypeCreationTrait;
+
+  use StringTranslationTrait;
+
+  use EntityUsageLastEntityQueryTrait;
+
+  protected static $modules = [
+    'node',
+    'field_ui',
+    'system',
+    'text',
+    'path',
+    'language',
+    'entity_usage',
+    'entity_usage_test',
+    'media',
+    'media_entity_download',
+  ];
+
+  /**
+   * The test media type.
+   *
+   * @var \Drupal\media\MediaTypeInterface
+   */
+  protected $testMediaType;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp() {
+    parent::setUp();
+
+    $this->user = $this->drupalCreateUser([
+      'access administration pages',
+      'administer languages',
+      'administer nodes',
+      'administer node fields',
+      'administer node display',
+      'bypass node access',
+      'create url aliases',
+      'use text format eu_test_text_format',
+      'view the administration theme',
+    ]);
+    $this->drupalLogin($this->user);
+
+    // Create a test media type.
+    $this->testMediaType = $this->createMediaType('image');
+  }
+
+  /**
+   * Test entity usage tracking of media entity download path
+   */
+  public function testMediaDownAliasAsDownloadLink() {
+    // Make sure current langcode is 'en'
+    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
+    $this->assertEqual($language, 'en');
+
+    /** @var \Drupal\entity_usage\EntityUsage $usage_service */
+    $usage_service = \Drupal::service('entity_usage.usage');
+
+    // Create a file to upload
+    $file = File::create([
+      'uri' => 'public://star.png',
+    ]);
+    $file->setPermanent();
+    $file->save();
+
+    // Create a test media entity
+    $media = Media::create([
+      'bundle' => $this->testMediaType->id(),
+      'field_media_image' => [
+        'target_id' => $file->id(),
+      ],
+    ]);
+
+    $media->save();
+
+    // Add a path alias for media entity download link
+    $alias_url = '/i-am-an-alias';
+    \Drupal::service('path.alias_storage')->save('/media/' . $media->id() . '/download', $alias_url, 'en');
+
+    // Use the media download alias as normal download link
+    $embedded_text = '<p>foo <a href="' . $alias_url . '">linked text</a> bar</p>';
+    $node = Node::create([
+      'type' => 'eu_test_ct',
+      'title' => 'Node',
+      'field_eu_test_rich_text' => [
+        'value' => $embedded_text,
+        'format' => 'eu_test_text_format',
+      ],
+    ]);
+    $node->save();
+
+    // Check the usage tracking as expected
+    $usage = $usage_service->listSources($media);
+    $expected = [
+      'node' => [
+        $node->id() => [
+          [
+            'source_langcode' => $node->language()->getId(),
+            'source_vid' => $node->getRevisionId(),
+            'method' => 'media_entity_download_html_link',
+            'field_name' => 'field_eu_test_rich_text',
+            'count' => 1,
+          ],
+        ],
+      ],
+    ];
+    $this->assertEquals($expected, $usage);
+  }
+
+  /**
+   * Test entity usage tracking of media entity download path with langcode prefixed
+   */
+  public function testMediaDownloadAliasWithLanguagePrefix() {
+    // Add a another language
+    $this->drupalPostForm('admin/config/regional/language/add', ['predefined_langcode' => 'de'], $this->t('Add language'));
+
+    // In order to reflect the changes for a multilingual site in the container
+    // we have to rebuild it.
+    $this->rebuildContainer();
+
+    // Make sure current langcode is 'en'
+    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
+    $this->assertEqual($language, 'en');
+
+    // Set correct language negotiation url configuration
+    $detection = [
+      'language_interface[enabled][language-url]' => 1,
+    ];
+    $detection_url = [
+      'language_negotiation_url_part' => 'path_prefix',
+      'prefix[en]' => '',
+      'prefix[de]' => 'de',
+    ];
+    $this->drupalPostForm('admin/config/regional/language/detection', $detection, $this->t('Save settings'));
+    $this->drupalPostForm('admin/config/regional/language/detection/url', $detection_url, $this->t('Save configuration'));
+
+    // Make sure the language negotiation url prefixes are correct
+    $config = $this->config('language.negotiation');
+    $this->assertEqual($config->get('url.prefixes.en'), '');
+    $this->assertEqual($config->get('url.prefixes.de'), 'de');
+
+    /** @var \Drupal\entity_usage\EntityUsage $usage_service */
+    $usage_service = \Drupal::service('entity_usage.usage');
+
+    // Create a file to upload
+    $file = File::create([
+      'uri' => 'public://star.png',
+    ]);
+    $file->setPermanent();
+    $file->save();
+
+    // Create 1st test media entity
+    $media1 = Media::create([
+      'bundle' => $this->testMediaType->id(),
+      'field_media_image' => [
+        'target_id' => $file->id(),
+      ],
+    ]);
+    $media1->save();
+
+    // Add a path alias for en media entity download
+    $alias_url = '/i-am-an-alias';
+    \Drupal::service('path.alias_storage')->save('/media/' . $media1->id() . '/download', $alias_url, 'en');
+
+    // Use the media entity download alias as normal link
+    $embedded_text = '<p>foo <a href="' . $alias_url . '">linked text</a> bar</p>';
+    $node1 = Node::create([
+      'type' => 'eu_test_ct',
+      'title' => 'Node',
+      'field_eu_test_rich_text' => [
+        'value' => $embedded_text,
+        'format' => 'eu_test_text_format',
+      ],
+    ]);
+    $node1->save();
+
+    // Check the usage tracking as expected
+    $usage = $usage_service->listSources($media1);
+    $expected = [
+      'node' => [
+        $node1->id() => [
+          [
+            'source_langcode' => $node1->language()->getId(),
+            'source_vid' => $node1->getRevisionId(),
+            'method' => 'media_entity_download_html_link',
+            'field_name' => 'field_eu_test_rich_text',
+            'count' => 1,
+          ],
+        ],
+      ],
+    ];
+    $this->assertEquals($expected, $usage);
+
+    // Create 2nd test media entity
+    $media2 = Media::create([
+      'bundle' => $this->testMediaType->id(),
+      'field_media_image' => [
+        'target_id' => $file->id(),
+      ],
+    ]);
+    $media2->save();
+
+    // Add same path alias for 2nd media entity download
+    // But with a different langcode
+    $alias_url = '/i-am-an-alias';
+    \Drupal::service('path.alias_storage')->save('/media/' . $media2->id() . '/download', $alias_url, 'de');
+
+    // Use the media entity download alias as normal link
+    $embedded_text = '<p>foo <a href="/de' . $alias_url . '">linked text</a> bar</p>';
+    $node2 = Node::create([
+      'type' => 'eu_test_ct',
+      'title' => 'Node',
+      'field_eu_test_rich_text' => [
+        'value' => $embedded_text,
+        'format' => 'eu_test_text_format',
+      ],
+    ]);
+    $node2->save();
+
+    // Check the usage tracking as expected
+    $usage = $usage_service->listSources($media2);
+    $expected = [
+      'node' => [
+        $node2->id() => [
+          [
+            'source_langcode' => $node2->language()->getId(),
+            'source_vid' => $node2->getRevisionId(),
+            'method' => 'media_entity_download_html_link',
+            'field_name' => 'field_eu_test_rich_text',
+            'count' => 1,
+          ],
+        ],
+      ],
+    ];
+    $this->assertEquals($expected, $usage);
+  }
+}
