diff --git a/conditional_fields.module b/conditional_fields.module
index 3594f7f..11f833d 100644
--- a/conditional_fields.module
+++ b/conditional_fields.module
@@ -5,6 +5,7 @@
  * Contains conditional_fields.module.
  */
 
+use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -94,6 +95,32 @@ function conditional_fields_conditional_fields_alter(&$fields, $entity_type, $bu
   asort($fields);
 }
 
+/**
+ * Gets the paragraph's bundle from a form field.
+ */
+function conditional_fields_get_paragraph_bundle($field, $form) {
+  $closest_parent = [];
+  $last_subform = FALSE;
+
+  // Finds closest subform postition.
+  foreach ($field['#array_parents'] as $index => $parent) {
+    if ($parent === 'subform') {
+      $last_subform = $index;
+    }
+  }
+
+  if (!$last_subform) {
+    return FALSE;
+  }
+
+  // Gets the route to the closest subform.
+  $closest_parent = array_slice($field['#array_parents'], 0, $last_subform);
+  // Gets the paragraph's bundle if any...
+  $bundle = NestedArray::getValue($form, array_merge($closest_parent, ['#paragraph_type']));
+
+  return $bundle && !is_array($bundle) ? $bundle : FALSE;
+}
+
 /**
  * After build function to process field depencies.
  */
@@ -186,3 +213,28 @@ function conditional_fields_form_alter(&$form, &$form_state, $form_id) {
 function conditional_fields_form_after_build($form, &$form_state) {
   return \Drupal::service('conditional_fields.form_helper')->afterBuild($form, $form_state);
 }
+
+/**
+ * Allows identify dependents/dependees with predictable IDs.
+ */
+function conditional_fields_get_simpler_id($id) {
+  // Removes an appended identifier used for individual options.
+  // preg_match('/.*([-]{2,}[a-zA-Z0-9]+)$/', $id, $matches);
+  preg_match('/.*(--[a-zA-Z0-9-_]+)$/', $id, $matches);
+  if ($matches[1] ?? FALSE) {
+    $id = str_replace($matches[1], '', $id);
+  }
+
+  $strings_to_remove = [
+    '-0-value',
+    '-value',
+  ];
+  foreach ($strings_to_remove as $string_to_remove) {
+    $string_to_remove_strlen = strlen($string_to_remove);
+    if ((strrpos($id, $string_to_remove) + $string_to_remove_strlen) == strlen($id)) {
+      return substr($id, 0,  - $string_to_remove_strlen);
+    }
+  }
+
+  return $id;
+}
diff --git a/src/ConditionalFieldsElementAlterHelper.php b/src/ConditionalFieldsElementAlterHelper.php
index 1cebd40..3808c5f 100644
--- a/src/ConditionalFieldsElementAlterHelper.php
+++ b/src/ConditionalFieldsElementAlterHelper.php
@@ -64,6 +64,10 @@ class ConditionalFieldsElementAlterHelper {
           $bundle = $bundle->getPluginId();
         }
 
+        $paragraph_bundle = conditional_fields_get_paragraph_bundle($field, $form);
+        $bundle = $paragraph_bundle ?: $bundle;
+        $is_related_to_paragraph = (bool) $paragraph_bundle;
+        $entity_type = $is_related_to_paragraph ? 'paragraph' : $entity_type;
         $dependencies = $this->loadDependencies($entity_type, $bundle);
 
         if (!$dependencies) {
@@ -71,19 +75,57 @@ class ConditionalFieldsElementAlterHelper {
         }
 
         $field_name = reset($field['#array_parents']);
+
+        // We get the name of the field inside the the paragraph where the
+        // conditions are being applied, instead of the field name where the
+        // paragraph is.
+        if ($is_related_to_paragraph) {
+          foreach ($field['#array_parents'] as $parent) {
+            if (isset($dependencies['dependents'][$parent])) {
+              $field_name = $parent;
+              break;
+            }
+
+            if (isset($dependencies['dependees'][$parent])) {
+              $field_name = $parent;
+              break;
+            }
+          }
+
+          if ($parent != $field_name || $first_parent == $field_name || !isset($field['#type'])) {
+            return $element;
+          }
+        }
+
+        $paragraph_info = [];
+
+        if ($is_related_to_paragraph) {
+          $paragraph_info['entity_type'] = $entity_type;
+          $paragraph_info['bundle'] = $bundle;
+          $paragraph_info['paragraph_field'] = $first_parent;
+          $paragraph_info['array_parents'] = $element['#array_parents'];
+        }
+
         // Attach dependent.
         if (isset($dependencies['dependents'][$field_name])) {
           foreach ($dependencies['dependents'][$field_name] as $id => $dependency) {
             if (!isset($form['#conditional_fields'][$field_name]['dependees'][$id]) || $this->isPriorityField($field)) {
-              $this->attachDependency($form, $form_state, ['#field_name' => $dependency['dependee']], $field, $dependency['options'], $id);
+              if ($is_related_to_paragraph) {
+                $paragraph_info['field'] = $field_name;
+              }
+              $this->attachDependency($form, $form_state, ['#field_name' => $dependency['dependee']], $field, $dependency['options'], $id, $paragraph_info);
             }
           }
         }
 
-        if (isset($dependencies['dependees'][$field_name])) {
+      // Attach dependee.
+      if (isset($dependencies['dependees'][$field_name])) {
           foreach ($dependencies['dependees'][$field_name] as $id => $dependency) {
             if (!isset($form['#conditional_fields'][$field_name]['dependents'][$id]) || $this->isPriorityField($field)) {
-              $this->attachDependency($form, $form_state, $field, ['#field_name' => $dependency['dependent']], $dependency['options'], $id);
+              if ($is_related_to_paragraph) {
+                $paragraph_info['field'] = $field_name;
+              }
+              $this->attachDependency($form, $form_state, $field, ['#field_name' => $dependency['dependent']], $dependency['options'], $id, $paragraph_info);
             }
           }
         }
@@ -97,10 +139,7 @@ class ConditionalFieldsElementAlterHelper {
    * Loads all dependencies from the database for a given bundle.
    */
   public function loadDependencies($entity_type, $bundle) {
-    static $dependency_helper;
-    if (!isset($dependency_helper)) {
-      $dependency_helper = new DependencyHelper($entity_type, $bundle);
-    }
+    $dependency_helper = new DependencyHelper($entity_type, $bundle);
     return $dependency_helper->getBundleDependencies();
   }
 
@@ -182,7 +221,7 @@ class ConditionalFieldsElementAlterHelper {
    *   Note that you don't need to manually set all these options, since default
    *   settings are always provided.
    */
-  public function attachDependency(array &$form, &$form_state, $dependee, $dependent, array $options, $id = 0) {
+  public function attachDependency(&$form, &$form_state, $dependee, $dependent, $options, $id = 0, $paragraph_info = []) {
     // The absence of the $id parameter identifies a custom dependency.
     if (!$id) {
       // String values are accepted to simplify usage of this function with custom
@@ -210,9 +249,20 @@ class ConditionalFieldsElementAlterHelper {
     // Attach dependee.
     // Use the #array_parents property of the dependee instead of #field_parents
     // since we will need access to the full structure of the widget.
-    if (isset($dependee['#parents'])) {
-      $form['#conditional_fields'][$dependee['#parents'][0]]['parents'] = $dependee['#array_parents'];
-      $form['#conditional_fields'][$dependee['#parents'][0]]['dependents'][$id] = [
+    if (isset($dependee['#array_parents'])) {
+
+      $dependee_index = $dependee['#parents'][0];
+      if ($paragraph_info) {
+        $dependee_index = conditional_fields_get_simpler_id($dependee['#id']);
+      }
+
+      $form['#conditional_fields'][$dependee_index]['index'] = $dependee_index;
+      $form['#conditional_fields'][$dependee_index]['base'] =  $dependee_index;
+
+      // $form['#conditional_fields'][$dependee_index]['id'] = $dependee['#id'];
+      $form['#conditional_fields'][$dependee_index]['is_from_paragraph'] = (bool) $paragraph_info;
+      $form['#conditional_fields'][$dependee_index]['parents'] = $dependee['#array_parents'];
+      $form['#conditional_fields'][$dependee_index]['dependents'][$id] = [
         'dependent' => $dependent['#field_name'],
         'options' => $options,
       ];
@@ -230,9 +280,27 @@ class ConditionalFieldsElementAlterHelper {
     elseif (isset($dependent['#field_parents'])) {
       $dependent_parents = $dependent['#field_parents'];
     }
+
     if (isset($dependent_parents)) {
-      $form['#conditional_fields'][$dependent['#parents'][0]]['field_parents'] = $dependent_parents;
-      $form['#conditional_fields'][$dependent['#parents'][0]]['dependees'][$id] = [
+      $dependent_index = $dependent['#parents'][0];
+
+      if ($paragraph_info) {
+        $dependent_index = conditional_fields_get_simpler_id($dependent['#id']);
+      }
+
+      // This worked to get the value_form when the value_form was an array.
+      if (isset($options['value_form'][0]['value']) && $paragraph_info) {
+        $options['value_form'] = $options['value_form'][0]['value'];
+      }
+
+      // $form['#conditional_fields'][$dependent_index]['id'] = $dependent['#id'];
+      $form['#conditional_fields'][$dependent_index]['is_from_paragraph'] = (bool) $paragraph_info;
+
+      $form['#conditional_fields'][$dependent_index]['index'] = $dependent_index;;
+
+      $form['#conditional_fields'][$dependent_index]['field_parents'] = $dependent_parents;
+      $form['#conditional_fields'][$dependent_index]['array_parents'] = $paragraph_info['array_parents'] ?? [];
+      $form['#conditional_fields'][$dependent_index]['dependees'][$id] = [
         'dependee' => $dependee['#field_name'],
         'options' => $options,
       ];
diff --git a/src/ConditionalFieldsFormHelper.php b/src/ConditionalFieldsFormHelper.php
index 5452a5c..e82f199 100644
--- a/src/ConditionalFieldsFormHelper.php
+++ b/src/ConditionalFieldsFormHelper.php
@@ -3,6 +3,7 @@
 namespace Drupal\conditional_fields;
 
 use Drupal\Component\Render\MarkupInterface;
+use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -90,6 +91,16 @@ class ConditionalFieldsFormHelper {
     return $this->form;
   }
 
+  /**
+   * Returns the "base name" for a field id.
+   *
+   * Returns $name until the last subform appears to relate field ids
+   * from paragraphs on the #conditional_fields array.
+   */
+  static private function getBaseName($name) {
+    return implode('subform', array_slice(explode('subform', $name), 0, -1)) . 'subform-';
+  }
+
   /**
    * Build and attach #states properties to dependent fields.
    */
@@ -105,10 +116,17 @@ class ConditionalFieldsFormHelper {
       }
       $dependees = $dependent_info['dependees'];
 
-      $dependent_location = array_merge([], [$dependent]);
+      $dependent_location = $dependent_info['is_from_paragraph'] ?
+        $dependent_info['array_parents'] :
+        array_merge([], [$dependent]);
+
       $dependent_form_field = NestedArray::getValue($this->form, $dependent_location);
 
-      $states = $this->processDependeeFields($dependees, $dependent_form_field, $dependent_location, $states);
+      if ($dependent_info['is_from_paragraph']) {
+        $base_name = $this->getBaseName($dependent);
+      }
+
+      $states = $this->processDependeeFields($dependees, $dependent_form_field, $dependent_location, $states, $base_name ?? '');
 
       if (empty($states)) {
         continue;
@@ -131,8 +149,27 @@ class ConditionalFieldsFormHelper {
       // Save the modified field back into the form.
       NestedArray::setValue($this->form, $dependent_location, $dependent_form_field);
 
+      $states_location = $dependent_location;
+      while ($states_location && end($states_location) != 'subform') {
+        $last_field = array_pop($states_location);
+      }
+
+      if (end($states_location) == 'subform' && isset($last_field)) {
+        $states_location[] = $last_field;
+      } else {
+        $states_location = $dependent_location;
+      }
+
+      $states_location = array_merge($states_location, ['#states']);
+
+      // Merge states in case there are previous states defined.
+      $new_states = array_merge(
+        NestedArray::getValue($this->form, $states_location) ?? [],
+        $this->mapStates($states)
+      );
+
       // Add the #states property to the dependent field.
-      NestedArray::setValue($this->form, array_merge($dependent_location, ['#states']), $this->mapStates($states));
+      NestedArray::setValue($this->form, $states_location, $new_states);
     }
 
     return $this;
@@ -141,11 +178,15 @@ class ConditionalFieldsFormHelper {
   /**
    * Determine and register dependee field effects.
    */
-  public function processDependeeFields($dependees, &$dependent_form_field = [], $dependent_location = [], $states = []) {
+  public function processDependeeFields($dependees, &$dependent_form_field = [], $dependent_location = [], $states = [], $base_name = '') {
     // Cycle the dependant's dependees.
-    foreach ($dependees as $dependency) {
+    foreach ($dependees as $key => $dependency) {
       $dependee = $dependency['dependee'];
 
+      if ($base_name) {
+        $dependee = $base_name . HTML::getId($dependee);
+      }
+
       if (empty($this->form['#conditional_fields'][$dependee])) {
         continue;
       }
@@ -257,10 +298,38 @@ class ConditionalFieldsFormHelper {
       $state = [$options['state'] => [$options['selector'] => [$options['condition'] => TRUE]]];
     }
     else {
-      $field_name = explode('[', $dependee_form_field['#name']);
+
+      // If the name has a subform in it, we should get information on its
+      // parent element to find out if it is a paragraph.
+      if (strpos($dependee_form_field['#name'], '[subform]') !== FALSE) {
+        $subform_exploded = explode('[subform][', $dependee_form_field['#name']);
+        $first_field = \explode('[', $subform_exploded[0])[0];
+        $field_name = explode('][', end($subform_exploded));
+        $storage = \Drupal::service('entity_type.manager')->getStorage('entity_form_display');
+        $parent_widget_parents = $dependee_form_field['#array_parents'];
+
+        while ($parent_widget_parents && end($parent_widget_parents) !== 'subform') {
+          array_pop($parent_widget_parents);
+        }
+        array_pop($parent_widget_parents);
+        $parent_info = NestedArray::getValue($this->form_state->getCompleteForm(), $parent_widget_parents);
+      }
+
+      // For paragraphs we must change the form display.
+      if (isset($parent_info['#paragraph_type'])) {
+        $form_settings = $form_display->getComponent($first_field)['settings'];
+        $form_display_mode = $form_settings['form_display_mode'];
+        $paragraph_type = $parent_info['#paragraph_type'];
+        $form_display = $storage->load("paragraph.$paragraph_type.$form_display_mode");
+        $dependee = $field_name[0];
+      } else {
+        $field_name = explode('[', $dependee_form_field['#name']);
+      }
+
       $dependee_form_state = isset($dependee_form_field['#field_parents'], $field_name[0], $this->form_state) ? WidgetBase::getWidgetState($dependee_form_field['#field_parents'], $field_name[0], $this->form_state) : NULL;
       $dependee_form_field['#original_name'] = $field_name[0];
       $dependee_display = $form_display->getComponent($dependee);
+
       if (is_array($dependee_display) && array_key_exists('type', $dependee_display)) {
         $widget_id = $dependee_display['type'];
       }
@@ -399,7 +468,15 @@ class ConditionalFieldsFormHelper {
       return;
     }
 
-    $dependent = $form['#conditional_fields'][reset($element['#array_parents'])];
+    $dependent = $form['#conditional_fields'][reset($element['#array_parents'])] ?? FALSE;
+    $conditional_field_key = \conditional_fields_get_simpler_id($element['#id']);
+    $dependent = $dependent ?: $form['#conditional_fields'][$conditional_field_key];
+
+    // @todo if there are not dependents, something might be wrong,
+    // however, this also avoids potential fatal errors.
+    if (!$dependent) {
+      return;
+    }
 
     // Check if this field's dependencies were triggered.
     $triggered = self::evaluateDependencies($dependent, $form, $form_state);
@@ -415,30 +492,54 @@ class ConditionalFieldsFormHelper {
           if (($result && $state == 'required' && $triggered) || (!$result && $state == '!required' && !$triggered)) {
             $return = TRUE;
             $key_exists = NULL;
-            $input_state = NestedArray::getValue($form_state->getValues(), $dependent['field_parents'], $key_exists);
+            $input_state = NestedArray::getValue($form_state->getValues(), $element['#parents'], $key_exists);
             if ($key_exists && !is_object($input_state) && isset($input_state['add_more'])) {
               // Remove the 'value' of the 'add more' button.
               unset($input_state['add_more']);
             }
             $input_state = (is_null($input_state)) ? [] : $input_state;
-            if (isset($dependent['field_parents'][0])) {
+            $subform_key = \array_search('subform', $dependent['field_parents'], TRUE);
+            $field = NULL;
+            if ($subform_key !== FALSE) {
+              $subform_array = NestedArray::getValue($form, array_slice($dependent['field_parents'], 0, $subform_key + 1));
+              $entity_type = $subform_array['#entity_type'];
+              $field_name = $dependent['field_parents'][$subform_key + 1];
+              $field = FieldStorageConfig::loadByName($entity_type, $field_name);
+            } else if (isset($dependent['field_parents'][0])) {
               $field = FieldStorageConfig::loadByName($form['#entity_type'], $dependent['field_parents'][0]);
             }
-            else {
-              $field = NULL;
-            }
+
             if (empty($input_state)) {
               if (isset($element['widget']['#title'])) {
                 $title = $element['widget']['#title'];
               }
               elseif (isset($dependent['field_parents'][0])) {
-                $title = $dependent['field_parents'][0];
+                $title = $subform_key === FALSE ? $dependent['field_parents'][0] : $field_name;
               }
               elseif ($field) {
                 $title = $field->getName();
               }
 
-              $form_state->setError($element, t('%name is required.', ['%name' => $title]));
+              // Gets the deepest element to set the error.
+              $element_to_set_error =
+                $element['widget'][0]['value'] ??
+                  $element['widget'][0] ??
+                    $element['widget'] ??
+                      $element;
+
+              if (isset($element_to_set_error['#title'])) {
+                $title = $element_to_set_error['#title'];
+              }
+
+              if ($element_to_set_error['#access'] ?? TRUE) {
+
+                if ($element_to_set_error['#type'] == 'hidden') {
+                  $element_to_set_error = NestedArray::getValue($form, array_slice($element_to_set_error['#array_parents'], 0, -1));
+                  $title = $element_to_set_error['#title'];
+                }
+
+                $form_state->setError($element_to_set_error, t('%name is required.', ['%name' => $title]));
+              }
             }
           }
         }
@@ -462,6 +563,10 @@ class ConditionalFieldsFormHelper {
       $form_state_addition['reset'] = FALSE;
     }
 
+    // Store dependent to remove validation errors previously set.
+    // See: ConditionalFieldsFormHelper::formValidate().
+    $form_state_addition['dependent'] = $dependent;
+
     // Tag validation errors previously set on this field for removal in
     // ConditionalFieldsFormHelper::formValidate().
     $errors = $form_state->getErrors();
@@ -507,19 +612,29 @@ class ConditionalFieldsFormHelper {
    *   Evaluated dependencies array.
    */
   protected static function evaluateDependencies(array $dependent, array $form, FormStateInterface $form_state, $grouping = TRUE) {
-    $dependencies = $form['#conditional_fields'][reset($dependent['field_parents'])]['dependees'];
+    if ($dependent['is_from_paragraph']) {
+      $dependencies = $form['#conditional_fields'][ $dependent['index'] ]['dependees'];
+      $base_name = self::getBaseName($dependent['index']);
+    } else {
+      $dependencies = $form['#conditional_fields'][reset($dependent['field_parents'])]['dependees'];
+    }
     $evaluated_dependees = [];
 
     foreach ($dependencies as $dependency) {
       // Extract field values from submitted values.
       $dependee = $dependency['dependee'];
+      $dependee_key = $dependee;
+
+      if (isset($base_name)) {
+        $dependee_key = $base_name . HTML::getId($dependee);;
+      }
 
       // Skip any misconfigured conditions.
-      if (empty($form['#conditional_fields'][$dependee]['parents'])) {
+      if (empty($form['#conditional_fields'][$dependee_key]['parents'])) {
         continue;
       }
 
-      $dependee_parents = $form['#conditional_fields'][$dependee]['parents'];
+      $dependee_parents = $form['#conditional_fields'][$dependee_key]['parents'];
 
       // We have the parents of the field, but depending on the entity type and
       // the widget type, they may include additional elements that are actually
@@ -527,10 +642,15 @@ class ConditionalFieldsFormHelper {
       // structure and use the parents only up to that depth.
       $dependee_parents_keys = array_flip($dependee_parents);
       $dependee_parent = NestedArray::getValue($form, array_slice($dependee_parents, 0, $dependee_parents_keys[$dependee]));
-      $values = self::formFieldGetValues($dependee_parent[$dependee], $form_state);
-      if (isset($values['value']) && is_numeric($values['value'])) {
-        $values = $values['value'];
+
+      $form_state_values = $form_state->getValues();
+      $dependee_element = NestedArray::getValue($form, $dependee_parents);
+      $values = NestedArray::getValue($form_state_values, $dependee_element['#parents']);
+
+      if (isset($values[0]['value'])) {
+        $values = $values[0]['value'];
       }
+
       // Remove the language key.
       if (isset($dependee_parent[$dependee]['#language'], $values[$dependee_parent[$dependee]['#language']])) {
         $values = $values[$dependee_parent[$dependee]['#language']];
@@ -545,7 +665,7 @@ class ConditionalFieldsFormHelper {
     }
 
     if ($grouping) {
-      return self::evaluateGrouping($evaluated_dependees[reset($dependent['field_parents'])]);
+      return self::evaluateGrouping($evaluated_dependees[reset($dependent['field_parents'])] ?? FALSE);
     }
 
     return $evaluated_dependees;
@@ -585,37 +705,58 @@ class ConditionalFieldsFormHelper {
       return;
     }
 
-    $entity = $form_state->getFormObject()->getEntity();
     $untriggered_dependents_errors = [];
+    $form_state_errors = $form_state->getErrors();
+
+    // Tag errors from untriggered fields to remove them later.
+    $untriggered_dependents = $form_state->getValue('conditional_fields_untriggered_dependents');
+    foreach ($untriggered_dependents as &$field) {
+      $error_key_arr = NestedArray::getValue($form, $field['parents'])['#parents'];
+      $error_key = implode('][', $error_key_arr ?? []);
+      if (isset($form_state_errors[$error_key])) {
+        $field['errors'][$error_key] = $form_state_errors[$error_key];
+      }
+    }
 
-    foreach ($form_state->getValue('conditional_fields_untriggered_dependents') as $field) {
-      $parent = [$field['parents'][0]];
-      $dependent = NestedArray::getValue($form, $parent);
-      $field_values_location = self::formFieldGetValues($dependent, $form_state);
-
-      $dependent_field_name = reset($dependent['#array_parents']);
+    foreach ($untriggered_dependents as $field) {
+      // When there is a subform, the parent location is different.
+      $subform_location = \array_search('subform', $field['dependent']['array_parents'], TRUE);
+      if ($subform_location !== FALSE) {
+        $dependent = NestedArray::getValue($form, $field['dependent']['array_parents']);
+        $parents = $dependent['#parents'];
+        $field_name = end($parents);
+        $route_to_parent = array_slice($dependent['#parents'], 0, -1);
+        $field_values_location = NestedArray::getValue($form_state->getValues(), $route_to_parent);
+        $dependent_parents = $dependent['#parents'];
+        $values = $field_values_location[$field_name];
+      } else {
+        $parent = [$field['parents'][0]];
+        $dependent = NestedArray::getValue($form, $parent);
+        $field_values_location = self::formFieldGetValues($dependent, $form_state);
+
+        $route_to_parent = array_slice($dependent['#parents'], 0, -1);
+        $field_values_location = NestedArray::getValue($form_state->getValues(), $route_to_parent);
+
+        $dependent_parents = $dependent['#parents'];
+        $field_name = reset($dependent['#array_parents']);
+        $values = $field_values_location[$field_name];
+      }
 
       // If we couldn't find a location for the field's submitted values, let
       // the validation errors pass through to avoid security holes.
-      if (empty($field_values_location)) {
+      if (!isset($field_values_location[$field_name])) {
         if (!empty($field['errors'])) {
           $untriggered_dependents_errors = array_merge($untriggered_dependents_errors, $field['errors']);
         }
         continue;
       }
-
       // Save the changed array back in place.
       // Do not use form_set_value() since it assumes
       // that the values are located at
       // $form_state['values'][ ... $element['#parents'] ... ], while the
       // documentation of hook_field_widget_form() states that field values are
-      // // $form_state['values'][ ... $element['#field_parents'] ... ].
-      // NestedArray::setValue($form_state['values'], $dependent['#field_parents'], $field_values_location);
-      if (!empty($field['reset'])) {
-        $default = $entity->getFieldDefinition($dependent_field_name)->getDefaultValue($entity);
-        // Save the changed array back in place.
-        $form_state->setValue($dependent_field_name, $default);
-      }
+      // $form_state['values'][ ... $element['#field_parents'] ... ].
+      NestedArray::setValue($form_state->getValues(), $dependent_parents, $values);
 
       if (!empty($field['errors'])) {
         $untriggered_dependents_errors = array_merge($untriggered_dependents_errors, $field['errors']);
